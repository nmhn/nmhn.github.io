<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>数据库完整性概述</title>
    <url>/2021-12-06-database-Complication.html</url>
    <content><![CDATA[<p>9.1 数据库完整性概述</p>
<p>数据库完整性–数据的正确性,有效性,西安共性</p>
<p>列级约束</p>
<p>对属性的数据类型,等的定义</p>
<p>元祖约束</p>
<p>元组中各个属性之间的约束关系</p>
<h4 id="实现完整性约束的方法"><a href="#实现完整性约束的方法" class="headerlink" title="实现完整性约束的方法"></a>实现完整性约束的方法</h4><ol>
<li>提供定义机制</li>
<li>提供检查方法</li>
<li>违约处理</li>
</ol>
<h2 id="9-4用户定义的完整性"><a href="#9-4用户定义的完整性" class="headerlink" title="9.4用户定义的完整性"></a>9.4用户定义的完整性</h2><h2 id="9-5触发器"><a href="#9-5触发器" class="headerlink" title="9.5触发器"></a>9.5触发器</h2><p>一类用户定义在关系数据表上的一类由事件驱动的特殊过程,用编程的方法实现复杂的业务规则</p>
<p>是一种特殊类型的存储过程</p>
<p>可用触发器完成很多数据库完整性保护的过程</p>
<ol>
<li>复杂的业务规则</li>
<li>比较数据修改前后状态</li>
</ol>
<p>SQL:CREATE TRIGER命令</p>
<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>原子性:不可分割</p>
<p>一致性:事务执行结果必须从一个状态转换到另一个状态时保持一致,即若中间出现错误,则将所有操作撤销</p>
<p>事务应当具有ACID性质，<br>A是<strong>原子</strong>性(atomic)：事务中包含的各项操作必须全部成功执行或者全部不执行。任何一项操作失败，将导致整个事务失败，其他已经执行的任务所作的数据操作都将被撤销，只有所有的操作全部成功，整个事务才算是成功完成。<br>C是<strong>一致性</strong>(consistent)：保证了当事务结束后，系统状态是一致的。那么什么是一致的系统状态？例如，如果银行始终遵循着”银行账号必须保持正态平衡”的原则，那么银行系统的状态就是一致的。上面的转账例子中，在取钱的过程中，账户会出现负态平衡，在事务结束之后，系统又回到一致的状态。这样，系统的状态对于客户来说，始终是一致的。<br>I是<strong>隔离</strong>性(isolated)：使得并发执行的事务，彼此无法看到对方的中间状态。保证了并发执行的事务顺序执行，而不会导致系统状态不一致。<br>D是<strong>持久性</strong>(durable)：保证了事务完成后所作的改动都会被持久化，即使是发生灾难性的失败。可恢复性资源保存了一份事务日志，如果资源发生故障，可以通过日志来将数据重建起来。</p>
<p>事务应处在下列状态之一</p>
<p>活动状态</p>
<p>失败状态:意味着要回滚</p>
<p>中止状态:数据库已经回滚完毕,恢复到提交前状态</p>
<p>提交状态:当数据更改完全写入磁盘时,进入提交状态</p>
<p>10.3.1事务故障的恢复</p>
<p>1.反向扫描日文件日志,查找该事务的更新操作</p>
<p>2.对该事务的更新操作执行你操作</p>
<p>3.继续反向扫描,直到读到此事务的开始操作</p>
<p>10.3.2系统故障恢复</p>
<p>1.<strong>正向</strong>扫描日志文件,列出Redo队列,Undo队列</p>
<h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><p><code>&lt;u&gt;</code><strong>登记两条原则</strong> <code>&lt;/u&gt;</code></p>
<p><code>&lt;u&gt;</code><strong>1.登记次序严格按并行事物执行顺序</strong> <code>&lt;/u&gt;</code></p>
<p><code>&lt;u&gt;</code><strong>2.先写日志文件,后写数据库</strong> <code>&lt;/u&gt;</code></p>
]]></content>
      <tags>
        <tag>exp8</tag>
      </tags>
  </entry>
  <entry>
    <title>21/12/6 Database 数据库的安全性</title>
    <url>/2021-12-06-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%AE%89%E5%85%A8%E6%80%A7.html</url>
    <content><![CDATA[<h1 id="数据库的安全性"><a href="#数据库的安全性" class="headerlink" title="数据库的安全性"></a>数据库的安全性</h1><h2 id="8-4-存取控制"><a href="#8-4-存取控制" class="headerlink" title="8.4 存取控制"></a>8.4 存取控制</h2><h6 id="用户权限定义和合法的权限检查机制一起组成了DBMS的安全子系统"><a href="#用户权限定义和合法的权限检查机制一起组成了DBMS的安全子系统" class="headerlink" title="用户权限定义和合法的权限检查机制一起组成了DBMS的安全子系统"></a>用户权限定义和合法的权限检查机制一起组成了DBMS的安全子系统</h6><p>常用存取控制方法</p>
<h4 id="自主存取控制"><a href="#自主存取控制" class="headerlink" title="自主存取控制"></a>自主存取控制</h4><p>灵活</p>
<p>同一用户对不同的数据对象有不同的…</p>
<h5 id="授权粒度"><a href="#授权粒度" class="headerlink" title="授权粒度"></a>授权粒度</h5><p>授权的数据对象粒度</p>
<p>数据库,表,属性列,行…</p>
<ol>
<li>实现–GRANT REVOKE</li>
<li>数据库角色<br>在用户量较大的情况下引入<br>定义:一组与数据库操作有关的角色<br>可以为具有相同权限的用户创建一个角色</li>
<li>权限传播<br>…</li>
</ol>
<h4 id="强制存取控制"><a href="#强制存取控制" class="headerlink" title="强制存取控制"></a>强制存取控制</h4><h5 id="主体与客体"><a href="#主体与客体" class="headerlink" title="主体与客体"></a>主体与客体</h5><h5 id="敏感度标记"><a href="#敏感度标记" class="headerlink" title="敏感度标记"></a>敏感度标记</h5><p>DBMS为每个实例指派一个敏感度标记</p>
<p>敏感度分为若干级别(绝密..</p>
<p>主体的敏感度标记称为许可证级别</p>
<p>客体的称为密级</p>
<p>MAC机制就是通过对比主体的Label和客体的Label,最终确定主体是否能够存取客体</p>
<h5 id="强制存取控制规则"><a href="#强制存取控制规则" class="headerlink" title="强制存取控制规则"></a>强制存取控制规则</h5><ol>
<li>读 主体许可证级别&gt;&#x3D;客体密级</li>
<li>写 主体的许可证级别&#x3D;客体密级</li>
<li>修正规则*****<ol>
<li>waiting for write</li>
</ol>
</li>
</ol>
<h4 id="权限-只有具有合法的许可证才能存取"><a href="#权限-只有具有合法的许可证才能存取" class="headerlink" title="权限,只有具有合法的许可证才能存取"></a>权限,只有具有合法的许可证才能存取</h4><p>每一个用户被授予某一个级别的许可证</p>
<p>对于任意一个对象,只有具有合法的许可证才能存取</p>
<h2 id="8-5-视图机制"><a href="#8-5-视图机制" class="headerlink" title="8.5 视图机制"></a>8.5 视图机制</h2>]]></content>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>21/12/6 Database 查询优化</title>
    <url>/2021-12-06-%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96.html</url>
    <content><![CDATA[<h1 id="查询优化"><a href="#查询优化" class="headerlink" title="查询优化"></a>查询优化</h1><h4 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h4><h6 id="目的-解决集合性操作语言与过程性操作语言的不匹配"><a href="#目的-解决集合性操作语言与过程性操作语言的不匹配" class="headerlink" title="目的-解决集合性操作语言与过程性操作语言的不匹配"></a>目的-解决集合性操作语言与过程性操作语言的不匹配</h6><h6 id="原因-sql一条语句一般能产生或处理多条记录-而主语言一次只能存放一条记录"><a href="#原因-sql一条语句一般能产生或处理多条记录-而主语言一次只能存放一条记录" class="headerlink" title="原因:sql一条语句一般能产生或处理多条记录,而主语言一次只能存放一条记录"></a>原因:sql一条语句一般能产生或处理多条记录,而主语言一次只能存放一条记录</h6><h6 id="是什么-是系统为用户开设的一个数据缓冲区-存放sql语句的执行结果"><a href="#是什么-是系统为用户开设的一个数据缓冲区-存放sql语句的执行结果" class="headerlink" title="是什么:是系统为用户开设的一个数据缓冲区,存放sql语句的执行结果"></a>是什么:是系统为用户开设的一个数据缓冲区,存放sql语句的执行结果</h6><p>用户可以用SQL语句逐一地从游标中获取记录,并赋给主变量</p>
<h6 id="定义游标-使用Declare语句"><a href="#定义游标-使用Declare语句" class="headerlink" title="定义游标: 使用Declare语句"></a>定义游标: 使用Declare语句</h6><p>EXEC SQL DECLARE &lt;&gt; CURSOR……</p>
<h6 id="打开游标–执行相应的select语句-吧所有满足查询条件的记录从指定表取到缓冲区中"><a href="#打开游标–执行相应的select语句-吧所有满足查询条件的记录从指定表取到缓冲区中" class="headerlink" title="打开游标–执行相应的select语句,吧所有满足查询条件的记录从指定表取到缓冲区中"></a>打开游标–执行相应的select语句,吧所有满足查询条件的记录从指定表取到缓冲区中</h6><p>EXEC SQL OPEN &lt;游标名&gt;</p>
<p>此时游标指针指向查询结果集中第一条记录之前</p>
<h6 id="推动游标"><a href="#推动游标" class="headerlink" title="推动游标"></a>推动游标</h6><p>使用FETCH语句</p>
<p>EXEC SQL FETCH [[NEXT]]….</p>
<p>指定方向推动游标指针,然后将缓冲区中的当前记录取出来送至主变量供主语言进一步处理</p>
<p>要求:主变量与select语句中的目标列表达式具有一一对应关系</p>
<h6 id="关闭游标"><a href="#关闭游标" class="headerlink" title="关闭游标"></a>关闭游标</h6><p>CLOSE语句</p>
<p>EXEC SQL CLOSE &lt;游标名&gt;</p>
<h2 id="7-1查询处理过程"><a href="#7-1查询处理过程" class="headerlink" title="7.1查询处理过程"></a>7.1查询处理过程</h2><h3 id="7-1-1-查询分析"><a href="#7-1-1-查询分析" class="headerlink" title="7.1.1 查询分析"></a>7.1.1 查询分析</h3><p>对查询语句进行扫描,词法分析和语法分析</p>
<h3 id="7-1-2查询检查"><a href="#7-1-2查询检查" class="headerlink" title="7.1.2查询检查"></a>7.1.2查询检查</h3><p>根据数据字典中的用户权限和完整性约束定义对用户的存取权限进行检查</p>
<p>检查通过后将SQL查询语句转换成等价的<code>&lt;u&gt;</code>关系代数表达式<code>&lt;/u&gt;</code></p>
<h3 id="7-1-4查询优化"><a href="#7-1-4查询优化" class="headerlink" title="7.1.4查询优化"></a>7.1.4查询优化</h3><p>选择一个高效执行的查询处理策略</p>
<h4 id="代数优化-关系代数表达式优化"><a href="#代数优化-关系代数表达式优化" class="headerlink" title="代数优化-关系代数表达式优化"></a>代数优化-关系代数表达式优化</h4><h4 id="物理优化-存取物理介质及…的优化"><a href="#物理优化-存取物理介质及…的优化" class="headerlink" title="物理优化-存取物理介质及…的优化"></a>物理优化-存取物理介质及…的优化</h4><h3 id="7-1-5查询执行"><a href="#7-1-5查询执行" class="headerlink" title="7.1.5查询执行"></a>7.1.5查询执行</h3><p>不用多言</p>
<h2 id="7-2执行查询操作的基本算法"><a href="#7-2执行查询操作的基本算法" class="headerlink" title="7.2执行查询操作的基本算法"></a>7.2执行查询操作的基本算法</h2><h3 id="1-选择操作"><a href="#1-选择操作" class="headerlink" title="1. 选择操作"></a>1. 选择操作</h3><p>顺序扫描&#x2F;二分查找&#x2F;索引[散列]&#x2F;复合选择</p>
<p>索引–提供元组指针,间接检索</p>
<p>B+树索引:同样是提供元组指针,同时支持顺序集中依次查找</p>
<p>如是 sdept&#x3D;’cs’ and sae&gt;20:则</p>
<p>算法一:分别查询,求交集</p>
<p>算法而:先找到第一个查询的指针,然后在第一个查询的指针基础上进行第二个查询</p>
<h3 id="2-连接操作"><a href="#2-连接操作" class="headerlink" title="2.连接操作"></a>2.连接操作</h3><h6 id="连接操作是查询处理中最耗时的操作之一"><a href="#连接操作是查询处理中最耗时的操作之一" class="headerlink" title="连接操作是查询处理中最耗时的操作之一"></a>连接操作是查询处理中最耗时的操作之一</h6><p>[例2]</p>
<p>SELECT *</p>
<p>FROM Student,SC</p>
<p>WHERE Student.Sno&#x3D;SC.Sno</p>
<p>[例2end]</p>
<ol>
<li>嵌套循环法<br>对外层循环的每一个元组,检测内层循环中的每一个元组,检查两个元组在连接属性上是否相等<br>满足,即串接后作为结果输出</li>
<li>索引链接法<br>在输出表上建立属性Sno的索引(如果原来没有)<br>对student中每个元组,有Sno值通过Sc……..</li>
<li>排序合并法<br>适合连接的诸表已经排好序的情况<br>没排序则排序<br>取Student表中第一个sno,然后依次找sc表中具有相同sno的元组<br>扫到sno不相同的第一个sc元组时,返回Student扫描它的下一个元组<br>之后循环</li>
<li>散列连接法<br>把连接属性作为散列码,<br>然后划分</li>
</ol>
<h3 id="3-投影操作"><a href="#3-投影操作" class="headerlink" title="3.投影操作"></a>3.投影操作</h3><h6 id="选取关系的某些列-从垂直的方向减小关系的大小"><a href="#选取关系的某些列-从垂直的方向减小关系的大小" class="headerlink" title="选取关系的某些列,从垂直的方向减小关系的大小"></a>选取关系的某些列,从垂直的方向减小关系的大小</h6><p>如果投影属性列包括了关系R的主键,则操作可言直接执行,操作结果将于R中元组个数相同</p>
<p>否则则需要消除重复元组</p>
<h3 id="4-集合运算操作"><a href="#4-集合运算操作" class="headerlink" title="4.集合运算操作"></a>4.集合运算操作</h3><p>并,查,交,笛卡尔积</p>
<p>并查缴类似排序合并法</p>
<p>笛卡尔积一般嵌套循环合并</p>
<h2 id="7-3关系数据库系统的查询优化"><a href="#7-3关系数据库系统的查询优化" class="headerlink" title="7.3关系数据库系统的查询优化"></a>7.3关系数据库系统的查询优化</h2><p>分布式数据库:总代接&#x3D;I&#x2F;O代价+*****</p>
<h4 id="7-3-2查询优化实例"><a href="#7-3-2查询优化实例" class="headerlink" title="7.3.2查询优化实例"></a>7.3.2查询优化实例</h4><p>假定学生-课程数据库中有1000个学生记录,10000个选课记录</p>
<p>其中选修二号课程的选课记录为50个</p>
<p>查询选修了2号课程的学生姓名</p>
<h5 id="第一种情况"><a href="#第一种情况" class="headerlink" title="第一种情况"></a>第一种情况</h5><h6 id="1-计算广义笛卡尔积"><a href="#1-计算广义笛卡尔积" class="headerlink" title="1.计算广义笛卡尔积"></a>1.计算广义笛卡尔积</h6><p>-把student和sc的每个元组连接起来的做法</p>
<h6 id="2-做选择操作"><a href="#2-做选择操作" class="headerlink" title="2.做选择操作"></a>2.做选择操作</h6><p>依次读入连接后的元组,按照选择条件选取满足要求的记录</p>
<h6 id="3-做投影操作"><a href="#3-做投影操作" class="headerlink" title="3.做投影操作"></a>3.做投影操作</h6><p>把第二步操作的结果在Sname上作投影输出,得到最终输出</p>
<h5 id="第二种情况"><a href="#第二种情况" class="headerlink" title="第二种情况"></a>第二种情况</h5><h6 id="1-计算自然连接"><a href="#1-计算自然连接" class="headerlink" title="1.计算自然连接"></a>1.计算自然连接</h6><h6 id="2-读取中间文件块-进行选择操作"><a href="#2-读取中间文件块-进行选择操作" class="headerlink" title="2.读取中间文件块,进行选择操作"></a>2.读取中间文件块,进行选择操作</h6><h6 id="3-投影输出"><a href="#3-投影输出" class="headerlink" title="3.投影输出"></a>3.投影输出</h6><h5 id="第三种情况"><a href="#第三种情况" class="headerlink" title="第三种情况"></a>第三种情况</h5><h6 id="1-先对sc表进行选择运算"><a href="#1-先对sc表进行选择运算" class="headerlink" title="1.先对sc表进行选择运算"></a>1.先对sc表进行选择运算</h6><h6 id="2-读取Student表-把读入的student元组和内存中收到sc元组做连接"><a href="#2-读取Student表-把读入的student元组和内存中收到sc元组做连接" class="headerlink" title="2.读取Student表,把读入的student元组和内存中收到sc元组做连接"></a>2.读取Student表,把读入的student元组和内存中收到sc元组做连接</h6><h6 id="3-把连接结果投影输出"><a href="#3-把连接结果投影输出" class="headerlink" title="3.把连接结果投影输出"></a>3.把连接结果投影输出</h6><p>假如SC表的Cno字段&#x2F;Student表上的Sno有索引,可加快读取</p>
<h4 id="有选择和连接操作时-先做选择操作–代数优化"><a href="#有选择和连接操作时-先做选择操作–代数优化" class="headerlink" title="有选择和连接操作时,先做选择操作–代数优化"></a>有选择和连接操作时,先做选择操作–代数优化</h4><h4 id="选择操作算法有权标扫描和索引扫描两种-在第三种情况下-索引扫描效果好–物理优化"><a href="#选择操作算法有权标扫描和索引扫描两种-在第三种情况下-索引扫描效果好–物理优化" class="headerlink" title="选择操作算法有权标扫描和索引扫描两种,在第三种情况下,索引扫描效果好–物理优化"></a>选择操作算法有权标扫描和索引扫描两种,在第三种情况下,索引扫描效果好–物理优化</h4><h3 id="7-3-3-代数优化"><a href="#7-3-3-代数优化" class="headerlink" title="7.3.3 代数优化"></a>7.3.3 代数优化</h3><h4 id="关系代数表达式的等价变换规则"><a href="#关系代数表达式的等价变换规则" class="headerlink" title="关系代数表达式的等价变换规则"></a>关系代数表达式的等价变换规则</h4><p>指用相同的关系代替两个表达式中相应的关系所得到的结果是相同的</p>
<h5 id="常用的等价变换规则"><a href="#常用的等价变换规则" class="headerlink" title="常用的等价变换规则"></a>常用的等价变换规则</h5><h4 id="代数优化策略-通过对关系代数表达式的等价变化来提高查询效率"><a href="#代数优化策略-通过对关系代数表达式的等价变化来提高查询效率" class="headerlink" title="代数优化策略-通过对关系代数表达式的等价变化来提高查询效率"></a>代数优化策略-通过对关系代数表达式的等价变化来提高查询效率</h4><h5 id="启发式规则"><a href="#启发式规则" class="headerlink" title="启发式规则"></a>启发式规则</h5><ol>
<li><strong>选择运算尽可能先做,最重要最基本的一条</strong></li>
<li>把投影运算和选择运算同时进行</li>
<li>把投影同其前后的双目运算结合起来</li>
<li>把某些选择同在它前面要执行的笛卡尔积结合起来形成一个连接运算’</li>
<li>找出公共子表达式</li>
</ol>
<h4 id="代数优化算法"><a href="#代数优化算法" class="headerlink" title="代数优化算法"></a>代数优化算法</h4><p>输入:一个查询树</p>
<p>输出:优化的查询树</p>
<h5 id="物理优化"><a href="#物理优化" class="headerlink" title="物理优化"></a>物理优化</h5><p>代数优化改变查询语句中操作的次序和组合,不涉及底层的存取路径</p>
<p>定义:选择高效合理的操作算法&#x2F;存取路径</p>
<h6 id="基于存取路径的优化"><a href="#基于存取路径的优化" class="headerlink" title="基于存取路径的优化"></a>基于存取路径的优化</h6><p>选择操作的启发式规则–</p>
<ol>
<li><p>对于小关系,使用全表顺序扫描,即使有索引</p>
</li>
<li><p>对于大关系–</p>
<ol>
<li>对于选择条件是主键&#x3D;值的查询<br>选择主键索引</li>
<li>对于选择条件是非主属性&#x3D;值的查询,且选择列上有索引<br>估算查询结果的元组书目–比例小(10%),索引,比例大-全表</li>
<li>选择条件是属性上的非等值查询或范围查询,且存在索引<br>估算查询结果的元组书目–比例小(10%),索引,比例大-全表</li>
<li>对于用and连接的合取选择条件<br>优先采用组合索引扫描….</li>
<li>or连接<br>一般全表</li>
</ol>
</li>
</ol>
<p>连接操作的启发式规则</p>
<ol>
<li>两个比哦啊都已经按照连接属性排序<br>排序合并法</li>
<li>一个表在连接属性上有索引<br>索引连接法</li>
<li>都不是1,2,而其中一个表比较小<br>散列连接法</li>
<li>可以选用嵌套循环阀,并选择较小的表作为外表</li>
</ol>
<h6 id="基于代价估算的优化"><a href="#基于代价估算的优化" class="headerlink" title="基于代价估算的优化"></a>基于代价估算的优化</h6><h6 id="二者结合的优化"><a href="#二者结合的优化" class="headerlink" title="二者结合的优化"></a>二者结合的优化</h6>]]></content>
      <tags>
        <tag>class3</tag>
      </tags>
  </entry>
  <entry>
    <title>21/12/7 存储管理-操作系统</title>
    <url>/2021-12-07-%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86.html</url>
    <content><![CDATA[<h1 id="存储管理"><a href="#存储管理" class="headerlink" title="存储管理"></a>存储管理</h1><h4 id="地址访问保护机制"><a href="#地址访问保护机制" class="headerlink" title="地址访问保护机制"></a>地址访问保护机制</h4><ol>
<li><h5 id="上下界寄存器和地址检查机制"><a href="#上下界寄存器和地址检查机制" class="headerlink" title="上下界寄存器和地址检查机制"></a>上下界寄存器和地址检查机制</h5></li>
</ol>
<p>​		作业拥有上下界,执行访存指令时,判断是否越界</p>
<p>​		要求:作业程序是<strong>绝对地址</strong>或<strong>静态可浮动</strong></p>
<h5 id="2-基址寄存器、长度寄存器和动态地址转换机制"><a href="#2-基址寄存器、长度寄存器和动态地址转换机制" class="headerlink" title="2. 基址寄存器、长度寄存器和动态地址转换机制"></a>2. 基址寄存器、长度寄存器和动态地址转换机制</h5><p>​		<strong>当作业被调度运行时，将作业所占内存基址及长度送基址、长度寄存器，在用户态每次执行访存指令时，先看访问地址是否小于长度，然后+基址进行访存。用户程序代码是</strong>动态浮动的</p>
<h2 id="可变分区"><a href="#可变分区" class="headerlink" title="可变分区"></a>可变分区</h2><h6 id="思想-预先不划分内存，当作业需要时向系统申请，系统从其中挖出一块给该作业"><a href="#思想-预先不划分内存，当作业需要时向系统申请，系统从其中挖出一块给该作业" class="headerlink" title="思想:预先不划分内存，当作业需要时向系统申请，系统从其中挖出一块给该作业"></a>思想:<strong>预先不划分内存，当作业需要时向系统申请，系统从其中挖出一块给该作业</strong></h6><p>Q:<u>空闲区域如何管理</u>?</p>
<h3 id="多道连续可变分区法"><a href="#多道连续可变分区法" class="headerlink" title="多道连续可变分区法"></a><strong>多道连续可变分区法</strong></h3><h5 id="特点-多道-连续-不固定划分内存"><a href="#特点-多道-连续-不固定划分内存" class="headerlink" title="特点:多道,连续,不固定划分内存"></a>特点:多道,连续,不固定划分内存</h5><h5 id="管理方法"><a href="#管理方法" class="headerlink" title="管理方法"></a>管理方法</h5><p><strong>系统设置一个空闲块队列，初始状态时队列中只有一个连续的空闲块。作业到达后，以</strong>某种策略分配空间。作业撤离时，将释放的空间加入空闲队列。</p>
<h5 id="释放方法"><a href="#释放方法" class="headerlink" title="释放方法"></a>释放方法</h5><p>相邻合并,否则插入</p>
<h5 id="例一"><a href="#例一" class="headerlink" title="例一"></a>例一</h5><p>进入执行顺序:(1,2,3)-&gt;(4)-&gt;(5)</p>
<p><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211112134311512.png" alt="image-20211112134311512"></p>
<h4 id="分配方法"><a href="#分配方法" class="headerlink" title="分配方法"></a>分配方法</h4><ol>
<li>首次满足法 从头到尾找,找到的第一个满足它的空间就给它</li>
<li>最佳满足法 从队列中找一个最接近的空闲队列给它</li>
<li>最大满足法 每次找最大的空间给最新创建的进程</li>
</ol>
<h4 id="可用空间管理"><a href="#可用空间管理" class="headerlink" title="可用空间管理"></a>可用空间管理</h4><h5 id="紧致机制–将已有的进程挪到一起-腾出大块的连续空间"><a href="#紧致机制–将已有的进程挪到一起-腾出大块的连续空间" class="headerlink" title="紧致机制–将已有的进程挪到一起,腾出大块的连续空间"></a>紧致机制–将已有的进程挪到一起,腾出大块的连续空间</h5><h5 id="可再定位式分区–浮动分区分配"><a href="#可再定位式分区–浮动分区分配" class="headerlink" title="可再定位式分区–浮动分区分配"></a>可再定位式分区–浮动分区分配</h5><h2 id="页式存储管理"><a href="#页式存储管理" class="headerlink" title="页式存储管理"></a>页式存储管理</h2><h6 id="解决作业不连续存放的问题"><a href="#解决作业不连续存放的问题" class="headerlink" title="解决作业不连续存放的问题"></a>解决作业不连续存放的问题</h6><p><strong>特点：</strong> <strong>作业</strong> <strong>(进程)</strong> <strong>分成页面，内存也划分成页面，将作业</strong> **(进程 **) <strong>页面不连续地分布到内存页面</strong></p>
<p><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211112140406228.png" alt="image-20211112140406228"></p>
<h5 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h5><p><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211112140441074.png" alt="image-20211112140441074"></p>
<p><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211112141149243.png" alt="image-20211112141149243"></p>
<p><strong>分页逻辑地址</strong> <strong>&#x3D; P(页号).d(</strong>  <strong>页内位移</strong> ** ) ** </p>
<p> <strong>分页物理地址</strong> <strong>&#x3D; f(<strong><strong>页帧号</strong></strong>).d(<strong><strong>同上</strong></strong>)</strong></p>
<p> <strong>P &#x3D;</strong> <strong>线性逻辑地址</strong> <strong>&#x2F;</strong> <strong>页面大小；</strong></p>
<p> <strong>d &#x3D;</strong> <strong>线性逻辑地址</strong> **- P***<strong>页面大小。</strong></p>
<h6 id="为什么是2的k次幂"><a href="#为什么是2的k次幂" class="headerlink" title="为什么是2的k次幂?"></a>为什么是2的k次幂?</h6><p>将乘除法转成移位运算</p>
<p><strong>为了取出一个数据，系统需要访问内存几次？</strong>–两次:1.取页表,2.取数据</p>
<h3 id="快表"><a href="#快表" class="headerlink" title="快表"></a>快表</h3><p>由一组联想寄存器(TLB, Translation Lookaside Buffer)组成。</p>
<p><strong>联想寄存器：一种按内容进行并行查找的快速寄存器，访问速度比主存快得多</strong></p>
<p><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211112142834494.png" alt="image-20211112142834494"></p>
<h6 id="使用bitmap数组-x2F-空闲页帧链管理可用页帧"><a href="#使用bitmap数组-x2F-空闲页帧链管理可用页帧" class="headerlink" title="使用bitmap数组&#x2F;空闲页帧链管理可用页帧"></a>使用bitmap数组&#x2F;空闲页帧链管理可用页帧</h6><h5 id="共享"><a href="#共享" class="headerlink" title="共享"></a>共享</h5><p><strong>通过页表可以使几个逻辑空间指向同一个物理空间，实现程序共享。</strong></p>
<h5 id="越界保护"><a href="#越界保护" class="headerlink" title="越界保护"></a>越界保护</h5><p>设置页表长度寄存器,查页表前,检查页号是否越界</p>
<h5 id="访问保护"><a href="#访问保护" class="headerlink" title="访问保护"></a>访问保护</h5><p><strong>在每个页表项中增设一存储保护域，用于说明对该页的访问权限，每一个对该页存储的访问都首先要比照是否满足该页访问权限的说明，满足则访问，否则报异常。</strong></p>
<h3 id="O优点"><a href="#O优点" class="headerlink" title="Ø优点"></a>Ø<strong>优点</strong></h3><p>ü<strong>没有外碎片，每个内碎片不超过页大小。</strong></p>
<p>ü<strong>程序不必连续存放。</strong></p>
<h3 id="O主要缺点："><a href="#O主要缺点：" class="headerlink" title="Ø主要缺点："></a>Ø<strong>主要缺点：</strong></h3><p>ü<strong>程序要一次全部装入内存才能执行。</strong></p>
<p>ü<strong>采用动态地址变换机构会增加计算机的成本和降低处理机的速度。</strong></p>
<p>ü<strong>各种数据结构</strong>(页表，空闲页表)要占用一定的内存空间，而且系统要花费一定的时间来建立和管理这些表格。</p>
<p>ü<strong>依然存在内碎片。</strong></p>
<h2 id="段式存储管理"><a href="#段式存储管理" class="headerlink" title="段式存储管理"></a>段式存储管理</h2><h4 id="特点-按作业的自然段将其逻辑空间分成若干段，作业以段为单位分配内存。"><a href="#特点-按作业的自然段将其逻辑空间分成若干段，作业以段为单位分配内存。" class="headerlink" title="特点:按作业的自然段将其逻辑空间分成若干段，作业以段为单位分配内存。"></a>特点:<strong>按作业的自然段将其逻辑空间分成若干段，作业以段为单位分配内存。</strong></h4><p>Ø<strong>用户作业逻辑空间为二维空间，由若干自然段组成。</strong></p>
<p>Ø 逻辑地址：段号段内偏移，记作S,d。编译及装配时把所有地址记成(S,d)的形式。</p>
<p>Ø <strong>物理内存空间管理：与多道可变划分法一样，系统以段为单位分配物理内存。</strong></p>
<p><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211112144254340.png" alt="image-20211112144254340"></p>
<p><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211112144844677.png" alt="image-20211112144844677"></p>
<h3 id="段页式管理"><a href="#段页式管理" class="headerlink" title="段页式管理"></a>段页式管理</h3><p>特点：<strong>将作业分成若干段，每段用页式管理实现内存分配</strong></p>
<p><strong>为了获得一条指令或者数据，需要访问内存几次？</strong>–3次,段表,页表,数据</p>
<h2 id="内存扩充技术"><a href="#内存扩充技术" class="headerlink" title="内存扩充技术"></a>内存扩充技术</h2><h6 id="借助大容量的辅存实现内存的扩充"><a href="#借助大容量的辅存实现内存的扩充" class="headerlink" title="借助大容量的辅存实现内存的扩充"></a>借助大容量的辅存实现内存的扩充</h6><h3 id="覆盖技术"><a href="#覆盖技术" class="headerlink" title="覆盖技术"></a>覆盖技术</h3><p><strong>将用户空间划分成一个固定区和多个覆盖区。主程序放固定区，依次调用的子程序则放在同一个覆盖区。****操作系统提供覆盖系统调用函数，由用户编程序显式调用</strong></p>
<p>相当于时间换空间</p>
<h3 id="交换技术"><a href="#交换技术" class="headerlink" title="交换技术"></a>交换技术</h3><p>将处于等待状态(等I&#x2F;O结束)或就绪(等CPU)状态的作业从主存换出到辅存，把将要执行的进程移入主存。</p>
<p>优点:</p>
<p>提高并发性</p>
<p>缺点:</p>
<p>换入换出增加处理机开销</p>
<p>程序换入时存在重定位问题</p>
<h6 id="和覆盖技术对比"><a href="#和覆盖技术对比" class="headerlink" title="和覆盖技术对比"></a>和覆盖技术对比</h6><p><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211116081410386.png" alt="image-20211116081410386"></p>
<h3 id="虚拟存储技术"><a href="#虚拟存储技术" class="headerlink" title="虚拟存储技术"></a>虚拟存储技术</h3><h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><p>程序中不是每一条指令都会在程序的一次运行过程中执行到。<br>    错误处理子程序<br>    条件语句(if…else…)<br>程序中有的指令可能只执行一次<br>    程序的初始化部分<br>程序执行的局部性原理：在一段时间内，作业一般不会执行到所有程序的指令，也不会存取绝大部分数据，执行的代码和要存取的数据往往集中在某些区域中(例如一个循环、一个数组)。</p>
<h5 id="目的：提供用户进程一个巨大的虚拟存储空间"><a href="#目的：提供用户进程一个巨大的虚拟存储空间" class="headerlink" title="目的：提供用户进程一个巨大的虚拟存储空间"></a>目的：提供用户进程一个巨大的虚拟存储空间</h5><h5 id="手段：利用外存-磁盘-实现此虚空间。"><a href="#手段：利用外存-磁盘-实现此虚空间。" class="headerlink" title="手段：利用外存(磁盘)实现此虚空间。"></a>手段：利用外存(磁盘)实现此虚空间。</h5><h4 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a><strong>基本思想</strong></h4><p>系统为进程提供一个比物理内存大得多的虚拟存储空间，虚拟空间大小不受物理内存大小的限制。</p>
<p>虚拟空间的容量由系统的有效地址长度决定。假设地址长度为32，按字节寻址，则虚拟存储空间大小为$2^{32}$个字节。</p>
<h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a><strong>原理</strong></h4><p>在程序装入时，不必一次将其全部读入到内存，而只需将<strong>当前需要执行的某些区域</strong>读入到内存，然后程序开始执行。在程序执行过程中，如果<strong>需执行的指令或访问的数据尚未在内存</strong>，则由处理器<strong>通知操作系统将相应的区域调入内存</strong>，然后继续执行。</p>
<h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><h5 id="虚拟页式"><a href="#虚拟页式" class="headerlink" title="虚拟页式"></a>虚拟页式</h5><h6 id="页表增加外存标识位和外存地址项"><a href="#页表增加外存标识位和外存地址项" class="headerlink" title="页表增加外存标识位和外存地址项"></a>页表增加外存标识位和外存地址项</h6><p><strong>当内存中没有空闲页面时，如果还要调入一个新页，如何处理？</strong></p>
<p>​	淘汰掉一个内存中的页(淘汰策略)</p>
<h6 id="交换区"><a href="#交换区" class="headerlink" title="交换区"></a>交换区</h6><p>用来回写<strong>数据初始值和初值为0的工作区</strong></p>
<p><strong>页表项结构</strong></p>
<p><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211116083233571.png" alt="image-20211116083233571"></p>
<p>合法位：置上表示该页在内存。<br>修改位：置上表示该页被修改过，在释放或淘汰时应写<br>               回外存。<br>页类型：零页时：表示该页在分配物理页帧时应清0页帧<br>               空间;回写swap区页时:表示回写swap区。<br>保护码：R、W、E保护说明。<br>外存块号：该页所在外存的块号。<br>页 帧 号：当合法位置上时代表该页所在内存的页帧号。</p>
<h6 id="缺页处理"><a href="#缺页处理" class="headerlink" title="缺页处理"></a>缺页处理</h6><p>根据发生页故障的虚地址得到页表项；<br>申请一个可用的页帧(根据所采用的替换策略可能需要引起淘汰某一页);<br>检查页类型，若为零页，则将页帧清0，将页帧号填入页表项的页帧号一栏，置合法位为1。若非零页，则调用I&#x2F;O子系统将外存块号所指的数据读到可用页帧，将页帧号填入页表项中，合法位置1，结束。</p>
<h6 id="页淘汰"><a href="#页淘汰" class="headerlink" title="页淘汰"></a>页淘汰</h6><p>查P页表项的修改位，若未修改，则清0合法位，将页帧送回空闲页帧队列。<br>若已修改，则检查类型栏。<br>若是零页或回写swap区页（代表还没有分配交换区空间），则申请一块swap区空间，将P的外存块号置上并清除页类型。<br>调用I&#x2F;0子系统将页帧上的数据写到外存块号所指的外存空间。清0合法位，将页帧送回空闲页帧队列。</p>
<h3 id="页面置换策略"><a href="#页面置换策略" class="headerlink" title="页面置换策略"></a>页面置换策略</h3><h6 id="出发点：-把未来不再使用的或者短时期内较少使用的页面调出"><a href="#出发点：-把未来不再使用的或者短时期内较少使用的页面调出" class="headerlink" title="出发点： 把未来不再使用的或者短时期内较少使用的页面调出"></a>出发点： 把未来不再使用的或者短时期内较少使用的页面调出</h6><p>基本概念</p>
<h6 id="驻留集：进程的合法页集合"><a href="#驻留集：进程的合法页集合" class="headerlink" title="驻留集：进程的合法页集合"></a>驻留集：进程的合法页集合</h6><h6 id="访问串：进程访问虚拟空间的地址踪迹"><a href="#访问串：进程访问虚拟空间的地址踪迹" class="headerlink" title="访问串：进程访问虚拟空间的地址踪迹"></a>访问串：进程访问虚拟空间的地址踪迹</h6><p>  举例：某进程依次访问如下地址，0100，0432，0101，0612，0102，0103，…<br>  页式虚存管理以页为基本单位，只需页号即可。设页面大小为100，上述访问串可简化为1，4，1，6，1，1，…</p>
<h4 id="驻留集大小固定的局部置换策略"><a href="#驻留集大小固定的局部置换策略" class="headerlink" title="驻留集大小固定的局部置换策略"></a>驻留集大小固定的局部置换策略</h4><h5 id="FIFO（先进先出）"><a href="#FIFO（先进先出）" class="headerlink" title="FIFO（先进先出）"></a>FIFO（先进先出）</h5><p>替换最早进入的页</p>
<p>效果奇差</p>
<p>有<strong>Belady奇异</strong> <strong>指置换策略不满足随着驻留集的增大，页故障数一定减少的规律。</strong></p>
<h5 id="OPT（最佳算法）"><a href="#OPT（最佳算法）" class="headerlink" title="OPT（最佳算法）"></a>OPT（最佳算法）</h5><p>需要预先知道整个访问串的序列（因此不可实现）</p>
<p>理论最优</p>
<h5 id="LRU（最近最少使用）"><a href="#LRU（最近最少使用）" class="headerlink" title="LRU（最近最少使用）"></a>LRU（最近最少使用）</h5><p><strong>淘汰上次使用距当前最远的页</strong></p>
<p>栈算法</p>
<p>LRU策略中，当驻留集大小为m时，S（m，t）中保持着最近使用过的m个页帧；当驻留集大小为m+1时，S（m+1，t）中保持着最近使用过的m+1个页帧。故S（m，t）属于 S（m+1，t），LRU策略是栈算法。</p>
<h5 id="CLOCK"><a href="#CLOCK" class="headerlink" title="CLOCK"></a>CLOCK</h5><p>基于LRU的思想<br>硬件在页面被访问时设置页表项中的访问位<br>随着表针的移动，淘汰访问位是0的页面，或清除页面的访问位。<br>实用的页面置换算法</p>
<h5 id="NRU-最近未使用"><a href="#NRU-最近未使用" class="headerlink" title="NRU(最近未使用)"></a>NRU(最近未使用)</h5><p>为页帧在页表项中增加一位使用位，硬件每访存一次即将对应页的使用位置1，操作系统页面管理程序定时将所有使用位清0。淘汰时任选一个使用位为0(表示OS清0周期内没被使用过）的页。<br>   操作系统选择淘汰页时，尽量避免选被修改过的页。因此，选择淘汰页次序：</p>
<h4 id="驻留集大小可变的全局置换策略"><a href="#驻留集大小可变的全局置换策略" class="headerlink" title="驻留集大小可变的全局置换策略"></a>驻留集大小可变的全局置换策略</h4><h5 id="WS"><a href="#WS" class="headerlink" title="WS"></a>WS</h5><p>若驻留集中某页有$\triangle$个访问间隔没被访问则将其淘汰(正是因为这个特性,才是动态的)</p>
<h6 id="实现"><a href="#实现" class="headerlink" title="实现:"></a>实现:</h6><p>每一页面设一计数器,每访存一次,将所有其他页计数器+1,所访存的计数器清零,淘汰计数器等于$\triangle$的页面</p>
<h5 id="实际上-开销太大-没有用"><a href="#实际上-开销太大-没有用" class="headerlink" title="实际上:开销太大,没有用"></a>实际上:开销太大,没有用</h5><h5 id="SWS"><a href="#SWS" class="headerlink" title="SWS"></a>SWS</h5><p>定时检查计时器,淘汰计时器值大于等于$\triangle$的页面(当前时钟值-页表时钟值)&gt;$\triangle$的页面)</p>
<h5 id="硬件消耗还是很大"><a href="#硬件消耗还是很大" class="headerlink" title="硬件消耗还是很大"></a>硬件消耗还是很大</h5><h3 id="置换策略选择"><a href="#置换策略选择" class="headerlink" title="置换策略选择"></a>置换策略选择</h3><p>动态驻留集sws+淘汰页数据延迟清除</p>
<p> 设立两个队列：自由链表和修改链表。<br> 定时做页淘汰（SWS）：淘汰时不立即抹去页中数据，根据页面修改否挂入自由链&#x2F;修改链，修改链过长或自由链过短时，回写页面后改挂到自由链中。<br> 若paging in要用空页时,选自由链的第一页帧，这时页中数据被覆盖。<br> 若在自由链&#x2F;修改链中的页面再次被访问时，则将该页从链中摘除,使该页又能通过页表项访问到。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> 某计算机采用二级页表的分页存储管理方式，按字节编址，页大小为2^10 字节，页表项大小为2字节，逻辑地址结构为：</span><br><span class="line"></span><br><span class="line">逻辑地址空间大小为2^16页，则表示整个逻辑地址空间的页目录表中包含表项的个数至少是： ?</span><br></pre></td></tr></table></figure>

<p><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211119140231647.png" alt="image-20211119140231647"></p>
<p>逻辑空间: 2^16 *2^10 &#x3D;2^26 </p>
<p>页大小为2^10 页表项大小为2,则一页能写2^9 个页表项</p>
<p>共2^16逻辑页,故需要 2^7页</p>
]]></content>
      <categories>
        <category>大三</category>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统,计算机</tag>
      </tags>
  </entry>
  <entry>
    <title>21/12/6 Database 数据库操作</title>
    <url>/2021-12-06-%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C.html</url>
    <content><![CDATA[<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>select</p>
<p>from</p>
<p>where</p>
<p>group by</p>
<p>having</p>
<p>order by</p>
<h5 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h5><p>指定属性列–不包含的取空</p>
<p>不指定-不能省略任何属性</p>
]]></content>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>21/12/7 设备管理</title>
    <url>/2021-12-07-%E8%AE%BE%E5%A4%87%E7%AE%A1%E7%90%86.html</url>
    <content><![CDATA[<h1 id="设备管理"><a href="#设备管理" class="headerlink" title="设备管理"></a>设备管理</h1><h2 id="1-控制器"><a href="#1-控制器" class="headerlink" title="1. 控制器"></a>1. 控制器</h2><h6 id="控制器的任务是在外设与内存之间完成比特流与字节块之间的转换"><a href="#控制器的任务是在外设与内存之间完成比特流与字节块之间的转换" class="headerlink" title="控制器的任务是在外设与内存之间完成比特流与字节块之间的转换"></a>控制器的任务是在外设与内存之间完成比特流与字节块之间的转换</h6><h3 id="1-1寄存器"><a href="#1-1寄存器" class="headerlink" title="1.1寄存器"></a>1.1寄存器</h3><p>每个控制器有几个寄存器,操作系统可以往里写东西</p>
<h3 id="1-2数据缓冲区"><a href="#1-2数据缓冲区" class="headerlink" title="1.2数据缓冲区"></a>1.2数据缓冲区</h3><p>有些控制器上有,用于大数据传输</p>
<h4 id="1-2-1磁盘控制器"><a href="#1-2-1磁盘控制器" class="headerlink" title="1.2.1磁盘控制器"></a>1.2.1磁盘控制器</h4><p>将位流组装为字节存入缓冲区中,形成字节为单位的块</p>
<h2 id="2-控制方式"><a href="#2-控制方式" class="headerlink" title="2.控制方式"></a>2.控制方式</h2><h4 id="2-1-程序直接控制"><a href="#2-1-程序直接控制" class="headerlink" title="2.1 程序直接控制"></a>2.1 程序直接控制</h4><p>cpu控制全过程</p>
<p>效率低下(CPU一直在等)</p>
<h4 id="2-2中断控制"><a href="#2-2中断控制" class="headerlink" title="2.2中断控制"></a>2.2中断控制</h4><p>cpu发送指令,去干别的,等io设备准备好,利用中断通知cpu</p>
<h4 id="2-3-DMA方式-适合高速大量的外设"><a href="#2-3-DMA方式-适合高速大量的外设" class="headerlink" title="2.3 DMA方式(适合高速大量的外设)"></a>2.3 DMA方式(适合高速大量的外设)</h4><p>cpu启动指令-&gt;DMA控制器-&gt;(data)-&gt;启动外设</p>
<p>整个数据的传输都是在DMA控制下进行的</p>
<h4 id="2-4通道控制方式"><a href="#2-4通道控制方式" class="headerlink" title="2.4通道控制方式"></a>2.4通道控制方式</h4><p>cpu连接多个通道,通道连接多个控制器,再连接外部设备</p>
<p>imgtest</p>
<h2 id="3-设备I-x2F-o子系统"><a href="#3-设备I-x2F-o子系统" class="headerlink" title="3.设备I&#x2F;o子系统"></a>3.设备I&#x2F;o子系统</h2><p>申请设备</p>
<p>将数据写入设备</p>
<p>从设备读取数据</p>
<p>释放设备</p>
<h4 id="分时式共享使用设备"><a href="#分时式共享使用设备" class="headerlink" title="分时式共享使用设备"></a>分时式共享使用设备</h4><p>以一次IO为单位分时使用设备</p>
<h4 id="SPOOLING方式使用外设"><a href="#SPOOLING方式使用外设" class="headerlink" title="SPOOLING方式使用外设"></a>SPOOLING方式使用外设</h4><p>利用磁盘上的输入输出并模拟高速外设</p>
<h3 id="IO的组成"><a href="#IO的组成" class="headerlink" title="IO的组成"></a>IO的组成</h3><p>I.O交通管制程序</p>
<p>调度程序</p>
<p>设备处理程序</p>
<h6 id="基本思想-分层构建-较低层为较高层服务-使较高层独立于硬件-为用户提供统一接口"><a href="#基本思想-分层构建-较低层为较高层服务-使较高层独立于硬件-为用户提供统一接口" class="headerlink" title="基本思想:分层构建,较低层为较高层服务,使较高层独立于硬件,为用户提供统一接口"></a>基本思想:分层构建,较低层为较高层服务,使较高层独立于硬件,为用户提供统一接口</h6><h4 id="I-x2F-O设计目标"><a href="#I-x2F-O设计目标" class="headerlink" title="I&#x2F;O设计目标"></a>I&#x2F;O设计目标</h4><blockquote>
<p><strong>设备独立性</strong>–使软硬件相对独立,给上层软件更好的可移植性</p>
<p><strong>设备统一命名</strong>-每种设备都是有名称的,如何命名以方便系统管理和用户使用是一个重要的问题</p>
<p>采取预先设计的,统一的逻辑名称</p>
<p><strong>出错处理</strong>:数据尽可能在接近硬件层处理,仅当低层无能为力时,才将错误上交</p>
<p><strong>缓冲技术</strong>:设法使数据的到达率和离去率匹配,提高系统的吞吐量</p>
<p><strong>设备的分配</strong>:共享设备和独占设备的分配问题</p>
</blockquote>
]]></content>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>21/12/6 软件体系结构复习-设计模式</title>
    <url>/2021-12-07-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html</url>
    <content><![CDATA[<h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><h6 id="基本原则-责任分离-高内聚低耦合"><a href="#基本原则-责任分离-高内聚低耦合" class="headerlink" title="基本原则:责任分离+高内聚低耦合"></a>基本原则:责任分离+高内聚低耦合</h6><h4 id="各部分组成及说明"><a href="#各部分组成及说明" class="headerlink" title="各部分组成及说明"></a>各部分组成及说明</h4><ol>
<li>strategy:定义了一个共同的接口,所有的具体算法类实现这个接口.换进该类context调用这个接口调用具体的算法类</li>
<li>ConcreteStragety 封装了具体的算法,实现统一个几口</li>
<li>Context 环境类.用于配置一个具体的算法策略对象,维持一个策略接口类型的参考,并且可以定义一个让接口Strategy的具体对象访问的接口(可省略)</li>
</ol>
<h4 id="使用策略模式的情况"><a href="#使用策略模式的情况" class="headerlink" title="使用策略模式的情况"></a>使用策略模式的情况</h4><ol>
<li>当有多个行为上不同但是相关的类存在.</li>
<li>当某个算法使用用户不该知道的数据时,使用策略模式可以将算法实现细节隐藏起来.</li>
<li>当一个类有多种行为,这些行为以大块的条件语句实现时,可以将这些条件块移入他们自己的Strategy类中</li>
</ol>
<h5 id="使用策略模式的出发点"><a href="#使用策略模式的出发点" class="headerlink" title="使用策略模式的出发点"></a>使用策略模式的出发点</h5><ol>
<li>将一组相关的算法封装为各个策略分支,从而将策略分支相关的代码隐藏起来</li>
<li>提升程序的可拓展性</li>
</ol>
<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ol>
<li>得到一系列可服用的算法,这些算法继承一个共同的抽象类,因此公有的功能可以放到超类中</li>
<li>将不同算法封装在不同的策略子类中,使逻辑更加清晰,各个算法可以独立地变化</li>
<li>是功能改变或拓展变得更容易</li>
</ol>
<h2 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h2><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><h4 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h4><p><img src="https://img-blog.csdn.net/20180609213904662" alt="img"></p>
<h5 id="各组成部分的功能"><a href="#各组成部分的功能" class="headerlink" title="各组成部分的功能"></a>各组成部分的功能</h5><ol>
<li>Creater 核心,包含应用程序锁需要的业务逻辑.同时负责委托工厂生产对象</li>
<li>Product 接口&#x2F;抽象类 是具体子类的超类&#x2F;接口</li>
<li>ConcreteProduct 实现Product接口&#x2F;继承Product抽象类</li>
</ol>
<h5 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h5><ol>
<li>工厂方法包含从一个类的结构中选择初始类的业务逻辑</li>
<li>客户类不直接创建产品类的对象,值作为对象的消费者</li>
<li>实现了责任分离</li>
<li>如果有新产品子类加入,不必修改客户类(前提是客户类不用新产品)</li>
<li>因为1,所以客户类不需要繁杂的逻辑判断</li>
</ol>
<h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ol>
<li>增加产品类时,要修改工厂类</li>
<li>因为工厂类的工厂方法是静态的,所以工厂类中的方法不能被继承,因此只能承载一个单独的类群,而不是一个有多层结构的类</li>
</ol>
<h6 id="为了解决简单工厂的缺点—工厂方法"><a href="#为了解决简单工厂的缺点—工厂方法" class="headerlink" title="为了解决简单工厂的缺点—工厂方法"></a>为了解决简单工厂的缺点—工厂方法</h6><h4 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h4><h6 id="核心思想-将简单工厂中单一的工厂类改写成一个层次类"><a href="#核心思想-将简单工厂中单一的工厂类改写成一个层次类" class="headerlink" title="核心思想:将简单工厂中单一的工厂类改写成一个层次类"></a>核心思想:将简单工厂中单一的工厂类改写成一个层次类</h6><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211114142203065.png" alt="image-20211114142203065" style="zoom: 50%;" />

<h5 id="类图解释"><a href="#类图解释" class="headerlink" title="类图解释"></a>类图解释</h5><p>Creater: 接口,含有一个factory方法,然后可以用和产品类相同的结构产生创建者类结构,其中包含CreaterA和CreaterB</p>
<p>CreaterA&#x2F;B:负责创建对应的ProductA和ProductB的对象</p>
<h5 id="和简单工厂的相同之处"><a href="#和简单工厂的相同之处" class="headerlink" title="和简单工厂的相同之处"></a>和简单工厂的相同之处</h5><ol>
<li>方法模式一样,工厂方法也返回一个属于父类Product类型的对象,客户不必知道返回对象的具体类型</li>
</ol>
<h5 id="和简单工厂的区别"><a href="#和简单工厂的区别" class="headerlink" title="和简单工厂的区别"></a>和简单工厂的区别</h5><ol>
<li>中心不同.工厂方法的中心是抽象工厂类&#x2F;接口,而简单工厂方法的中心是一个实的工厂类<br>在简单工厂的工厂方法是静态的,而工厂方法是动态的</li>
<li>简单工厂方法不支持开闭原则.而工厂方法支持.<br>简单工厂增加产品类:在工厂类中也应增加条件语句<br>工厂方法增加产品类:在Product类的结构体重增加一个实体,在工厂类层次结构体中增加一个相应的能产生该新产品对象的实类</li>
<li>工厂方法工厂类不必包含创建对象的逻辑判断</li>
</ol>
<h5 id="使用工厂方法的情况"><a href="#使用工厂方法的情况" class="headerlink" title="使用工厂方法的情况"></a>使用工厂方法的情况</h5><ol>
<li>创建某些类的对象的逻辑比较复杂,并且有很多条件分支</li>
<li>一个类不能准确预知它要创建一个层次类中哪个子类的对象</li>
<li>一个类使用子类决定要创建的对象</li>
<li>需要封装创建类的对象的逻辑,使这些逻辑局部化</li>
</ol>
<h4 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h4><h5 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h5><p><img src="G:\App\QQ\QQ_Chat_File\1335894629\FileRecv\MobileFile\IMG_20211114_144057_edit_205109997971306.jpg" alt="IMG_20211114_144057_edit_205109997971306"></p>
<h5 id="抽象工厂模式中包含"><a href="#抽象工厂模式中包含" class="headerlink" title="抽象工厂模式中包含"></a>抽象工厂模式中包含</h5><ol>
<li>一系列互相有关联的产品类,(有相同的结构)</li>
<li>一系列实的工厂类,实现由抽象工厂提供的接口.他们各自生产一组相关的产品类对象</li>
</ol>
<h6 id="当客户对象要从一个相关的产品组中创建一个对象-而没有必要知道到底创建哪个对象时使用抽象工厂"><a href="#当客户对象要从一个相关的产品组中创建一个对象-而没有必要知道到底创建哪个对象时使用抽象工厂" class="headerlink" title="当客户对象要从一个相关的产品组中创建一个对象,而没有必要知道到底创建哪个对象时使用抽象工厂"></a>当客户对象要从一个相关的产品组中创建一个对象,而没有必要知道到底创建哪个对象时使用抽象工厂</h6><h6 id="抽象工厂方法不符合开闭原则–增加一个新产品层次类-则必须在每个工厂实类中增加方法"><a href="#抽象工厂方法不符合开闭原则–增加一个新产品层次类-则必须在每个工厂实类中增加方法" class="headerlink" title="抽象工厂方法不符合开闭原则–增加一个新产品层次类,则必须在每个工厂实类中增加方法"></a>抽象工厂方法不符合开闭原则–增加一个新产品层次类,则必须在每个工厂实类中增加方法</h6><h3 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h3><p>提供一个比继承更加灵活的方案</p>
<p>类图</p>
<p><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211114145247937.png" alt="image-20211114145247937"></p>
<h3 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h3><h6 id="解决问题–对一个已经完成设计与diamante编写的类的层次结构进行功能修改或增加新功能"><a href="#解决问题–对一个已经完成设计与diamante编写的类的层次结构进行功能修改或增加新功能" class="headerlink" title="解决问题–对一个已经完成设计与diamante编写的类的层次结构进行功能修改或增加新功能"></a>解决问题–对一个已经完成设计与diamante编写的类的层次结构进行功能修改或增加新功能</h6><p><img src="G:\App\QQ\QQ_Chat_File\1335894629\FileRecv\MobileFile\IMG_20211114_150707.jpg" alt="IMG_20211114_150707"></p>
<h4 id="类图解释-1"><a href="#类图解释-1" class="headerlink" title="类图解释"></a>类图解释</h4><ol>
<li>VIsitor: 为每个element的类声明了一个访问操作</li>
<li>concreteVisitor: 实现Visitor声明的运算</li>
<li>Element: 定义了一些基本的方法,包含提供基本数据的方法.<br>重要的是,它的子类必须定义一个接收者方法,为被访问者对象和访问者对象之间提供接口</li>
<li>ConcreteElement :具体的Element的子类</li>
<li>ObjectStructure 提供一个高层接口,允许访问者访问Element的子类.,提供一个访问列表</li>
</ol>
<h4 id="使用访问者模式的情况"><a href="#使用访问者模式的情况" class="headerlink" title="使用访问者模式的情况"></a>使用访问者模式的情况</h4><ol>
<li>当一个对象的结构中,包含有多种类型的具有不同接口的对象,且用户要在这些对象上进行依赖于具体的类的运算</li>
<li>当有多个不同的并且互不相关的运算将作用域这些对象上,且用户不希望这些运算混淆这些类时</li>
<li>当对象的数据类型很少改变,但需要经常改变操作或增加新操作的情况下.</li>
</ol>
<h2 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h2><p>将不同状态下的行为封装在不同的类中,每个类代表一个状态</p>
<p>使用场景:</p>
<p>当一个类依赖于状态,那么程序员在描述该对象的类中通常会使用很多条件语句,<br>这时,使用状态模式可以有效消除条件语句并使得状态转换非常清楚</p>
<h6 id="GANG-OF-FOUR的定义"><a href="#GANG-OF-FOUR的定义" class="headerlink" title="GANG OF FOUR的定义:"></a>GANG OF FOUR的定义:</h6><h6 id="允许一个对象在其内部状态改变时-改变其行为-这个对象看起来似乎修改了它的类"><a href="#允许一个对象在其内部状态改变时-改变其行为-这个对象看起来似乎修改了它的类" class="headerlink" title="允许一个对象在其内部状态改变时,改变其行为.这个对象看起来似乎修改了它的类"></a>允许一个对象在其内部状态改变时,改变其行为.这个对象看起来似乎修改了它的类</h6><h6 id="类图-1"><a href="#类图-1" class="headerlink" title="类图"></a>类图</h6><p><img src="G:\App\QQ\QQ_Chat_File\1335894629\FileRecv\MobileFile\IMG_20211121_185300.jpg" alt="IMG_20211121_185300"></p>
<p>各组件描述:</p>
<p>Context:定义了和客户程序的接口,它保持了一个ConcreteState的代表现在状态的<strong>实例</strong></p>
<p>State:状态接口,子类封装各个状态下行为<br>ConcreteState:State的子类</p>
<p>使用状态模式的情况</p>
<ol>
<li>对象的行为依赖于状态,对象再运行时改变状态</li>
<li>操作有大量依赖于状态的条件语句</li>
</ol>
<p>优点</p>
<ol>
<li>容易添加新的状态(因为封装在子类),</li>
<li>状态迁移很明确</li>
</ol>
<h2 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h2><h6 id="将对象的继承转为对象的组合"><a href="#将对象的继承转为对象的组合" class="headerlink" title="将对象的继承转为对象的组合"></a>将对象的继承转为对象的组合</h6><h5 id="将一个软件设计的抽象部分和实现部分分离-使它们都可以独立地变化"><a href="#将一个软件设计的抽象部分和实现部分分离-使它们都可以独立地变化" class="headerlink" title="将一个软件设计的抽象部分和实现部分分离,使它们都可以独立地变化."></a>将一个软件设计的抽象部分和实现部分分离,使它们都可以独立地变化.</h5><p>类图<img src="G:\App\QQ\QQ_Chat_File\1335894629\FileRecv\MobileFile\IMG_20211121_192040.jpg" alt="IMG_20211121_192040"></p>
<p>各部分解释</p>
<ol>
<li>Abstraction接口,定义抽象部分的接口,为吃Implementor对象的一个参考</li>
<li>RefinedAbstraction,继承或者实现Abstraction</li>
<li>Implementor:定义Implementation类的接口,接口形式可以不和Abstraction界面严格对应</li>
<li>ConcreteImplementor:实现Implementor接口</li>
</ol>
<p>优点</p>
<ol>
<li>分离接口和实现部分,</li>
<li>提高了可扩展性</li>
<li>实现了细节对客户的透明</li>
</ol>
<h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><p>目的:解决接口不一致</p>
<p>分为类适配器模式和对象适配器模式</p>
<p>类图</p>
<p><img src="G:\App\QQ\QQ_Chat_File\1335894629\FileRecv\MobileFile\IMG_20211121_193024_edit_222571278535829.jpg" alt="IMG_20211121_193024_edit_222571278535829"></p>
<p>类适配器: 写一个target接口声明所有需要的方法,写一个adaptor类继承adapee类,并且实现接口target</p>
<p>对象适配器:写一个target接口声明所有需要的方法,采用聚合的方法来实现adaptee类中的方法</p>
<p>使用适配器模式的情况</p>
<ol>
<li>想要使用现有的类,但现有类的接口不符合需求</li>
<li>当需要通过创建一个可服用的类,是的本来接口不相容且无关的类结合在一起工作时</li>
<li>在设计中需要改变多个子类接口,在作用相同但名称不同的类或方法之间进行适配时.</li>
</ol>
<h3 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h3><ul>
<li>视图：管理作为位图展示到屏幕上的图形和文字输出；</li>
<li>控制器：翻译用户的输入并依照用户的输入操作模型和视图；</li>
<li>模型：管理应用的行为和数据，响应数据请求（经常来自视图）和更新状态的指令（经常来自控制器）；</li>
</ul>
<p>如果用户通过一个View的Controller改变了Model,所有其他的View都必须反映出该改变.</p>
<p>当数据发生变化的时候,Model负责通知所有的View,告诉他们数据已经改变了</p>
]]></content>
      <tags>
        <tag>软件体系结构</tag>
      </tags>
  </entry>
  <entry>
    <title>21/12/6 软件体系结构复习</title>
    <url>/2021-12-07-%E8%BD%AF%E4%BB%B6%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0.html</url>
    <content><![CDATA[<h1 id="复习"><a href="#复习" class="headerlink" title="复习"></a>复习</h1><h2 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h2><h3 id="软件体系结构"><a href="#软件体系结构" class="headerlink" title="软件体系结构"></a>软件体系结构</h3><p>系统的基本组织结构,包括系统构成要素,这些构成要素之间以及与环境之间的关系,系统设计及演化时所应遵循的原则</p>
<h3 id="什么设计模式"><a href="#什么设计模式" class="headerlink" title="什么设计模式?"></a>什么设计模式?</h3><h6 id="是一套被反复使用-多数人知晓的-经过分类编目的-代码设计经验的总结"><a href="#是一套被反复使用-多数人知晓的-经过分类编目的-代码设计经验的总结" class="headerlink" title="是一套被反复使用,多数人知晓的,经过分类编目的,代码设计经验的总结."></a>是一套被反复使用,多数人知晓的,经过分类编目的,代码设计经验的总结.</h6><h3 id="为什么要用设计模式"><a href="#为什么要用设计模式" class="headerlink" title="为什么要用设计模式?"></a>为什么要用设计模式?</h3><p>为了<code>&lt;u&gt;</code>可重用代码<code>&lt;/u&gt;</code>,让代码更容易<code>&lt;u&gt;</code>被他人理解<code>&lt;/u&gt;</code>,保证<code>&lt;u&gt;</code>代码可靠性<code>&lt;/u&gt;</code></p>
<h3 id="非功能需求有哪些-含义是什么"><a href="#非功能需求有哪些-含义是什么" class="headerlink" title="非功能需求有哪些?,含义是什么?"></a>非功能需求有哪些?,含义是什么?</h3><ol>
<li>性能</li>
<li>可扩展性&#x2F;伸缩性</li>
<li>可维护性</li>
<li>可用性</li>
<li>安全性</li>
<li>业务质量<br>成本,周期,投入的人力,需要的资源</li>
<li>性能需求:用户在软件响应速度,结果精度,运行时资源消耗量等方面的要求</li>
<li>可靠性需求:用户在软件失效的频率,严重程度,易恢复性,以及故障可预测性等方面的要求</li>
<li>易用性要求:用户要求在界面的易用性,美观性,以及对面向用户的文档和培训资料等方面的要求</li>
<li>安全性需求:用户在身份认证,授权控制,私密性等方面的要求</li>
<li>运行环境约束:用户对软件系统运行环境的要求</li>
<li>外部接口:用户对待开发的软件系统与其他软件系统或硬件设备之间的接口的要求</li>
<li>可保障性要求:用户在软件可配置性,可扩展性,可维护性,可移植性方面的要求</li>
</ol>
<h3 id="编程的三个层次"><a href="#编程的三个层次" class="headerlink" title="编程的三个层次?"></a>编程的三个层次?</h3><p>针对实现编程</p>
<p>Dog d &#x3D; new Dog();</p>
<p>d.bark();</p>
<p>针对接口&#x2F;超类型编程</p>
<p>Animal animal &#x3D; new Dog();</p>
<p>animal.makeSound();</p>
<p>运行时才指定具体实现的对象</p>
<p>a&#x3D;getAnimal();</p>
<p>a.makeSound();</p>
<h3 id="设计模式的三大原则"><a href="#设计模式的三大原则" class="headerlink" title="设计模式的三大原则"></a>设计模式的三大原则</h3><h6 id="单一职责"><a href="#单一职责" class="headerlink" title="单一职责"></a>单一职责</h6><p>一个类只负责一个功能领域中相应的职责,</p>
<h6 id="依赖倒置"><a href="#依赖倒置" class="headerlink" title="依赖倒置"></a>依赖倒置</h6><p>针对接口编程,而非针对实现编程</p>
<p>即程序中所有的依赖关系都是终止与抽象类或者直接接口.</p>
<h6 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h6><p>对拓展开放,对修改关闭</p>
<h6 id="面向对象的三大原则"><a href="#面向对象的三大原则" class="headerlink" title="面向对象的三大原则"></a>面向对象的三大原则</h6><h2 id="软件体系结构-1"><a href="#软件体系结构-1" class="headerlink" title="软件体系结构"></a>软件体系结构</h2><h3 id="分层风格"><a href="#分层风格" class="headerlink" title="分层风格"></a>分层风格</h3><p>指将软件设计成层次结构,每个层为其上层服务,同时又是其下层的客户,不允许隔层调用</p>
<p>优点</p>
<ol>
<li>层次结构 支持基于随着层次不断增加而不断抽象的设计.能将一个复杂的问题分一系列从初等的与硬件相关的功能到可以被用户使用的高级功能.</li>
<li>支持更新.每层只和两个层交互,因此,在接口不变的前提下,可以单独修改或更换某一层的某些组件而不影响其他层.</li>
<li>支持复用.</li>
</ol>
<p>缺点</p>
<ol>
<li>不是什么系统都容易被组织成层次结构</li>
<li>有时层次结构的逻辑上的较高层级和较低层级会有比较紧密的耦合</li>
<li>正确的层次抽象往往可能很困难.</li>
</ol>
<h3 id="管道-过滤器风格"><a href="#管道-过滤器风格" class="headerlink" title="管道-过滤器风格"></a>管道-过滤器风格</h3><p>每个过滤器都有一组输入和输出,组件读入输入数据流,经过数据处理,然后产生输出数据流.</p>
<p>系统由负责运送数据的管道和负责对数据进行处理的过滤器组成</p>
<p>优点</p>
<ol>
<li>高内聚低耦合</li>
<li>允许设计者将整个系统的输入&#x2F;输出行为看做是多个过滤器行为的简单合成</li>
<li>支持软件重用</li>
<li>系统维护和增强系统性能简单</li>
<li>允许对一些如吞吐量,死锁等属性的分析</li>
<li>支持并发</li>
</ol>
<p>缺点</p>
<ol>
<li>导致进程称为批处理结构</li>
<li>不适合处理交互应用</li>
<li>因为每个过滤器上都增加了解析和合成数据的工作,因此系统性能下滑,</li>
</ol>
<h3 id="主程序-子程序风格"><a href="#主程序-子程序风格" class="headerlink" title="主程序-子程序风格"></a>主程序-子程序风格</h3><p>采取分而治之策略,将一个复杂的问题分解为多个独立的字问题</p>
<h5 id="自顶向下功能化设计思想-结构化设计"><a href="#自顶向下功能化设计思想-结构化设计" class="headerlink" title="自顶向下功能化设计思想(结构化设计)"></a>自顶向下功能化设计思想(结构化设计)</h5><p>从功能需求出发,将一个整体问题分解为多个子问题,然后将子问题划分为几个更小的子问题,直到不可划分为止</p>
<h6 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h6><ol>
<li>逻辑设计与物理设计分开</li>
<li>开发过程中形成一套规范化的文档,以便后期修改和维护</li>
</ol>
<p>适用于组织相对稳定,业务处理过程规范,需求明确且在一定时期内不会发生大的变化的大型复杂系统的开发.</p>
<p>缺点:开发周期长,系统难以适应环境的变化及开发过程复杂繁琐</p>
<p>功能演化困难,显示中的系统功能不容易描述,功能化设计丢掉了数据与数据结构,产生的可复用代码少.</p>
<h3 id="面向对象软件体系结构"><a href="#面向对象软件体系结构" class="headerlink" title="面向对象软件体系结构"></a>面向对象软件体系结构</h3><p>系统看做由一些对象的集合构成,消息从一个对象发送到另外一个对象.每个对象都有其相关的功能</p>
<p>对象是一个具有状态和行为的实体.一个对象存储它的状态在域中,面向对象设计隐藏对象的内部状态,并且要求所有对象之间的交互都通过该对象的方法,这叫做数据封装,是面向对象编程的基本原则.</p>
<p>面向对象设计的特点</p>
<ol>
<li>封装性,限制对特定信息的访问</li>
<li>继承性,共享同一个功能定义</li>
<li>动态绑定性:在程序运行前,不知道创建哪个类的对象,运行时才动态生成</li>
<li>复用和可维护性:因为封装与局部化</li>
<li>系统功能通过对象服务表示:对象的接口提供了一系列的方法.</li>
<li>共享数据区域被取消</li>
<li>对象可以是分布的.通过函数或者方法调用互相交互.</li>
<li>对象是对现实世界的抽象并且可以自己管理自己.</li>
</ol>
<p>优缺点</p>
<p>优点:</p>
<ol>
<li>容易维护</li>
<li>可复用性好</li>
<li>映射现实世界</li>
<li>容易对一个系统进行剖分</li>
</ol>
<p>缺点</p>
<ol>
<li>占用欧冠内存较大.因为每个新被创建的对象都必须占用一块内存,而面向对象程序中,往往有大量对象被创建</li>
<li>一个对象要和另外一个对象交互,该对象必须知道另外一个对象的身份,包括对象名,方法名和参数类型等.</li>
</ol>
<h3 id="基于共享数据的事件风格"><a href="#基于共享数据的事件风格" class="headerlink" title="基于共享数据的事件风格"></a>基于共享数据的事件风格</h3><ol>
<li>系统中的每个组件可以注册一种事件</li>
<li>当一个组件要发布事件时,该组件可以广播一个或多个事件到事件空间</li>
<li>每当一个事件被广播了,系统将负责自动调用那些已经注册了该事件的组件或者过程,被调用的组件将运行.</li>
</ol>
<h2 id="2-设计模式"><a href="#2-设计模式" class="headerlink" title="2.设计模式"></a>2.设计模式</h2><h3 id="mvc模式"><a href="#mvc模式" class="headerlink" title="mvc模式"></a>mvc模式</h3><p>model 包含核心数据和功能,独立于输入行为和输出表示</p>
<p>View 将模型中的数据显示给用户</p>
<p>Controller处理用户输入,如果用户通过一个view 的controller改变了model,其他controller必须反映出该改变,即当数据发生变化的时候,model负责同志所有的view,告诉他们数据已经改变了.(观察者模式,model对象是被观察者,controller是观察者)</p>
<h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><p>优点</p>
<ol>
<li>对于同一个模型,可以有不同的视图和控制器,一遍提供给用户不同类型的用户图形界面</li>
<li>改变-传播机制保证了模型在改变的同时自动刷新所有的视图</li>
<li>mvc体系结构的设计使的改变图形界面非常容易,适合业务逻辑较少改变,而图形界面需要经常改变的应用</li>
<li>全部的核心数据和核心功能都包含在模型中,很容易对核心的应用进行测试</li>
<li>可拓展性比较好</li>
</ol>
<h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><p>三个部件</p>
<p>客户程序</p>
<p>调用者程序</p>
<p>被调用者程序</p>
<p>解除调用者类与被调用者类的耦合–为响应客户新请求的行动创建一个抽象</p>
<p>client对象负责初始化Command对象,并且提供将来要调用的方法的全部信息</p>
<p>Invoker决定什么时候调用所要调用的方法</p>
<p>receiver是含有索要调用方法的代码的实例</p>
<h3 id="3-期末复习"><a href="#3-期末复习" class="headerlink" title="3.期末复习"></a>3.期末复习</h3>]]></content>
      <tags>
        <tag>软件体系结构</tag>
      </tags>
  </entry>
  <entry>
    <title>计网笔记-数据链路层</title>
    <url>/2021-12-09-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82.html</url>
    <content><![CDATA[<h1 id="12-2-数据链路层"><a href="#12-2-数据链路层" class="headerlink" title="12_2_数据链路层"></a>12_2_数据链路层</h1><h2 id="1-数据链路层的基本功能"><a href="#1-数据链路层的基本功能" class="headerlink" title="1. 数据链路层的基本功能"></a>1. 数据链路层的基本功能</h2><p><strong><code>&lt;u&gt;</code>将数据报从一个节点经过一条链路传输到相邻节点<code>&lt;/u&gt;</code></strong></p>
<ol>
<li>组帧:将数据报封装进帧，加上首部和尾部</li>
<li>链路接入:如果共享媒体，控制信道接入,使用帧首部中的“MAC”地址标识源和目的地</li>
<li>相邻节点间的可靠交付,</li>
<li>检错</li>
<li>纠错:接收方识别并纠正比特差错，而不需要重传</li>
</ol>
<p>它放在哪?适配器(网卡),和主机系统总线相连</p>
<h2 id="2-差错控制"><a href="#2-差错控制" class="headerlink" title="2.差错控制"></a>2.差错控制</h2><p><strong>通过通信信道接收的数据与发送的数据不一致的现象称为传输差错(简称差错)。</strong></p>
<h3 id="2-1检错编码"><a href="#2-1检错编码" class="headerlink" title="2.1检错编码"></a>2.1检错编码</h3><h4 id="2-1-1单比特奇偶校验"><a href="#2-1-1单比特奇偶校验" class="headerlink" title="2.1.1单比特奇偶校验"></a>2.1.1单比特奇偶校验</h4><p>奇偶校验码是一种通过增加冗余位使得码字中“1”的个数恒为奇数或偶数的编码方法</p>
<p><img src="https://s2.loli.net/2021/12/09/JEV1Ht24Sz6iWuk.png" alt="image-20211202102617007"></p>
<p>能力:能够检测单(奇数)个比特差错</p>
<h4 id="2-1-2InternetChecksum–UDP里讲过"><a href="#2-1-2InternetChecksum–UDP里讲过" class="headerlink" title="2.1.2InternetChecksum–UDP里讲过"></a>2.1.2InternetChecksum–UDP里讲过</h4><h4 id="2-1-3循环冗余校验"><a href="#2-1-3循环冗余校验" class="headerlink" title="2.1.3循环冗余校验"></a>2.1.3循环冗余校验</h4><p>原始数据:D</p>
<p>校验位:长度r,</p>
<p>原始数据后补上r位0,</p>
<p>Generator: G:r+1的长度</p>
<p><img src="https://s2.loli.net/2021/12/09/ofx3QTMktbhvgzR.png" alt="image-20211202103409058"></p>
<p>D不断异或G(其实是求余数),最后剩下的为校验位</p>
<img src="https://s2.loli.net/2021/12/09/EsIH19YKhbSXZq7.png" alt="image-20211202103258900" style="zoom:33%;" />

<p>检测能力</p>
<p><img src="https://s2.loli.net/2021/12/09/QD8Eu6FTqJRkfwx.png" alt="image-20211202103444659"></p>
<h4 id="2-1-4二维奇偶校验"><a href="#2-1-4二维奇偶校验" class="headerlink" title="2.1.4二维奇偶校验"></a>2.1.4二维奇偶校验</h4><p>二维奇偶校验能够检测并纠正单比特差错</p>
<p><img src="https://s2.loli.net/2021/12/09/dsNAQDYEWB54bO6.png" alt="image-20211202103521291"></p>
<h3 id="2-2纠错编码"><a href="#2-2纠错编码" class="headerlink" title="2.2纠错编码"></a>2.2纠错编码</h3><h2 id="3-介质访问控制"><a href="#3-介质访问控制" class="headerlink" title="3.介质访问控制"></a>3.介质访问控制</h2><p>点对点&#x2F;广播</p>
<h3 id="3-1信道划分"><a href="#3-1信道划分" class="headerlink" title="3.1信道划分"></a>3.1信道划分</h3><p>将信道划分为较小的“片” (时隙，频率，编码)</p>
<p>为节点分配专用的片</p>
<h4 id="3-1-1频分多路复用"><a href="#3-1-1频分多路复用" class="headerlink" title="3.1.1频分多路复用"></a>3.1.1频分多路复用</h4><h4 id="3-2-2时分多路复用、"><a href="#3-2-2时分多路复用、" class="headerlink" title="3.2.2时分多路复用、"></a>3.2.2时分多路复用、</h4><h4 id="3-1-3波分多路复用"><a href="#3-1-3波分多路复用" class="headerlink" title="3.1.3波分多路复用"></a>3.1.3波分多路复用</h4><h4 id="3-1-4码分多路访问"><a href="#3-1-4码分多路访问" class="headerlink" title="3.1.4码分多路访问"></a>3.1.4码分多路访问</h4><h3 id="3-2随机访问"><a href="#3-2随机访问" class="headerlink" title="3.2随机访问"></a>3.2随机访问</h3><p>不划分信道，允许冲突</p>
<p>从“冲突”中恢复</p>
<h4 id="3-2-1ALOHA协议、CSMA协议、"><a href="#3-2-1ALOHA协议、CSMA协议、" class="headerlink" title="3.2.1ALOHA协议、CSMA协议、"></a>3.2.1ALOHA协议、CSMA协议、</h4><p><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211202111307619.png" alt="image-20211202111307619"></p>
<p>传播时延的冲突:</p>
<p>传播时延:传输距离&#x2F;光速</p>
<p><img src="https://s2.loli.net/2021/12/09/oRzjkmdAZTFytSf.png" alt="image-20211202111802943"></p>
<p>端到端往返时延 2t 称为争用期，或冲突窗口</p>
<h4 id="3-2-2CSMA-x2F-CD协议"><a href="#3-2-2CSMA-x2F-CD协议" class="headerlink" title="3.2.2CSMA&#x2F;CD协议"></a>3.2.2CSMA&#x2F;CD协议</h4><p>需要在发送完帧之前就能收到自己发送出去的数据，即帧的传输时延至少是数据在总线中的传播时延的2倍</p>
<p><strong>最小帧长&#x3D;传播时延* 2 *数据传输速率</strong></p>
<p>例如，以太网的冲突窗口长度为51.2µs，数据传输速</p>
<p>率为10Mbps，51.2µs可以发送512bit（64B）数据，因</p>
<p>此，64B是以太网的最短帧长度；</p>
<h4 id="、CSMA-x2F-CA协议"><a href="#、CSMA-x2F-CA协议" class="headerlink" title="、CSMA&#x2F;CA协议"></a>、CSMA&#x2F;CA协议</h4><h3 id="3-3轮流协议"><a href="#3-3轮流协议" class="headerlink" title="3.3轮流协议"></a>3.3轮流协议</h3><h4 id="3-3-1令牌传递协议"><a href="#3-3-1令牌传递协议" class="headerlink" title="3.3.1令牌传递协议"></a>3.3.1令牌传递协议</h4><h4 id="3-3-2轮询协议"><a href="#3-3-2轮询协议" class="headerlink" title="3.3.2轮询协议"></a>3.3.2轮询协议</h4><h2 id="4-局域网"><a href="#4-局域网" class="headerlink" title="4.局域网"></a>4.局域网</h2><h3 id="4-1局域网的基本概念与体系结构"><a href="#4-1局域网的基本概念与体系结构" class="headerlink" title="4.1局域网的基本概念与体系结构"></a>4.1局域网的基本概念与体系结构</h3><h3 id="4-2局域网寻址与ARP协议"><a href="#4-2局域网寻址与ARP协议" class="headerlink" title="4.2局域网寻址与ARP协议"></a>4.2局域网寻址与ARP协议</h3><h3 id="4-3以太网与IEEE-802-3"><a href="#4-3以太网与IEEE-802-3" class="headerlink" title="4.3以太网与IEEE 802.3"></a>4.3以太网与IEEE 802.3</h3><h5 id="4-3-1以太网拓扑结构"><a href="#4-3-1以太网拓扑结构" class="headerlink" title="4.3.1以太网拓扑结构"></a>4.3.1以太网拓扑结构</h5><p>90年代前:总线型拓扑(单冲突域)</p>
<p>现在星形(中心是交换机,节点之间不冲突,不需要CSMA)</p>
<p><img src="https://s2.loli.net/2021/12/09/MDJZpHrGhb3BewT.png" alt="image-20211209100351905"></p>
<p>4.3.2以太网帧结构</p>
<p>…</p>
<p>4.3.3 以太网属性</p>
<p>•connectionless: no handshaking between sending and receiving NICs</p>
<p>连接之间没有握手</p>
<p>•unreliable: receiving NIC doesn’t send ACKs or NAKs to sending NIC</p>
<p>就是说,如果没收到就直接扔了,不发消息</p>
<p>以太网的MAC Control</p>
<p>CMSA&#x2F;CD+指数回避(用来防止连续冲突)</p>
<h3 id="4-4无线局域网-IEEE-802-11"><a href="#4-4无线局域网-IEEE-802-11" class="headerlink" title="4.4无线局域网(IEEE 802.11)"></a>4.4无线局域网(IEEE 802.11)</h3><p>4.4.1典型结构</p>
<img src="https://s2.loli.net/2021/12/09/6SE91mMNBVprgAh.png" alt="image-20211209102241124" style="zoom:33%;" />

<p>4.4.2冲突控制</p>
<p>CSMA&#x2F;C(ollision)A(voidance)</p>
<p>允许发送端预订信道</p>
<ul>
<li>发送端发送请求帧到AP</li>
<li>AP广播允许发送(CTS)的回复</li>
<li>所有结点收到CTS,发送端发送</li>
</ul>
<h2 id="5-数据链路层设备"><a href="#5-数据链路层设备" class="headerlink" title="5.数据链路层设备"></a>5.数据链路层设备</h2><h3 id="5-1局域网交换机"><a href="#5-1局域网交换机" class="headerlink" title="5.1局域网交换机"></a>5.1局域网交换机</h3><p>查看进入的MAC地址,然后转发给出链路</p>
<p>**<code>&lt;u&gt;</code>透明<code>&lt;/u&gt;</code><strong>因此在转发的时候分组里</strong><code>&lt;u&gt;</code>不会<code>&lt;/u&gt;</code>**有交换机的物理地址</p>
<p><code>&lt;u&gt;</code><strong>自学习</strong><code>&lt;/u&gt;</code>:</p>
<p>收到对应接口分组后记录对应接口MAC地址在自己对应接口上</p>
<p>如果发现目的接口没有,会洪泛(将分组分发到所有接口上,等待回复)</p>
<p>5.2 冲突域vs广播域</p>
<p>冲突域</p>
<p>当两个设备在同时发送分组的时候会冲突</p>
<p>下面每个圈都是冲突域</p>
<p><img src="https://s2.loli.net/2021/12/09/PYFwpzouJ9VhBre.png" alt="image-20211209105458295"></p>
<p>广播</p>
<p>通过广播能发到的一堆设备</p>
<p><img src="https://s2.loli.net/2021/12/09/l7OfskCEuRYMqb6.png" alt="image-20211209105941059"></p>
<p>虚拟局域网(为了防止过多的广播信息引起不便)</p>
<p>虚拟局域网VLAN是由一些局域网网段构成的与物理位置无关的逻辑组</p>
<p>每一个 VLAN 的帧都有一个明确的标识符，指明发送这个帧的工作站是属于哪一个 VLAN。(在以太网帧中插入一个4字节的标识符,称为VLAN标记)</p>
<p><img src="https://s2.loli.net/2021/12/09/ier7sUByQbkouxL.png" alt="image-20211209110309425"></p>
]]></content>
      <tags>
        <tag>计网</tag>
      </tags>
  </entry>
  <entry>
    <title>网络地址转换</title>
    <url>/2021-12-09-%E7%BD%91%E7%BB%9C%E5%9C%B0%E5%9D%80%E8%BD%AC%E6%8D%A2.html</url>
    <content><![CDATA[<h3 id="网络地址转换"><a href="#网络地址转换" class="headerlink" title="网络地址转换"></a>网络地址转换</h3><p>目的:解决ip稀缺</p>
<p>三个专用地址块</p>
<p><img src="https://s2.loli.net/2021/12/09/15aVHB4QMLxdjTC.png" alt="image-20211118100015197"></p>
<p>原理:本地网络中的所有计算机在访问Internet时使用同一个IP地址<br>，within the local network, computers use private addresses for<br>routing intramural traffic在本地网络中，计算机使用专用地址<br>进行路由。对于目的地址是专用地址的数据报，路由器一律<br>不予转发。</p>
<p>本质:通过端口号区分主机</p>
<h3 id="IPV6"><a href="#IPV6" class="headerlink" title="IPV6"></a>IPV6</h3><p>同样是为了改变缺少ip地址的问题</p>
<p>源ip:128位</p>
<p>目的ip:128位</p>
<p><img src="https://s2.loli.net/2021/12/09/CaiYJWqQs4EG1UB.png" alt="image-20211118111114068"></p>
<h3 id="隧道技术"><a href="#隧道技术" class="headerlink" title="隧道技术"></a>隧道技术</h3><p>解决ipv4和ipv6共存</p>
<p>ipv6作为ipv4的payload(数据)发送</p>
<p><img src="https://s2.loli.net/2021/12/09/PxaInA3sEKMHGpF.png" alt="image-20211118111549533"></p>
]]></content>
      <tags>
        <tag>网络地址</tag>
      </tags>
  </entry>
  <entry>
    <title>网络层</title>
    <url>/2021-12-09-%E8%AE%A1%E7%BD%91%E7%BD%91%E7%BB%9C%E5%B1%82.html</url>
    <content><![CDATA[<h1 id="网络层-控制平面"><a href="#网络层-控制平面" class="headerlink" title="网络层-控制平面"></a>网络层-控制平面</h1><h2 id="路由算法"><a href="#路由算法" class="headerlink" title="路由算法"></a>路由算法</h2><h6 id="产生路由表的算法"><a href="#产生路由表的算法" class="headerlink" title="产生路由表的算法"></a>产生路由表的算法</h6><h3 id="图论抽象"><a href="#图论抽象" class="headerlink" title="图论抽象"></a>图论抽象</h3><p>Graph: G &#x3D; <strong>(N,E)</strong></p>
<p><strong>N</strong> &#x3D; set of routers &#x3D; { u, v, w, x, y, z } 节点是<strong>路由器</strong></p>
<p><strong>E</strong> &#x3D; set of links &#x3D;{ (u,v), (u,x), (v,x), (v,w), (x,w), (x,y), (w,y), (w,z), (y,z) }  边是<strong>物理链路</strong></p>
<p>链路开销Cost of link：时延、费用或拥塞等级 路径开销Cost of path：c(x1 , x2 , x3 ,…, xp ) &#x3D; c(x1 ,x2 ) + c(x2 ,x3 ) + … +  c(xp-1 ,xp )</p>
<p><strong>路由算法</strong>：找到开销最小的路径(路由器序列)</p>
<p><strong>分散式</strong>算法–只知道和部分路径,通过和邻居交换信息</p>
<p>典型就是下面这个算法</p>
<h3 id="•-距离向量路由算法"><a href="#•-距离向量路由算法" class="headerlink" title="• 距离向量路由算法"></a>• 距离向量路由算法</h3><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><ol>
<li><p>节点x维护距离向量</p>
<p>Dx&#x3D;[dx (y): yєN ]<br>(如果y不是x的邻居节点, 则dx (y)&#x3D;∞,否则dx (y)&#x3D; c(x,y))</p>
</li>
<li><p>每个节点周期性向其邻居节点发送它自己的 距离向量, 节点x保存其邻居节点的距离向量<br>Dv &#x3D; [dv (y): y є N ]</p>
</li>
<li><p>n当节点x接收到来自邻居的 新距离向量，它使用B-F方程更新自己的DV :<br>Dx (y) ← minv {c(x,v) + Dv (y)} for each node y ∊ N<br>Bellman-Ford方程：</p>
<ol>
<li>定义<br>$d_x$ (y) &#x3D; 从x到y的最小开销路径的开销,c(x,v) &#x3D; 从x到邻居节点v的链路的开销</li>
<li>则dx (y) &#x3D; minv {c(x,v) + dv (y) }</li>
<li>取值最小的节点对应最短路径中的<strong>下一跳</strong>(只有一个地址)➜ 转发表</li>
</ol>
<p> 示例<code>&lt;img src=&quot;https://s2.loli.net/2021/12/09/HhICGUakqft2zm1.png&quot; alt=&quot;image-20211122134953146&quot; style=&quot;zoom:50%;&quot; /&gt;</code></p>
</li>
</ol>
<h3 id="•-链路状态路由算法-•"><a href="#•-链路状态路由算法-•" class="headerlink" title="• 链路状态路由算法 •"></a>• 链路状态路由算法 •</h3><ol>
<li>Discover its neighbors, learn their network address. <strong>发现邻居，学习它们的网络地址</strong></li>
<li>Measure the delay or cost to each of its neighbors. <strong>测量到每一个邻居的时延或开销</strong></li>
<li>Construct a packet (link state packet)telling all it has  just learned. <strong>构造一个分组(链路状态分组) 来通 告其学习到的所有信息</strong></li>
<li>Send this packet to all other routers.  <strong>向所有路由器发送该分组</strong></li>
<li>Compute the shortest path to every other router.  <strong>计算到其他路由器的最短路径</strong><br>使用Dijkstra算法计算最短路径<br><code>&lt;img src=&quot;https://s2.loli.net/2021/12/09/mCdF4G2wO7vxpUW.png&quot; alt=&quot;image-20211122143134224&quot; style=&quot;zoom:50%;&quot; /&gt;</code></li>
</ol>
<h2 id="路由协议"><a href="#路由协议" class="headerlink" title="路由协议"></a>路由协议</h2><p>受到分组压力,单位需求的影响,产生了as(自治系统)</p>
<p>系统内可以用之前的算法,系统外–?自治系统间专门的路由协议</p>
<h3 id="•-O-pen-S-hortest-P-ath-F-irst-路由协议"><a href="#•-O-pen-S-hortest-P-ath-F-irst-路由协议" class="headerlink" title="• O(pen)S(hortest)P(ath)F(irst)路由协议"></a>• O(pen)S(hortest)P(ath)F(irst)路由协议</h3><h5 id="自治系统内路由-开放最短路径优先"><a href="#自治系统内路由-开放最短路径优先" class="headerlink" title="自治系统内路由-开放最短路径优先"></a>自治系统内路由-开放最短路径优先</h5><h6 id="使用的算法是链路状态算法"><a href="#使用的算法是链路状态算法" class="headerlink" title="使用的算法是链路状态算法"></a>使用的算法是<strong>链路状态算法</strong></h6><p>OSPF的特点</p>
<ol>
<li>安全性–报文经过签名鉴别</li>
<li>使用多条开销相同的路径</li>
<li>对每条链路,为不同的服务类型设置多种开销度量</li>
<li>集成的单播和多播支持</li>
</ol>
<h5 id="层次ospf"><a href="#层次ospf" class="headerlink" title="层次ospf"></a>层次ospf</h5><p>自治系统内进一步再分</p>
<h3 id="•-BGP路由协议-border-gateway-protocol"><a href="#•-BGP路由协议-border-gateway-protocol" class="headerlink" title="• BGP路由协议(border gateway protocol)"></a>• BGP路由协议(border gateway protocol)</h3><h5 id="自治系统间路由"><a href="#自治系统间路由" class="headerlink" title="-自治系统间路由"></a>-自治系统间路由</h5><p>算法-距离向量算法(改名—路径向量算法)</p>
<ol>
<li>eBGP: Obtain subnet reachability information from</li>
</ol>
<p>neighboring ASes.从相邻AS获得子网可达性信息</p>
<ol start="2">
<li>iBGP: Propagate reachability information to all AS-internal</li>
</ol>
<p>routers. 向AS内部的所有路由器传播可达性信息</p>
<ol start="3">
<li>Determine “good” routes to subnets based on reachability</li>
</ol>
<p>information and policy.根据可达性信息和策略，决定到子网</p>
<p>的“好”路由</p>
<h2 id="•ICMP-The-Internet-Control"><a href="#•ICMP-The-Internet-Control" class="headerlink" title="•ICMP-The Internet Control"></a>•ICMP-The Internet Control</h2><p>差错报告–不可达网络\主机\端口\协议</p>
<p>回声请求</p>
<p>trace route</p>
<p>源主机从ttl&#x3D;1,一点点开始发送更大的ttl,目的端口号设置为一个不可能到达的端口,</p>
<p>当ttl超时时,该路由器发送一个ICMP报文到源主机,这样会获取路径上路由器的信息</p>
<p>到达目的主机后,会返回一个端口不可达报文,探测结束</p>
<h2 id="Message-Protocol"><a href="#Message-Protocol" class="headerlink" title="Message Protocol"></a>Message Protocol</h2><h2 id="•网络管理——SNMP协议"><a href="#•网络管理——SNMP协议" class="headerlink" title="•网络管理——SNMP协议"></a>•网络管理——SNMP协议</h2>]]></content>
      <tags>
        <tag>网络层</tag>
      </tags>
  </entry>
  <entry>
    <title>文件系统-操作系统</title>
    <url>/2021-12-07.html</url>
    <content><![CDATA[<h1 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h1><h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><h3 id="文件系统的功能"><a href="#文件系统的功能" class="headerlink" title="文件系统的功能"></a>文件系统的功能</h3><p>支持文件所占存储介质空间的分配&#x2F;回收<br>支持文件相对起始数据的逻辑块定位到外存上的物理块<br>支持对文件访问的安全检查<br>支持对文件的读写访问</p>
<h3 id="文件的结构"><a href="#文件的结构" class="headerlink" title="文件的结构"></a>文件的结构</h3><h5 id="逻辑结构-文件组织"><a href="#逻辑结构-文件组织" class="headerlink" title="逻辑结构(文件组织):"></a>逻辑结构(<strong>文件组织</strong>):</h5><p>用户看到的文件组织形式,和存储:设备无关</p>
<p>有结构的记录式文件：由一个以上的记录构成</p>
<p>无结构的流式文件：文件没有结构，由一串字符流构成</p>
<h5 id="物理结构"><a href="#物理结构" class="headerlink" title="物理结构:"></a>物理结构:</h5><p>外存上存放形式,和存储设备特性有很大关系</p>
<h5 id="文件存储器物理特性"><a href="#文件存储器物理特性" class="headerlink" title="文件存储器物理特性:"></a>文件存储器物理特性:</h5><p>•<strong>磁带</strong></p>
<p><strong>顺序访问设备→要求文件顺序存放于带上。</strong></p>
<p>•<strong>磁盘</strong></p>
<p><strong>直接（随机）访问设备→文件可顺序、链接式或随机（通过类似页表的索引结构访问）存放于设备上</strong></p>
<h5 id="文件系统重要作用-之一"><a href="#文件系统重要作用-之一" class="headerlink" title="文件系统重要作用(之一)"></a>文件系统重要作用(之一)</h5><p>在用户逻辑文件和物理文件之间建立映射</p>
<h4 id="文件存取方式"><a href="#文件存取方式" class="headerlink" title="文件存取方式"></a>文件存取方式</h4><p><strong>读写文件存储器上的一个物理块的方法</strong></p>
<p><strong>顺序存取：指对文件中的信息按顺序依次读写</strong></p>
<p><strong>随机存取法:</strong></p>
<pre><code>**直接存取法：允许用户随意存取文件中任意一个物理记录**

**按键存取法：根据文件中各记录的某个数据项内容来存取记录的，这种数据项称之为键**
</code></pre>
<h4 id="几种常见的物理存储方式"><a href="#几种常见的物理存储方式" class="headerlink" title="几种常见的物理存储方式"></a>几种常见的物理存储方式</h4><h5 id="1-连续存储-顺序结构"><a href="#1-连续存储-顺序结构" class="headerlink" title="1.  连续存储(顺序结构)"></a>1.  连续存储(顺序结构)</h5><p>它将逻辑上连续的文件信息依次存放在编号连续的物理块上。</p>
<p>l<strong>优点：</strong></p>
<p>–<strong>存储方式简单。</strong></p>
<p>–<strong>对文件记录进行批量存取时，其存取效率较高。</strong></p>
<p>–<strong>支持定长记录的直接存取，可以通过计算获得存储位置。</strong></p>
<p>l<strong>缺点：</strong></p>
<p>–<strong>不支持随机查找。如果要随机地查找或修改单个记录，此时系统需要逐个地查找诸记录，性能较差，尤其是当文件较大时情况将更为严重。</strong></p>
<p>–<strong>存在外部碎片。</strong></p>
<p>–<strong>不便于记录的增加或删除操作。</strong></p>
<ol start="2">
<li><p>–<strong>链接结构</strong></p>
<p>•<strong>将逻辑上连续的文件信息存放在不连续的物理块上，每个物理块设有一个指针指向下一个物理块。</strong></p>
<p>l<strong>优点：</strong></p>
<p>–<strong>提高了磁盘空间利用率，不存在外部碎片问题。</strong></p>
<p>–<strong>有利于文件插入和删除，及其动态扩充。</strong></p>
<p>l<strong>缺点：</strong></p>
<p>–<strong>仍然不支持随机查找。</strong></p>
<p>–<strong>由于存储空间可能不连续，带来更多的寻道次数和寻道时间。</strong></p>
<p>–<strong>需要牺牲一些空间存放链接指针，同时需要维护这些指针，增加了系统开销。</strong></p>
<p>–<strong>可靠性问题，如指针出错。</strong></p>
</li>
<li><p><strong>索引结构</strong><br>将逻辑上连续的文件信息(记录)存放在不连续的物理块中，系统为每个文件建立一个专用数据结构——索引表，索引表中存放文件的逻辑块号和物理块号的对应关系</p>
<ol>
<li>优点：<br>既能顺序存取,又能直接存取。<br>满足了文件动态增长、插入删除的要求。<br>没有外碎片，外存空间利用率较高。<br>缺点<br>较多的寻道次数和寻道时间。<br>索引表本身需要存储空间，同时对索引表的维护会增加系统开销。</li>
<li>索引表组织方式<ol>
<li><strong>链接文件方式：将多个索引表块按链接文件的方式串联起来</strong></li>
<li>多重索引方式：将一个大文件的所有索引表（二级索引)的地址放在另一个索引表（一级索引)中。<ol>
<li>多重索引优势<ol>
<li>寻址空间较大,相比于链接文件,会大大减少读取对应物理块所需要的读盘次数(因为要从文件中读取索引项)</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h3 id="文件的目录"><a href="#文件的目录" class="headerlink" title="文件的目录"></a>文件的目录</h3><p>OS观点：文件包含文件控制块和文件体</p>
<p>文件控制块（FCB）的主要内容：</p>
<ul>
<li><blockquote>
<p>文件名<br>创建者<br>文件物理位置信息：如索引表<br>创建、修改时间、保存时间<br>口令：用于对文件访问进行验证<br>操作限制：如读、写、执行权限说明</p>
</blockquote>
</li>
</ul>
<p>文件目录提供的功能：</p>
<ul>
<li><blockquote>
<p><strong>实现“按名存取”</strong>。用户只须提供文件名，即可对文件进行存取。这是文件系统向用户提供的最基本的服务。<br><strong>提高对目录的检索速度</strong>。合理地组织目录结构，加快对目录的检索速度，从而加快对文件的存取速度。这是在设计一个大、中型文件系统时，所追求的主要目标。<br><strong>实现文件共享</strong>。在多用户系统中，应允许多个用户共享一个文件，以节省大量的存储空间并方便用户。<br><strong>解决文件重名问题</strong>。系统应允许不同用户对不同文件采用相同的名字，以便于用户按照自己的习惯命名和使用文件。</p>
</blockquote>
</li>
</ul>
<h4 id="文件目录结构"><a href="#文件目录结构" class="headerlink" title="文件目录结构"></a>文件目录结构</h4><h5 id="l一级目录结构"><a href="#l一级目录结构" class="headerlink" title="l一级目录结构"></a>l<strong>一级目录结构</strong></h5><ul>
<li>为外存上的全部文件设立一张平面（flat）的目录表，包含所有文件的FCB。每建立一个新文件即在目录中增加一个FCB，每当删除一个文件即抹去对应的FCB，当要访问一个文件时，先按文件名在目录中找到对应的文件FCB。<br>为了快速查找到文件FCB，可按文件名进行Hash，或其它快速查找方式</li>
<li>优点：简单<br>缺点：<br>1、查找速度慢<br>2、<strong>不允许重名</strong><br>3、不便于实现文件共享</li>
</ul>
<h5 id="l二级目录结构"><a href="#l二级目录结构" class="headerlink" title="l二级目录结构"></a>l<strong>二级目录结构</strong></h5><ul>
<li>设一个主目录MFD，为系统的每个用户设用户目录UFD，用户目录是用户所有文件FCB的集合，主目录中存放每个用户目录的用户目录名和UFD的索引表等（当我们把UFD看作是一个文件时，这个文件的内容是用户所有文件FCB集合，MFD中则包含每个UFD文件的FCB</li>
<li>路径名<br>将用户名与文件名连到一起组成路径名。例如：&#x2F;songhong&#x2F;test.c</li>
</ul>
<h5 id="多级目录——树形目录结构"><a href="#多级目录——树形目录结构" class="headerlink" title="多级目录——树形目录结构"></a>多级目录——树形目录结构</h5><ul>
<li><p>树状的多级目录结构<br>任何一级目录中的FCB既可以描述次一级的子目录，又可以描述一个文件</p>
</li>
<li><p>特点:</p>
</li>
<li><ul>
<li><blockquote>
<p>利于文件分类，从文件路径名可看出文件类别。<br>查找文件FCB耗费时间，要得到文件FCB，必须从根查起。<br>唯一确定文件的路径名太长，故引入当前目录 概念，提供相对于当前目录的相对路径名可加速文件FCB的查找，进程控制块存有当前目录信息</p>
</blockquote>
</li>
</ul>
</li>
<li><p>访问</p>
</li>
<li><blockquote>
<p>必须指出文件所在路径名：从根目录到该文件的路径上各级目录名的组合。也称为文件全名。<br>例如：&#x2F;usr&#x2F;lib&#x2F;man<br>相对路径：设置一个“当前目录”(也叫“工作目录”)，此时对于文件的查找是从当前目录中进行的。可以带来两点好处：<br>用户使用更加方便<br>检索效率更高</p>
</blockquote>
</li>
<li><p>优缺点</p>
<blockquote>
<p>l<strong>树形多级目录结构的优点</strong></p>
<p>•<strong>提高了检索目录的速度。</strong></p>
<p>•<strong>较好地解决了重名问题。</strong></p>
<p>l<strong>缺点</strong></p>
<p><strong>不便于用户共享文件</strong></p>
</blockquote>
</li>
</ul>
<h5 id="无环图目录结构"><a href="#无环图目录结构" class="headerlink" title="无环图目录结构"></a>无环图目录结构</h5><h6 id="当一个文件副本可以同时属于两个不同目录（类别）时，即同一个文件有二条路径名，或多条路径名时出现无环图目录结构。"><a href="#当一个文件副本可以同时属于两个不同目录（类别）时，即同一个文件有二条路径名，或多条路径名时出现无环图目录结构。" class="headerlink" title="当一个文件副本可以同时属于两个不同目录（类别）时，即同一个文件有二条路径名，或多条路径名时出现无环图目录结构。"></a>当一个文件副本可以同时属于两个不同目录（类别）时，即同一个文件有二条路径名，或多条路径名时出现无环图目录结构。</h6><h6 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h6><p>方便文件共享，分类。<br>两个或多个FCB的一致性难保证，因此将FCB独立存放，引入带文件&#x2F;目录名和FCB指针的目录项</p>
<p><img src="https://s2.loli.net/2021/12/07/ADfc3PNnYOdbeiH.png" alt="image-20211130092527762"></p>
<h4 id="文件共享"><a href="#文件共享" class="headerlink" title="文件共享"></a>文件共享</h4><ol>
<li><h5 id="硬链接-hard-link"><a href="#硬链接-hard-link" class="headerlink" title="硬链接(hard link)"></a>硬链接(hard link)</h5><ol>
<li>指向同一个索引结点</li>
</ol>
</li>
<li><p>符号链接</p>
<ol>
<li>建立符号链文件,该文件内容为要访问文件的路径名</li>
</ol>
</li>
</ol>
<h2 id="文件存储器空间布局与管理"><a href="#文件存储器空间布局与管理" class="headerlink" title="文件存储器空间布局与管理"></a>文件存储器空间布局与管理</h2><h4 id="空闲区表"><a href="#空闲区表" class="headerlink" title="空闲区表"></a>空闲区表</h4><p><img src="https://s2.loli.net/2021/12/07/H2of5R3Lx7AGNwm.png" alt="image-20211203133204515"></p>
<h4 id="位示图"><a href="#位示图" class="headerlink" title="位示图"></a>位示图</h4><p><img src="https://s2.loli.net/2021/12/07/knsUycY9irLAS1G.png" alt="image-20211203133252860"></p>
<p><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211203133418295.png" alt="image-20211203133418295"></p>
<h4 id="空闲块链"><a href="#空闲块链" class="headerlink" title="空闲块链"></a>空闲块链</h4><p><img src="https://s2.loli.net/2021/12/07/LH76uxTbrA3FSno.png" alt="image-20211203134255752"></p>
<p><img src="https://s2.loli.net/2021/12/07/FQnjZpyWuqCd6El.png" alt="image-20211203135715385"></p>
<p><img src="https://s2.loli.net/2021/12/07/irJzfKHgLs96TBE.png" alt="image-20211203140034820"></p>
]]></content>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络复习</title>
    <url>/2021-12-11-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A0.html</url>
    <content><![CDATA[<h1 id="计网复习"><a href="#计网复习" class="headerlink" title="计网复习"></a>计网复习</h1><h2 id="大纲"><a href="#大纲" class="headerlink" title="大纲"></a>大纲</h2><p>[toc]</p>
<h2 id="1-计算机网络体系结构"><a href="#1-计算机网络体系结构" class="headerlink" title="1. 计算机网络体系结构"></a>1. 计算机网络体系结构</h2><h3 id="1-1-计算机网络概述"><a href="#1-1-计算机网络概述" class="headerlink" title="1.1  计算机网络概述"></a>1.1  计算机网络概述</h3><h4 id="1-1-1计算机网络的概念、组成"><a href="#1-1-1计算机网络的概念、组成" class="headerlink" title="1.1.1计算机网络的概念、组成"></a>1.1.1计算机网络的概念、组成</h4><p>概念</p>
<blockquote>
<p>计算机网络就是通过交换机,路由器等网络设备和通信线路将分散在不同地理位置的多个计算机系统连接起来,在网络协议和应用软件的控制下实现各种网络服务的系统.</p>
<ul>
<li>资源共享-最终目的</li>
<li>数据通信-资源共享的前提</li>
</ul>
</blockquote>
<p>网络的结构</p>
<blockquote>
<ul>
<li><p>网络边缘(network edge)-服务端和客户端</p>
<ul>
<li><p>服务端功能:发送分组数据</p>
<blockquote>
<p>收到应用数据-&gt;拆解为小组块-&gt;以R传输速率(带宽bandwidth)进行传输</p>
<p>传输延迟$L_{比特数}&#x2F;R_{传输速率}$</p>
</blockquote>
</li>
</ul>
<hr>
</li>
<li><p>接入网络(access networks)-物理介质</p>
<ul>
<li><p>物理层: 发送端和接收端之间</p>
</li>
<li><p>导引型介质(guided media)</p>
<ul>
<li><p>固体介质-铜线,光纤(optical fiber),同轴电缆(coaxial cable)</p>
<blockquote>
<p>双绞线:螺旋排列减小电磁干扰</p>
<p>同轴电缆:单信道&#x2F;多信道</p>
<p>光纤:光脉冲,低差错率,无电磁干扰</p>
</blockquote>
</li>
</ul>
</li>
<li><p>非导引型介质(unguided media)</p>
<ul>
<li>自由发信号</li>
<li>e.g. 无线电</li>
</ul>
</li>
</ul>
</li>
<li><p>网络核心(network core)-互联的路由器</p>
<ul>
<li><p>路由器网络</p>
</li>
<li><p>分组交换</p>
<blockquote>
<p>主机把报文分解成分组</p>
<p>网络核心转发分组(从源头到目的)-</p>
<blockquote>
<p>单个分组传输到相邻节点，存储下来后查转发表，转发到下一节点。</p>
</blockquote>
</blockquote>
</li>
</ul>
</li>
</ul>
</blockquote>
<h4 id="1-1-2计算机网络的分类"><a href="#1-1-2计算机网络的分类" class="headerlink" title="1.1.2计算机网络的分类"></a>1.1.2计算机网络的分类</h4><ul>
<li><ol>
<li><p>Transmission technology传输技术<br>广播链路</p>
<p><img src="https://s2.loli.net/2021/12/10/NuIQEO7LD1os5cP.png" alt="image-20211210103557833">点到点链路<br><img src="https://s2.loli.net/2021/12/10/sZGIdi3TYz1kU8j.png" alt="image-20211210103606005"></p>
</li>
</ol>
</li>
<li><ol start="2">
<li>Scale距离尺度<br>局域网LAN 10<del>1km<br>城域网MAN 1km</del>10km<br>广域网WAN 100km~</li>
</ol>
</li>
<li><ol start="3">
<li>Topology拓扑结构<br>星形什么的,看名字就知道了</li>
</ol>
</li>
<li><ol start="4">
<li>Switching交换<ol>
<li>Packet Switching 分组交换</li>
<li>Circuit Switching 电路交换</li>
</ol>
</li>
</ol>
</li>
</ul>
<h4 id="1-1-3计算机网络与互联网的发展历史-不考"><a href="#1-1-3计算机网络与互联网的发展历史-不考" class="headerlink" title="1.1.3计算机网络与互联网的发展历史[不考]"></a>1.1.3计算机网络与互联网的发展历史[不考]</h4><p>1961-1972: Early packet-switching principles 分组交换的发展</p>
<p>1972-1980: Internetworking, new and proprietary nets网络互联.专用网络<br>1980-1990: new protocols, a proliferation of networks网络的激增<br>1990, 2000’s: commercialization, the Web, new apps 商业化</p>
<p>2005-present</p>
<h4 id="1-1-4计算机网络的标准化工作及相关组织-不考"><a href="#1-1-4计算机网络的标准化工作及相关组织-不考" class="headerlink" title="1.1.4计算机网络的标准化工作及相关组织[不考]"></a>1.1.4计算机网络的标准化工作及相关组织[不考]</h4><p>IETF(因特网工程任务组)</p>
<p>IEEE802-局域网&#x2F;城域网标准委员会,指定相关标准</p>
<h3 id="1-2计算机网络体系结构与参考模型"><a href="#1-2计算机网络体系结构与参考模型" class="headerlink" title="1.2计算机网络体系结构与参考模型"></a>1.2计算机网络体系结构与参考模型</h3><h4 id="1-2-1计算机网络分层结构"><a href="#1-2-1计算机网络分层结构" class="headerlink" title="1.2.1计算机网络分层结构"></a>1.2.1计算机网络分层结构</h4><h4 id="1-2-2计算机网络协议、接口、服务等概念"><a href="#1-2-2计算机网络协议、接口、服务等概念" class="headerlink" title="1.2.2计算机网络协议、接口、服务等概念"></a>1.2.2计算机网络协议、接口、服务等概念</h4><p>服务:  层的功能</p>
<p>协议: 同一层的对等实体间的交流服务</p>
<p>接口: 告诉上层如何访问</p>
<h4 id="1-2-3ISO-x2F-OSI参考模型和TCP-x2F-IP模型"><a href="#1-2-3ISO-x2F-OSI参考模型和TCP-x2F-IP模型" class="headerlink" title="1.2.3ISO&#x2F;OSI参考模型和TCP&#x2F;IP模型"></a>1.2.3ISO&#x2F;OSI参考模型和TCP&#x2F;IP模型</h4><p>ISO&#x2F;OSI 参考模型</p>
<blockquote>
<p>ISO: international Standards Organization</p>
<p>OSI: Open Systems Interconnection</p>
<blockquote>
<p>• application: 支持网络应用<br>• presentation:允许应用程序解释数据的意义，如加密、压缩<br>• session: 数据交换的同步，检查和恢复<br>• transport:进程到进程的数据传输(端到端)<br>• network:为数据报选择从源主机到目的主机 的路径<br>• data link:在邻近网元之间传输数据</p>
<p>• physical:在介质上传输原始比特</p>
</blockquote>
</blockquote>
<p>TCP&#x2F;IP 参考模型</p>
<blockquote>
<p>协议栈</p>
<p><img src="https://s2.loli.net/2021/12/10/kUG5MQbEuSVAtI6.png" alt="image-20211210105419434"></p>
</blockquote>
<p>下图左为OSI,右为TCP&#x2F;IP</p>
<img src="https://s2.loli.net/2021/12/10/ltNP7Wk8KSEbDqo.png" alt="image-20211210105133165" style="zoom: 67%;" />

<p><strong>混合模型(Hybrid Model)</strong></p>
<p>本课程使用的模型</p>
<p><img src="https://s2.loli.net/2021/12/10/iQgX5ac8sJFutrI.png" alt="image-20211210105705057"></p>
<h4 id="传世经典-bushi-数据传输过程中在各层发生的变化"><a href="#传世经典-bushi-数据传输过程中在各层发生的变化" class="headerlink" title="传世经典(bushi)-数据传输过程中在各层发生的变化"></a>传世经典(bushi)-数据传输过程中在各层发生的变化</h4><p><img src="https://s2.loli.net/2021/12/10/1K3IgykaHvdcUsb.png" alt="image-20211210105729673"></p>
<h3 id="1-3计算机网络性能指标"><a href="#1-3计算机网络性能指标" class="headerlink" title="1.3计算机网络性能指标"></a>1.3计算机网络性能指标</h3><p>吞吐量Throughput-传输位数&#x2F;传输时间</p>
<ul>
<li>带宽是吞吐量的绝对上限</li>
</ul>
<p>带宽 Bandwidth</p>
<blockquote>
<p>在单位时间内,从网络中的某一点到另一点所能通过的位数</p>
</blockquote>
<p>时延&#x2F;延迟 Delay</p>
<blockquote>
<p>一个数据库从网络的一端传送到另一端所需要的时间</p>
<p>时延&#x3D;处理时延+排队时延+传输时延+传播时延</p>
<ul>
<li>传输时延-数据量&#x2F;带宽</li>
<li>传播时延-传输距离&#x2F;光速</li>
<li>往返时延(RTT)-从发送端发出,到发送端收到接收端的确认的总时延</li>
</ul>
<ul>
<li>端到端时延-分组从源主机到目的主机路径上每个节点时延的总和</li>
<li>时延带宽积-传播时延*带宽</li>
</ul>
<p>　</p>
</blockquote>
<h2 id="2-应用层"><a href="#2-应用层" class="headerlink" title="2. 应用层"></a>2. 应用层</h2><h3 id="2-1-应用层协议原理"><a href="#2-1-应用层协议原理" class="headerlink" title="2.1  应用层协议原理"></a>2.1  应用层协议原理</h3><h4 id="2-1-1网络应用程序的体系结构"><a href="#2-1-1网络应用程序的体系结构" class="headerlink" title="2.1.1网络应用程序的体系结构"></a>2.1.1网络应用程序的体系结构</h4><h5 id="Client-Server-C-x2F-S"><a href="#Client-Server-C-x2F-S" class="headerlink" title="Client-Server(C&#x2F;S)"></a>Client-Server(C&#x2F;S)</h5><p>server:</p>
<blockquote>
<p>永远在线</p>
<p>永久ip</p>
<p>服务器集群增强可扩展性</p>
</blockquote>
<p>client</p>
<blockquote>
<p>与服务器交互</p>
<p>动态IP地址</p>
<p>客户机之间不直接通信</p>
</blockquote>
<h5 id="Peer-to-Peer-P2P"><a href="#Peer-to-Peer-P2P" class="headerlink" title="Peer-to-Peer(P2P)"></a>Peer-to-Peer(P2P)</h5><blockquote>
<p>没有长期存在的服务端</p>
<p>端系统之间直接通信</p>
<p>对等方向其他对等方(Peer)请求服务,同时给其他peer提供服务</p>
<p>对等方间歇性连接,IP可变</p>
</blockquote>
<h4 id="2-1-2可供应用层使用的传输层服务"><a href="#2-1-2可供应用层使用的传输层服务" class="headerlink" title="2.1.2可供应用层使用的传输层服务"></a>2.1.2可供应用层使用的传输层服务</h4><p>app需要什么?</p>
<blockquote>
<p>数据完整性</p>
<p>吞吐量</p>
<p>时效性</p>
<p>安全性</p>
</blockquote>
<p>TCP</p>
<blockquote>
<p>提供</p>
<ul>
<li>面向连接</li>
<li>可靠传输</li>
<li>流量控制</li>
<li>拥塞控制</li>
</ul>
<p>不提供</p>
<ul>
<li>定时(时效性)</li>
<li>最小带宽保证</li>
</ul>
</blockquote>
<p>UDP</p>
<blockquote>
<p>不可靠数据传输</p>
<p>不提供</p>
<blockquote>
<p>流量控制</p>
<p>连接建立</p>
<p>可靠性</p>
<p>拥塞控制</p>
<p>时效性</p>
<p>最小带宽保证</p>
</blockquote>
</blockquote>
<h5 id="因特网使用的应用层协议和传输层协议"><a href="#因特网使用的应用层协议和传输层协议" class="headerlink" title="因特网使用的应用层协议和传输层协议"></a>因特网使用的应用层协议和传输层协议</h5><p><img src="https://s2.loli.net/2021/12/10/VqOfA9pZeRUbgP6.png" alt="image-20211210111555991"></p>
<h3 id="2-2应用层协议"><a href="#2-2应用层协议" class="headerlink" title="2.2应用层协议"></a>2.2应用层协议</h3><h4 id="2-2-1Web和HTTP"><a href="#2-2-1Web和HTTP" class="headerlink" title="2.2.1Web和HTTP"></a>2.2.1Web和HTTP</h4><p>http:超文本传输协议</p>
<blockquote>
<p>使用TCP协议</p>
<ul>
<li>客户端初始化传输端口,发送给服务端</li>
<li>服务端接受连接请求</li>
<li>交换信息</li>
<li>连接关闭</li>
</ul>
<p>非持久http: 每个连接只发送一个对象(HTTP&#x2F;1.0)</p>
<p>例子</p>
<ul>
<li><blockquote>
<img src="https://s2.loli.net/2021/12/10/TACsGaltIMWcuV9.png" alt="image-20211210125021314" style="zoom: 50%;" />
</blockquote>
</li>
</ul>
<p>持久http:每个连接发送多个对象(HTTP&#x2F;1.1)</p>
<p>过程</p>
<ul>
<li>客户端初始化连接</li>
<li>服务端接受</li>
<li>下面步骤*n<ul>
<li>客户端发送请求</li>
<li>服务端发送数据</li>
<li>客户端收到数据</li>
</ul>
</li>
<li>服务端关掉连接</li>
</ul>
<p>例子</p>
<ul>
<li><blockquote>
<img src="https://s2.loli.net/2021/12/10/rmEoMSwhUeKlQDC.png" alt="image-20211210125349254" style="zoom:50%;" />
</blockquote>
</li>
</ul>
<h5 id="HTTP请求报文"><a href="#HTTP请求报文" class="headerlink" title="HTTP请求报文"></a>HTTP请求报文</h5><p>两种type: 请求和响应</p>
<p>请求报文样式:</p>
<p>请求行 报头 空白行 正文</p>
<p>GET &#x2F;somedir&#x2F;page.html HTTP&#x2F;1.1 –请求</p>
<p>Host: <a href="http://www.someschool.edu/">www.someschool.edu</a> User-agent: Mozilla&#x2F;4.0 Connection: close Accept-language:fr–报头</p>
<h5 id="无状态-Statelessness-和Cookies"><a href="#无状态-Statelessness-和Cookies" class="headerlink" title="无状态(Statelessness)和Cookies"></a>无状态(Statelessness)和Cookies</h5><p>无状态-服务器不保留有关客户过去请求的任何信息</p>
<p>Cookies</p>
<p>一个小文件&#x2F;字符串,使得服务端能够跟踪用户</p>
<p>实现</p>
<blockquote>
<p>在Http响应报文上加上set-cookie头</p>
<p>请求报文上加入cookie报头</p>
<p>cookie文件留在用户本地,用浏览器管理</p>
<p>在服务端留有后端的服务器存储用户真正信息</p>
<img src="https://s2.loli.net/2021/12/10/jusTCPctzBdprS5.png" alt="image-20211210174626429" style="zoom:50%;" />

</blockquote>
<h5 id="Web缓存-代理服务器"><a href="#Web缓存-代理服务器" class="headerlink" title="Web缓存 -代理服务器"></a>Web缓存 -代理服务器</h5><p>目的:缩短对客户请求的响应时间,减少组织接入链路上的流量</p>
<p>用户浏览器:通过缓存访问网站</p>
<p>浏览器把所有的HTTP响应发送给cache</p>
<ul>
<li>条件GET<br>如果缓存中有最新缓存版本,就不发送该对象</li>
</ul>
</blockquote>
<h4 id="2-2-2FTP-不考"><a href="#2-2-2FTP-不考" class="headerlink" title="2.2.2FTP[不考]"></a>2.2.2FTP[不考]</h4><h4 id="2-2-3Electronic-Mail——SMTP-POP3-IMAP"><a href="#2-2-3Electronic-Mail——SMTP-POP3-IMAP" class="headerlink" title="2.2.3Electronic  Mail——SMTP, POP3, IMAP"></a>2.2.3Electronic  Mail——SMTP, POP3, IMAP</h4><p>关键组件:</p>
<blockquote>
<p>用户代理</p>
<ul>
<li><blockquote>
<p>邮件阅读者</p>
<p>撰写,编辑,阅读邮件</p>
<p>发送&#x2F;接收在server上存储的邮件</p>
</blockquote>
</li>
</ul>
<p>邮件服务器</p>
<ul>
<li><blockquote>
<p>mailbox 保留用户收到的信息</p>
<p>为发送的邮件信息创建发送队列</p>
<p>在server中间提供SMTP协议服务,用来发送邮件</p>
</blockquote>
</li>
</ul>
</blockquote>
<p>示意图</p>
<img src="https://s2.loli.net/2021/12/10/G974CuNFSgmHY6x.png" alt="image-20211210175052267" style="zoom:67%;" />

<p>邮件发送协议:</p>
<ul>
<li>SMTP:简单邮件传输协议</li>
<li>MIME:通用因特网邮件拓展<br>SMTP只能传输ASCII码,不能传输二进制数据,MIME允许二进制数据以ASCII编码</li>
</ul>
<p>邮件读取协议:</p>
<ul>
<li>pop:邮局协议 Post Office Protocol<br>授权+下载</li>
<li>IMAP:因特网报文读取协议<br>更多功能<br>操作存储在服务器上的报文</li>
<li>HTTP: gmail,Hotmail,Yahoo!Mail</li>
</ul>
<h4 id="2-2-4DNS-域名系统"><a href="#2-2-4DNS-域名系统" class="headerlink" title="2.2.4DNS 域名系统"></a>2.2.4DNS 域名系统</h4><p>提供的服务</p>
<blockquote>
<p>主机名到ip的翻译</p>
<p>主机别名</p>
<p>邮件服务器错误识别</p>
<p>负载分配(即一个主机名对应一组IP地址)</p>
</blockquote>
<h5 id="分布式层次化数据库"><a href="#分布式层次化数据库" class="headerlink" title="分布式层次化数据库"></a>分布式层次化数据库</h5><p><img src="https://s2.loli.net/2021/12/10/KxSiLqzaPj1Hy3Y.png" alt="image-20211210182515156"></p>
<p>访问<a href="http://www.amazon.com的过程/">www.amazon.com的过程</a></p>
<p>客户-&gt;root,得到com server</p>
<p>客户-&gt;com server 得到 amazon.com DNS server</p>
<p>客户-&gt;amazon.com DNS server 得到对应ip地址</p>
<h5 id="本地域名服务器"><a href="#本地域名服务器" class="headerlink" title="本地域名服务器"></a>本地域名服务器</h5><p>大学&#x2F;公司内部搭建</p>
<p>主机创建DNS请求的时候,先送到本地DNS server</p>
<h5 id="域名解析例子"><a href="#域名解析例子" class="headerlink" title="域名解析例子"></a>域名解析例子</h5><h5 id="DNS-Protocol"><a href="#DNS-Protocol" class="headerlink" title="DNS Protocol"></a>DNS Protocol</h5><p>使用UDP协议的53号端口传输</p>
<h4 id="2-2-5P2P-不考"><a href="#2-2-5P2P-不考" class="headerlink" title="2.2.5P2P[不考]"></a>2.2.5P2P[不考]</h4><h3 id="2-3网络编程-不考"><a href="#2-3网络编程-不考" class="headerlink" title="2.3网络编程[不考]"></a>2.3网络编程[不考]</h3><h4 id="网络应用程序编程接口-套接字-不考"><a href="#网络应用程序编程接口-套接字-不考" class="headerlink" title="网络应用程序编程接口-套接字[不考]"></a>网络应用程序编程接口-套接字[不考]</h4><h2 id="3-传输层"><a href="#3-传输层" class="headerlink" title="3.传输层"></a>3.传输层</h2><h3 id="3-1传输层提供的服务"><a href="#3-1传输层提供的服务" class="headerlink" title="3.1传输层提供的服务"></a>3.1传输层提供的服务</h3><h4 id="3-1-1传输层的功能"><a href="#3-1-1传输层的功能" class="headerlink" title="3.1.1传输层的功能"></a>3.1.1传输层的功能</h4><p>为运行在不同主机上的应用进程之间提供逻辑通信</p>
<ul>
<li>端到端</li>
<li>依赖并强化网络层服务</li>
</ul>
<h4 id="3-1-2无连接服务与面向连接服务"><a href="#3-1-2无连接服务与面向连接服务" class="headerlink" title="3.1.2无连接服务与面向连接服务"></a>3.1.2无连接服务与面向连接服务</h4><p>无连接:无握手</p>
<p>面向连接:数据交换前通过握手初始化发送方与接收方的服务</p>
<h4 id="3-1-3传输层寻址与端口"><a href="#3-1-3传输层寻址与端口" class="headerlink" title="3.1.3传输层寻址与端口"></a>3.1.3传输层寻址与端口</h4><p>传输层寻址通过TCP和UDP的端口实现</p>
<blockquote>
<p>TCP&#x2F;IP:0~65535</p>
<ul>
<li>0~ 1023:标准端口,用于特定服务</li>
<li>其余临时端口</li>
</ul>
</blockquote>
<p>不同的端口表示不同的应用程序</p>
<h3 id="3-2无连接的传输协议——UDP"><a href="#3-2无连接的传输协议——UDP" class="headerlink" title="3.2无连接的传输协议——UDP"></a>3.2无连接的传输协议——UDP</h3><h5 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h5><blockquote>
<p>尽力而为(会丢包,顺序会乱)</p>
<p>无连接-没有握手,每个报文的处理<strong>与其他报文独立</strong></p>
<p>经常被流媒体使用(能容忍丢包,对时间敏感)</p>
</blockquote>
<p>DNS和SNMP是用UDP的</p>
<p>UDP格式</p>
<table>
<thead>
<tr>
<th>源端口(16bit</th>
<th>目的端口(16bit)</th>
<th>长度(16bit)</th>
<th>校验和(16bit)</th>
<th>报文</th>
</tr>
</thead>
</table>
<p>UDP校验和计算</p>
<p>临时把伪首部(12字节IP首部)和数据报连接在一起,用于检验是否在正确的端点之间传送</p>
<p>计算校验和</p>
<p>过程</p>
<p><img src="https://s2.loli.net/2021/12/10/I9pQY8KlRjohZyA.png" alt="image-20211210184555287"></p>
<p>反码求和</p>
<img src="https://s2.loli.net/2021/12/10/ZqitAIKD9MhWFBX.png" alt="image-20211210184821480" style="zoom: 67%;" />

<p>校验和例子</p>
<img src="https://s2.loli.net/2021/12/10/pRzSETGZjBvb4UI.png" alt="image-20211210185822703" style="zoom:67%;" />

<h3 id="3-3可靠数据传输的原理"><a href="#3-3可靠数据传输的原理" class="headerlink" title="3.3可靠数据传输的原理"></a>3.3可靠数据传输的原理</h3><p>目的</p>
<blockquote>
<p>数据位不被损坏</p>
<p>没有数据丢失</p>
<p>数据以发送顺序被传输</p>
</blockquote>
<p>总结-要在非可靠信道上提供可靠的数据通信</p>
<p>基础操作</p>
<blockquote>
<p>ARQ自动重传请求:接收方发现错误&#x2F;丢失分组后要求发送方重传</p>
<p>错误分组检测-校验和</p>
<p>丢失分组-确认,超时</p>
<p>重传(Retransmit)</p>
</blockquote>
<h4 id="3-3-1停止-等待协议（SW）"><a href="#3-3-1停止-等待协议（SW）" class="headerlink" title="3.3.1停止-等待协议（SW）"></a>3.3.1停止-等待协议（SW）</h4><p>发送方发送一个分组后,必须停下来等待接收方确认后才可以发送下一个分组</p>
<p>错误处理:收到错误分组,接收方发送否定确认,让发送方重发</p>
<p>丢失处理:发送方内部设置定时器,超过定时时间还未收到ACK确认,则重发</p>
<p>处理重复分组:给每个分组带上序号(模$2^n$)</p>
<h5 id="性能分析及计算"><a href="#性能分析及计算" class="headerlink" title="性能分析及计算"></a>性能分析及计算</h5><img src="https://s2.loli.net/2021/12/10/2slXqwbBa5x9Ym8.png" alt="image-20211210190424127" style="zoom:67%;" />

<h4 id="3-3-2回退N协议（GBN）"><a href="#3-3-2回退N协议（GBN）" class="headerlink" title="3.3.2回退N协议（GBN）"></a>3.3.2回退N协议（GBN）</h4><p>发送方</p>
<blockquote>
<p>在收到确认前可以发送多个分组</p>
<p>发送窗口$W_s$最大为$2^n-1$</p>
<p>每发送一个分组后,就启动内部计时器,若超时未收到确认,则重发该分组之后已发送的N个分组</p>
<p><img src="https://s2.loli.net/2021/12/10/BhjV1KgSrJ6xXiL.png" alt="image-20211210193707525"></p>
</blockquote>
<p>接收方</p>
<blockquote>
<p>接收方只能缓冲一个分组</p>
<p>接收方只对按序到达的最后一个分组发送确认分组(因此对乱序分组会产生重复的确认分组)</p>
</blockquote>
<p>序号:</p>
<ul>
<li>是模2^n的,n是字段的位数</li>
</ul>
<h4 id="3-3-3选择重传协议（SR）"><a href="#3-3-3选择重传协议（SR）" class="headerlink" title="3.3.3选择重传协议（SR）"></a>3.3.3选择重传协议（SR）</h4><p>避免不必要的重传</p>
<img src="https://s2.loli.net/2021/12/10/Uux89IdRoSOX1VW.png" alt="image-20211210194222054" style="zoom:50%;" />

<p>接收方</p>
<blockquote>
<p>接逐个确认接收到的每一个分组</p>
<p>发现某个分组出错后,其后继续送来的正确分组还是被接收,放在缓冲区中,同时要求发送方重新传送出错分组</p>
</blockquote>
<p>发送方</p>
<blockquote>
<p>只有在接收窗口向前滑动时,发送窗口才有可能向前滑动</p>
<p>即$W_S&gt;&#x3D;W_R$ 且 $W_s+W_R&lt;&#x3D;2^n$</p>
<p>窗口长度&lt;&#x3D;$2^{n-1}$</p>
</blockquote>
<h4 id="3-3-4滑动窗口机制（可用于实现不同可靠传输协议）"><a href="#3-3-4滑动窗口机制（可用于实现不同可靠传输协议）" class="headerlink" title="3.3.4滑动窗口机制（可用于实现不同可靠传输协议）"></a>3.3.4滑动窗口机制（可用于实现不同可靠传输协议）</h4><p>流水线协议&#x2F;连续ARQ(也叫<code>&lt;u&gt;</code>滑动窗口协议<code>&lt;/u&gt;</code>)</p>
<p>当发送端等待确认时,我们需要传输多个分组来提高利用率</p>
<p>Pipeling: 允许发送方发送多个未被确认的分组</p>
<p>概念</p>
<blockquote>
<p>发送窗口: 发送方在没收到确认的情况下,能够连续发送的分组的序号表<br><code>&lt;img src=&quot;https://s2.loli.net/2021/12/10/wgjTx5c3aqrCoHD.png&quot; alt=&quot;image-20211210191530175&quot; style=&quot;zoom:50%;&quot; /&gt;</code></p>
<ul>
<li>大小:$W_s$</li>
<li>下界表示未得到确认的分组的最小序号</li>
</ul>
<p>接收窗口: 希望接收的分组的序号表<br><img src="https://s2.loli.net/2021/12/10/hmAcMeU8rnJSRo6.png" alt="image-20211210191655633"></p>
<ul>
<li>大小$W_R$</li>
<li>上界表示允许接收的分组的最大序号,下界表示希望接收的下一个分组的序号</li>
<li>若序号等于下界的分组被正确接收,并发送一个确认分组,上下界都加1,接收窗口向前滑动一次</li>
</ul>
</blockquote>
<h3 id="3-4面向连接的传输协议——-TCP"><a href="#3-4面向连接的传输协议——-TCP" class="headerlink" title="3.4面向连接的传输协议——  TCP"></a>3.4面向连接的传输协议——  TCP</h3><h5 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h5><blockquote>
<p>点到点</p>
<p>可靠有序的字节流-没有报文边界</p>
<p>流水线-拥塞控制和流量控制设置窗口大小</p>
<p>全双工数据-双方可以同时发送和接收</p>
<blockquote>
<p>要求每一端都有两个窗口</p>
</blockquote>
<p>流量控制</p>
<p>面向连接</p>
<p>拥塞控制</p>
</blockquote>
<h4 id="3-4-1TCP报文段"><a href="#3-4-1TCP报文段" class="headerlink" title="3.4.1TCP报文段"></a>3.4.1TCP报文段</h4><h5 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h5><img src="https://s2.loli.net/2021/12/10/CSMJdhjeIPrOHLm.png" alt="image-20211210194733680" style="zoom:50%;" />

<p>解释</p>
<ul>
<li><p>源端口和目的端口-2字节&#x2F;each,</p>
</li>
<li><p>序号-每字节都有序号,序号字段存储发送字节的第一个的序号</p>
</li>
<li><p>确认号-希望收到下一个保温段的数据的第一个字节的序号<br>TCP使用累积确认</p>
</li>
<li><p>一些特殊位</p>
<blockquote>
<p>URG-紧急</p>
<p>ACK-1时确认号字段有效</p>
<p>PSH-尽快交付(不等待缓存写满)</p>
<p>RST-reset 复位,重新建立连接</p>
<p>SYN-如果为1表示这是个连接请求</p>
<p>FIN-1的话释放连接</p>
</blockquote>
</li>
<li><p>校验和-检验首部和数据</p>
</li>
</ul>
<h4 id="3-4-2TCP可靠传输"><a href="#3-4-2TCP可靠传输" class="headerlink" title="3.4.2TCP可靠传输"></a>3.4.2TCP可靠传输</h4><p>用字节序号进行控制</p>
<p>过程模拟</p>
<blockquote>
<p>B给出通告窗口值20-&gt;A构造长为20的发送窗口(31~50)</p>
<p>A发送11字节数据,此时还剩9字节可被发送</p>
<p>B接收窗口也为20,收到3字节,发送确认号33-&gt;A窗口移动到(34~53)</p>
<p>B窗口也滑动到34</p>
</blockquote>
<p>重传计时器***</p>
<p>四个窗口(两发两收)动态变化</p>
<h4 id="3-4-3TCP流量控制"><a href="#3-4-3TCP流量控制" class="headerlink" title="3.4.3TCP流量控制"></a>3.4.3TCP流量控制</h4><p>目的:让发送方速率不要太快,让接收方来得及接收</p>
<p>利用滑动窗口机制实现</p>
<p>如果接收端顶不住发送端了,缓冲区被全部占用,就只能发送一个零通告窗口</p>
<p>发送端收到零通告窗口后停止发送,直到等到接收端发送一个非零的通告窗口</p>
<ul>
<li>持续计时器<br>收到零通告窗口时启动,如果持续时间到期,就发送一个探测报文段,请求一个对方的通告窗口<br>如果还是零,就重设计时器</li>
</ul>
<h4 id="3-4-4TCP连接管理-不考"><a href="#3-4-4TCP连接管理-不考" class="headerlink" title="3.4.4TCP连接管理[不考]"></a>3.4.4TCP连接管理[不考]</h4><h4 id="3-4-5TCP拥塞控制"><a href="#3-4-5TCP拥塞控制" class="headerlink" title="3.4.5TCP拥塞控制"></a>3.4.5TCP拥塞控制</h4><p>太多的源太快地发送太多的数据,使网络来不及处理</p>
<p>表现:丢包(路由器缓冲区溢出)</p>
<p>长时延(缓冲区中排队)</p>
<p>作用: 提高吞吐量</p>
<p><img src="https://s2.loli.net/2021/12/10/UMDJeWx3bX9QsZR.png" alt="image-20211210202844398"></p>
<h5 id="与流量控制的区别"><a href="#与流量控制的区别" class="headerlink" title="与流量控制的区别"></a>与流量控制的区别</h5><blockquote>
<p>拥塞控制</p>
<ul>
<li>需要确保通信子网能够承载用户提交的通信两,是一个全局性过程,涉及主机,路由器等很多因素</li>
</ul>
<p>流量控制</p>
<ul>
<li>与点到点的通信量有关,主要解决快速发送方与慢速发送方的问题,是局部过程</li>
</ul>
</blockquote>
<h5 id="拥塞控制方法"><a href="#拥塞控制方法" class="headerlink" title="拥塞控制方法"></a>拥塞控制方法</h5><p>发送方维持一个拥塞窗口cwnd,其大小取决于网络拥塞程度,且动态变化</p>
<blockquote>
<p>网络不堵塞,拥塞窗口增大一些</p>
<p>堵塞就把它减少一些</p>
</blockquote>
<p>发送方发送窗口的上限为接收方通告窗口[rwnd]和拥塞窗口[cwnd]中较小的一个</p>
<p>四种办法</p>
<blockquote>
<ol>
<li><p>慢开始&#x2F;启动<br>cwnd初始化为1<br>每收到一个对应确认,cwnd+&#x3D;1<br><img src="https://s2.loli.net/2021/12/10/Z7juwLIF8U69mBy.png" alt="image-20211210203322561"><br>每经过一个传输轮次,cwnd*&#x3D;2,时间为RTT</p>
</li>
<li><p>拥塞避免<br>每经过一个RTT,拥塞窗口+1,缓慢增长</p>
<ul>
<li><p>慢开始门限ssthresh</p>
<blockquote>
<p>cwnd&lt;ssthresh -&gt;慢开始&#x2F;慢启动算法</p>
<p>cwnd&gt;ssthresh -&gt;拥塞避免</p>
<p>cwnd&#x3D;ssthresh -&gt;都行</p>
</blockquote>
<p>实现举例<br><code>&lt;img src=&quot;https://s2.loli.net/2021/12/10/rKaCnqT3tRbxd4m.png&quot; alt=&quot;image-20211210203723811&quot; style=&quot;zoom:50%;&quot; /&gt;</code></p>
<p>出现拥塞时</p>
<blockquote>
<p>把ssthresh设置为当前值的一半</p>
<p>把cwnd重设为1</p>
</blockquote>
</li>
</ul>
</li>
<li><p>快重传<br>要求接收方每收到一个失序的报文段后立即发出重复确认<br>发送方一连收到三个重复确认就立即重传未收到报文段</p>
</li>
<li><p>快恢复<br>当发送端收到连续三个重复确认时,把ssthresh设置为当前一半,但接下去不执行慢开始&#x2F;慢启动算法,而是将cwnd设置为ssthresh减半后数值,然后开始执行拥塞避免算法<br><code>&lt;img src=&quot;https://s2.loli.net/2021/12/10/3oTXGBk4VdvAQuf.png&quot; alt=&quot;image-20211210204852460&quot; style=&quot;zoom:67%;&quot; /&gt;</code></p>
</li>
</ol>
</blockquote>
<h2 id="4-网络层"><a href="#4-网络层" class="headerlink" title="4.网络层"></a>4.网络层</h2><h3 id="4-1网络层的功能"><a href="#4-1网络层的功能" class="headerlink" title="4.1网络层的功能"></a>4.1网络层的功能</h3><p>在发送端,将分组封装成数据报</p>
<p>在接收端,把数据报上传到传输层</p>
<p>路由器检查每个通过它的数据报</p>
<h5 id="两个关键功能"><a href="#两个关键功能" class="headerlink" title="两个关键功能"></a>两个关键功能</h5><blockquote>
<p>转发-将分组从路由器的输入端口移动到输出端口</p>
<p>路由-决定分组从源主机到目的主机所采用的设备</p>
</blockquote>
<h5 id="网络层服务模型-我觉得没什么考的必要"><a href="#网络层服务模型-我觉得没什么考的必要" class="headerlink" title="网络层服务模型(我觉得没什么考的必要)"></a>网络层服务模型(我觉得没什么考的必要)</h5><img src="https://s2.loli.net/2021/12/10/7SswC2qFQhgB3od.png" alt="image-20211210212419693" style="zoom:67%;" />

<h3 id="4-2网络层设备"><a href="#4-2网络层设备" class="headerlink" title="4.2网络层设备"></a>4.2网络层设备</h3><h4 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h4><h5 id="输入端口"><a href="#输入端口" class="headerlink" title="输入端口"></a>输入端口</h5><blockquote>
<p>物理层-比特级接收</p>
<p>链路层连接以太网</p>
<p>最后一层进行分散式交换-给定数据报目的地址,在输入端口中使用转发表查找输出端口<br>-到达较快的话还会排队</p>
</blockquote>
<p>三种类型交换结构</p>
<img src="https://s2.loli.net/2021/12/11/Rq2jyZpJbH4i9AO.png" alt="image-20211211103137804" style="zoom:67%;" />

<p>输出端口</p>
<blockquote>
<p>当数据报来自比传输速率更快的交换结构时,需要**<code>&lt;u&gt;</code>缓存<code>&lt;/u&gt;</code>**</p>
<p><code>&lt;u&gt;</code><strong>调度安排</strong><code>&lt;/u&gt;</code>-在排队的数据报中选择要传输的数据报</p>
</blockquote>
<h3 id="4-3IP"><a href="#4-3IP" class="headerlink" title="4.3IP"></a>4.3IP</h3><p>链路层之上,传输层之下</p>
<h4 id="4-3-1IPv4分组"><a href="#4-3-1IPv4分组" class="headerlink" title="4.3.1IPv4分组"></a>4.3.1IPv4分组</h4><img src="https://s2.loli.net/2021/12/11/VIyQSfKomLTJi1E.png" alt="image-20211211103434802" style="zoom: 50%;" />

<h5 id="首部字段解释"><a href="#首部字段解释" class="headerlink" title="首部字段解释"></a>首部字段解释</h5><blockquote>
<p>总长度-首部和数据之和的长度,最大为65535</p>
<p>标识-计数器,产生数据报标识</p>
<p>标志-3bit,最低位(M(ore)F(ragment)等于一代表还有分片,等于0代表没有分片,<br>中间一位&#x3D;0才允许分片(D(ont)F(ragment))</p>
<p>片偏移-13bit,指出分片后该片在原分组中的相对位置,以8个字节为偏移单位</p>
<h5 id="IP分片和重组"><a href="#IP分片和重组" class="headerlink" title="IP分片和重组"></a>IP分片和重组</h5><p>为什么分片-链路有最大传输单元,不同链路MTU不同</p>
<p>样例</p>
<img src="https://s2.loli.net/2021/12/11/7zuHKMEABP1jpX9.png" alt="image-20211211104103771" style="zoom:67%;" />

<p>生存时间(TTL time to live) 限制数据报在网络中的生存时间,每经过一个路由器,TTL-1</p>
<p>协议-数据部分协议(TCP&#x2F;UDP&#x2F;IPV6等等)不一定是<code>&lt;u&gt;</code>上层,<code>&lt;/u&gt;</code></p>
<p>首部校验和-只检验首部</p>
</blockquote>
<h4 id="4-3-2IPv4地址"><a href="#4-3-2IPv4地址" class="headerlink" title="4.3.2IPv4地址"></a>4.3.2IPv4地址</h4><p>ip 地址-32位的主机&#x2F;交换机标识号</p>
<p>接口interface-主机&#x2F;路由器与物理链路之间的链接</p>
<blockquote>
<p>交换机有很多个interface</p>
<p>主机一般就一两个</p>
<p>Ip地址与每个接口相关联</p>
</blockquote>
<h5 id="子网"><a href="#子网" class="headerlink" title="子网"></a>子网</h5><p>设备接口Ip地址的子网部分相同</p>
<p>可以物理上直接联系,不用经过交换机</p>
<h5 id="计算可用的主机地址"><a href="#计算可用的主机地址" class="headerlink" title="计算可用的主机地址"></a>计算可用的主机地址</h5><p>主机部分全0:网络地址</p>
<p>主机部分全1:广播地址</p>
<p>上两个不能设置为主机地址</p>
<h5 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h5><p>&#x2F;n 表示子网掩码位数为n</p>
<p>x.y.z.a,点分十进制形式表示32bit IP地址中哪些事子网部分</p>
<h5 id="IP地址分配方案"><a href="#IP地址分配方案" class="headerlink" title="IP地址分配方案"></a>IP地址分配方案</h5><ol>
<li><p>子网位数固定-分类IP地址</p>
</li>
<li><p>不固定–CIDR(无类域间路由)</p>
<blockquote>
<p>子网部分被称为网络前缀,前缀部分任意长</p>
<p>使用斜线记法</p>
<p>路由表中每个项目由”网络前缀” 和”下一跳地址”组成,查找路由表时可能会得到不止一个匹配结果,因此引出下面内容</p>
<h6 id="最长前缀匹配"><a href="#最长前缀匹配" class="headerlink" title="最长前缀匹配"></a>最长前缀匹配</h6><p>举例</p>
<p><img src="https://s2.loli.net/2021/12/11/l9C2phSQBAz4OHm.png" alt="image-20211211134931698"></p>
<h6 id="CIDR子网划分"><a href="#CIDR子网划分" class="headerlink" title="CIDR子网划分***"></a>CIDR子网划分***</h6><p>把一个大网络分成多个小网络,用路由器把这些小网络连接起来</p>
<blockquote>
<p>使用子网掩码255.255.255.192 (&#x2F;26) 对网络<br>192.168.10.0&#x2F;24 进行子网划分，请回答如下问题 :<br>– (1)子网数？</p>
<p>192为二进制11000000，即 22 &#x3D; 4 个子网；</p>
<p>– (2)每个子网中可以容纳的主机数？</p>
<p>26 -2 &#x3D;62 个主机；</p>
<p>– (3)哪些是合法的子网地址？</p>
<p>每个子网的地址块大小为26 &#x3D;64，子<br>网地址的第4个字节从0开始以64递增，即：192.168.10.0、<br>192.168.10.64、192.168.10.128、192.168.10.192</p>
<p>– (4)每个子网的广播地址？</p>
<p>– (5)哪些是合法的主机地址？</p>
<p>子网地址 (192.168.10.) 0 64 128 192<br>第一个主机地址 (192.168.10.) 1 65 129 193<br>最后一个主机地址 (192.168.10.) 62 126 190 254<br>广播地址 (192.168.10.) 63 127 191 255</p>
</blockquote>
</blockquote>
</li>
</ol>
<h4 id="4-3-3IP分组转发"><a href="#4-3-3IP分组转发" class="headerlink" title="4.3.3IP分组转发"></a>4.3.3IP分组转发</h4><p>网络层基于目的地址分组转发</p>
<p>下图一了百了</p>
<p><img src="https://s2.loli.net/2021/12/11/vrUGaPkfJExzdCZ.png" alt="image-20211211140706891"></p>
<p>转发算法</p>
<blockquote>
<ol>
<li><p>从收到分组的首部获得目的IP-&gt;<strong>D</strong></p>
</li>
<li><p>判断是否在同一网络上</p>
<blockquote>
<p>用子网掩码和<strong>D</strong>逐位相与,看看是不是和**<code>&lt;u&gt;</code>相应的网络地址<code>&lt;/u&gt;</code>**匹配,匹配就直接发过去</p>
</blockquote>
</li>
<li><p>若路由表中有目的为D的<strong>特定主机路由</strong>,则将分组传送给指明的下一跳路由器,<br>否则执行4</p>
</li>
<li><p>对路由表每行的子网掩码和D逐位相与,若结果与该行的目的网络地址匹配,就传送到下一跳<br>否则,执行5</p>
</li>
<li><p>若路由表有默认路由,则将其传送给它,<br>否则执行6</p>
</li>
<li><p>报告转发分组出错</p>
</li>
</ol>
</blockquote>
<h4 id="4-3-4DHCP-动态主机配置协议-协议"><a href="#4-3-4DHCP-动态主机配置协议-协议" class="headerlink" title="4.3.4DHCP(动态主机配置协议)协议"></a>4.3.4DHCP(动态主机配置协议)协议</h4><p>Q.A</p>
<blockquote>
<p>主机如何获得IP地址</p>
<ul>
<li>管理员硬编码</li>
</ul>
<p>网络怎样得到IP地址的子网</p>
<ul>
<li>从其ISP的地址空间中得到分配的部分</li>
</ul>
<p>ISP如何获得地址块</p>
<ul>
<li>ICANN(因特网名字与号码分配公司)</li>
</ul>
</blockquote>
<h6 id="DHCP目的-使主机能够动态获取服务器的IP地址-当它加入网络时"><a href="#DHCP目的-使主机能够动态获取服务器的IP地址-当它加入网络时" class="headerlink" title="DHCP目的: 使主机能够动态获取服务器的IP地址(当它加入网络时)"></a>DHCP目的: 使主机能够动态获取服务器的IP地址(当它加入网络时)</h6><p>示意图</p>
<p><img src="https://s2.loli.net/2021/12/11/nlAa7d6vSw4V5qH.png" alt="image-20211211142745600"></p>
<h4 id="4-3-5NAT-不考"><a href="#4-3-5NAT-不考" class="headerlink" title="4.3.5NAT[不考]"></a>4.3.5NAT[不考]</h4><h4 id="4-3-6IPv6-不考"><a href="#4-3-6IPv6-不考" class="headerlink" title="4.3.6IPv6[不考]"></a>4.3.6IPv6[不考]</h4><h3 id="4-4路由算法"><a href="#4-4路由算法" class="headerlink" title="4.4路由算法"></a>4.4路由算法</h3><blockquote>
<p>路由算法用于选择从源主机到目的主机的最佳路径</p>
<p>是产生路由表的算法(找到开销最小的路径)</p>
<p>分类</p>
<blockquote>
<p>静态路由:路由随时间缓慢变化</p>
<p>动态路由:更快地变化,周期性更新,适应链路开销变化</p>
</blockquote>
</blockquote>
<h4 id="4-4-1距离向量路由算法"><a href="#4-4-1距离向量路由算法" class="headerlink" title="4.4.1距离向量路由算法"></a>4.4.1距离向量路由算法</h4><h5 id="Bellman-Ford方程"><a href="#Bellman-Ford方程" class="headerlink" title="Bellman-Ford方程"></a>Bellman-Ford方程</h5><blockquote>
<p>定义$d_x(y)$&#x3D;从x到y的最小开销路径的开销</p>
<p>$c(x,v)$&#x3D;从x到邻居节点v的链路的开销</p>
<p>$d_x(y)&#x3D;min_v{c(x,v)+d_v(y)}$ ,min针对x的所有邻居</p>
</blockquote>
<p>取值最小的结点对应最短路径中的下一跳-&gt;转发表</p>
<h5 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h5><blockquote>
<p>结点x维护距离向量$D_x&#x3D;[d_x(y):y\in N]$</p>
<ul>
<li>如果y不是x的邻居,则$d_x(y)&#x3D;\infin,否则d_x(y)&#x3D;c(x,y)$</li>
</ul>
<p>每个节点周期性向邻居节点发送自己的距离向量,节点x保存其邻居节点的距离向量</p>
<p>当结点x收到来自邻居的新距离向量,它使用B-F方程更新自己的DV</p>
<ul>
<li>$D_x(y)\gets min_v{c(x,v+D_v(y)} for each node y\in N$</li>
</ul>
</blockquote>
<p>示例</p>
<p><img src="https://s2.loli.net/2021/12/11/x75AVi8BThZJcHy.png" alt="image-20211211144152548"></p>
<h4 id="4-4-4链路状态路由算法"><a href="#4-4-4链路状态路由算法" class="headerlink" title="4.4.4链路状态路由算法"></a>4.4.4链路状态路由算法</h4><blockquote>
<ol>
<li>发现邻居,学习网络地址</li>
<li>测量到每一个邻居的时延</li>
<li>构造一个分组来通告学习到的信息</li>
<li>向所有路由器发哦送分组</li>
<li>计算到其他路由器的最短路径</li>
</ol>
</blockquote>
<h5 id="使用Dijkstra算法计算最短路径"><a href="#使用Dijkstra算法计算最短路径" class="headerlink" title="使用Dijkstra算法计算最短路径"></a>使用Dijkstra算法计算最短路径</h5><p>循环:</p>
<blockquote>
<p>从可达节点中找到最近的,加入当前节点组</p>
<p>更新其他节点距离</p>
<p>当当前节点组为全部节点时退出</p>
</blockquote>
<h3 id="4-5路由协议"><a href="#4-5路由协议" class="headerlink" title="4.5路由协议"></a>4.5路由协议</h3><p>目的:使路由选择是可计算的</p>
<blockquote>
<p>有巨量的router</p>
</blockquote>
<ul>
<li>构建自治系统<br>自治系统内 OSPF<br>自治系统间 BGP</li>
</ul>
<h4 id="4-5-1OSPF-Open-Shortest-Path-First"><a href="#4-5-1OSPF-Open-Shortest-Path-First" class="headerlink" title="4.5.1OSPF(Open Shortest Path First)"></a>4.5.1OSPF(Open Shortest Path First)</h4><p>开放最短路径优先</p>
<p>使用<code>&lt;u&gt;</code>链路状态算法<code>&lt;/u&gt;</code></p>
<p> 通告散布到整个自治系统</p>
<h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><ul>
<li><p>安全性-所有OSPF信息经过鉴别</p>
</li>
<li><p>允许使用多条开销相同的路径</p>
</li>
<li><p>对每条链路,为不同的服务类型设置多种开销度量</p>
</li>
<li><p>集成的单播和多播支持</p>
</li>
<li><p>在大域中使用层次OSPF</p>
<blockquote>
<h6 id="层次OSPF"><a href="#层次OSPF" class="headerlink" title="层次OSPF"></a>层次OSPF</h6><ul>
<li>两级层次-本地+主干<br>仅在本地通告链路状态<br>每个节点具有详细的区域拓扑<br>仅知道其他区域中网络的方向</li>
<li>区域边界路由器<br>总结到自己区域中网络的距离,向其他区域的边界路由器通告</li>
<li>主干路由器<br>在主干范围内运行OSPF路由</li>
<li>边界路由器<br>连接到其他自治系统</li>
</ul>
</blockquote>
</li>
</ul>
<h5 id="报文格式"><a href="#报文格式" class="headerlink" title="报文格式"></a>报文格式</h5><p><img src="https://s2.loli.net/2021/12/11/amGulnPEFWbYLeS.png" alt="image-20211211150427755"></p>
<h4 id="4-5-2BGP"><a href="#4-5-2BGP" class="headerlink" title="4.5.2BGP"></a>4.5.2BGP</h4><p>Border Gateway Protocol边界网关协议</p>
<p>提供功能</p>
<blockquote>
<ol>
<li>eBGP:从相邻AS(自治系统)获得子网可达性信息</li>
<li>iBGP:向AS内部的所有路由器传播可达性信息<br>如下图<br><code>&lt;img src=&quot;https://s2.loli.net/2021/12/11/oJwg6KNUcvur8IY.png&quot; alt=&quot;image-20211211150833119&quot; style=&quot;zoom:50%;&quot; /&gt;</code></li>
<li>根据可达性信息和策略,决定到子网的”好”路由</li>
</ol>
</blockquote>
<p>允许子网向因特网其余部分通告它的存在</p>
<p>两个BGP路由器通过半永久TCP连接交换BGP报文</p>
<p>两个重要的属性</p>
<blockquote>
<p>AS-PATH</p>
</blockquote>
<h3 id="4-6ICMP协议-不考"><a href="#4-6ICMP协议-不考" class="headerlink" title="4.6ICMP协议[不考]"></a>4.6ICMP协议[不考]</h3><h3 id="4-7SNMP协议-不考"><a href="#4-7SNMP协议-不考" class="headerlink" title="4.7SNMP协议[不考]"></a>4.7SNMP协议[不考]</h3><h2 id="5-数据链路层"><a href="#5-数据链路层" class="headerlink" title="5. 数据链路层"></a>5. 数据链路层</h2><h3 id="5-1数据链路层的功能"><a href="#5-1数据链路层的功能" class="headerlink" title="5.1数据链路层的功能"></a>5.1数据链路层的功能</h3><blockquote>
<p>将数据报从一个节点经过一条链路传输到相邻节点</p>
<p>组帧-将数据报封装进帧,加上首部和尾部</p>
<p>链路接入-控制信道接入</p>
<p>相邻节点间可靠交付</p>
<p>检错</p>
<p>纠错</p>
</blockquote>
<h3 id="5-2差错控制"><a href="#5-2差错控制" class="headerlink" title="5.2差错控制"></a>5.2差错控制</h3><p>通过通信信道接收的数据和发送的数据不一致的现象-传输差错,简称差错</p>
<h4 id="5-2-1检错编码"><a href="#5-2-1检错编码" class="headerlink" title="5.2.1检错编码"></a>5.2.1检错编码</h4><p>检错</p>
<blockquote>
<p>接收方能够推断发生了错误,要求重传</p>
<p>用于高可靠信道-光纤</p>
<ul>
<li><p>单比特奇偶校验</p>
<blockquote>
<p>增加冗余位使码字中1的个数恒为奇数&#x2F;偶数</p>
<p>能够检测<code>&lt;u&gt;</code>奇数个<code>&lt;/u&gt;</code>比特差错</p>
<p>分为垂直奇偶校验和水平奇偶校验</p>
</blockquote>
</li>
<li><p>因特网校验和</p>
</li>
<li><p>循环冗余校验<br>直接看例子</p>
</li>
<li><p><img src="https://s2.loli.net/2021/12/11/zCrwOTbYQKoB2cq.png" alt="image-20211211155209760"></p>
</li>
<li><p><img src="https://s2.loli.net/2021/12/11/xNYocvzXsdl7ViL.png" alt="image-20211211155153041"></p>
</li>
</ul>
</blockquote>
<h4 id="5-2-2纠错编码-不考"><a href="#5-2-2纠错编码-不考" class="headerlink" title="5.2.2纠错编码[不考]"></a>5.2.2纠错编码[不考]</h4><p>纠错</p>
<blockquote>
<p>接收方能够推断发送过来的原始数据是什么</p>
<p>用于易出错信道</p>
<ul>
<li>二维奇偶校验-能够检测并纠正单比特</li>
</ul>
</blockquote>
<h3 id="5-3介质访问控制"><a href="#5-3介质访问控制" class="headerlink" title="5.3介质访问控制"></a>5.3介质访问控制</h3><h4 id="5-3-1信道划分"><a href="#5-3-1信道划分" class="headerlink" title="5.3.1信道划分"></a>5.3.1信道划分</h4><p>将信道划分为较小的片</p>
<h5 id="时分多路复用TDM"><a href="#时分多路复用TDM" class="headerlink" title="时分多路复用TDM"></a>时分多路复用TDM</h5><p>将时间划分为一段段等长的时分复用帧,每个用户在每个镇中占用固定序号的时隙</p>
<p>一目了然</p>
<p><img src="https://s2.loli.net/2021/12/11/ft9ioG7zkQbJyeS.png" alt="image-20211211182642055"></p>
<h5 id="频分多路复用FDM"><a href="#频分多路复用FDM" class="headerlink" title="频分多路复用FDM"></a>频分多路复用FDM</h5><p>用户分配到频带后,在通信过程中始终占用该频带</p>
<p>不同用户同时间占用不同的(频率)带宽资源</p>
<p><img src="https://s2.loli.net/2021/12/11/xsLCh2dnT7yPcBR.png" alt="image-20211211182751192"></p>
<h5 id="波分多路复用WDM"><a href="#波分多路复用WDM" class="headerlink" title="波分多路复用WDM"></a>波分多路复用WDM</h5><p>就是光纤上的频分多路复用</p>
<h5 id="码分多路复用CDMA"><a href="#码分多路复用CDMA" class="headerlink" title="码分多路复用CDMA"></a>码分多路复用CDMA</h5><ul>
<li>用于无线广播信道中</li>
<li>为每个用户分配唯一的码型,所有用户共享相同的频率,但每个用户用自己的码片序列对数据进行编码</li>
<li>抗干扰&#x2F;抗发现性较好</li>
<li>编码信号&#x3D;(原始数据)X(码片序列)</li>
<li>解码 &#x3D; 编码信号和码片序列的内积</li>
</ul>
<h6 id="码片序列"><a href="#码片序列" class="headerlink" title="码片序列"></a>码片序列</h6><p>每一比特时间划分为一个唯一的m bit 码片序列</p>
<blockquote>
<p>要发送1,则发送码片序列<br>发送0,则发送二进制反码</p>
</blockquote>
<h6 id="码片序列的正交关系"><a href="#码片序列的正交关系" class="headerlink" title="码片序列的正交关系"></a>码片序列的正交关系</h6><p>两个不同站的码片序列正交</p>
<p>也就是说,二者规格化内积为0(每位相互乘累积后为0)</p>
<h6 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h6><p><img src="https://s2.loli.net/2021/12/11/CtEYRu6b4eZy9BV.png" alt="image-20211211183405643"></p>
<h4 id="5-3-2随机访问"><a href="#5-3-2随机访问" class="headerlink" title="5.3.2随机访问"></a>5.3.2随机访问</h4><p>不划分信道,允许冲突,全速率传输</p>
<p>从冲突中恢复</p>
<h6 id="时隙ALOHA-slotted-ALOHA-极限37-效率"><a href="#时隙ALOHA-slotted-ALOHA-极限37-效率" class="headerlink" title="时隙ALOHA(slotted ALOHA)-极限37%效率"></a>时隙ALOHA(slotted ALOHA)-极限37%效率</h6><p>假设</p>
<blockquote>
<p>所有帧长度相同</p>
<p>时间划分为等长间隙,能传输一个帧</p>
<p>结点仅在时隙开始时开始传输帧</p>
<p>如果2+结点同时传输,所有结点检测到冲突</p>
</blockquote>
<p>工作原理</p>
<blockquote>
<p>有新帧,在下一个时隙传输</p>
<p>无冲突,直接发送</p>
<p>有冲突,在之后的每个后继时隙中以概率p重新传送</p>
</blockquote>
<h6 id="纯ALOHA-pure-ALOHA-极限18-效率"><a href="#纯ALOHA-pure-ALOHA-极限18-效率" class="headerlink" title="纯ALOHA(pure ALOHA)-极限18%效率"></a>纯ALOHA(pure ALOHA)-极限18%效率</h6><p>削弱版时隙ALOHA</p>
<p>帧到达立马传输,有冲突则等待一段随机时间开始传输</p>
<h6 id="CSMA-载波侦听多路访问"><a href="#CSMA-载波侦听多路访问" class="headerlink" title="CSMA 载波侦听多路访问"></a>CSMA 载波侦听多路访问</h6><p>思想</p>
<blockquote>
<p>在传输前侦听</p>
<ul>
<li>信道空闲: 传输整个帧</li>
<li>信道忙;推迟传输(下列三种推迟策略)<ol>
<li>等待信道空闲(1-坚持)</li>
<li>等待随机时间(非坚持)</li>
<li>等待空闲,然后概率p发送(p-坚持)</li>
</ol>
</li>
</ul>
</blockquote>
<p>传播时延的冲突</p>
<blockquote>
<p>信道非真正空闲</p>
<p>争用期&#x2F;冲突窗口:端到端往返时延 2$\tau$</p>
<p>只有争用期没检测到冲突才能肯定此次发送不会产生冲突</p>
<p>每个发送数据帧的结点,需要经过争用期才能确保这次发送不会产生冲突</p>
</blockquote>
<h6 id="CSMA-x2F-CD-载波侦听多路访问-冲突检测"><a href="#CSMA-x2F-CD-载波侦听多路访问-冲突检测" class="headerlink" title="CSMA&#x2F;CD 载波侦听多路访问+冲突检测"></a>CSMA&#x2F;CD 载波侦听多路访问+冲突检测</h6><p>CD:Collision Detection</p>
<p>使用CSMA协议进行数据发送</p>
<p>发送过程中一直侦听信道<code>&lt;u&gt;</code>(冲突检测)<code>&lt;/u&gt;</code></p>
<p>检测到冲突则立即停止发送,并等待一段随机时间,再侦听</p>
<p><img src="https://s2.loli.net/2021/12/11/Kj8XsLIzrTwmJih.png" alt="image-20211211193703174"></p>
<p>为了在发送时能检测到可能存在的冲突,CSMA.CD要求所有数据帧都必须大于最小帧长(2$\tau$*数据传输速率)</p>
<h6 id="CSMA-x2F-CA"><a href="#CSMA-x2F-CA" class="headerlink" title="CSMA&#x2F;CA"></a>CSMA&#x2F;CA</h6><p>IEEE802 无线局域网所用的多路访问协议,参考后续</p>
<h4 id="5-3-3轮流访问-不考"><a href="#5-3-3轮流访问-不考" class="headerlink" title="5.3.3轮流访问[不考]"></a>5.3.3轮流访问[不考]</h4><p>节点轮流发送，但有更多信息要发送的节点能够占用更 长的时间</p>
<h3 id="5-4局域网-LAN"><a href="#5-4局域网-LAN" class="headerlink" title="5.4局域网(LAN)"></a>5.4局域网(LAN)</h3><h4 id="5-4-1局域网的基本概念与体系结构"><a href="#5-4-1局域网的基本概念与体系结构" class="headerlink" title="5.4.1局域网的基本概念与体系结构"></a>5.4.1局域网的基本概念与体系结构</h4><p>集中在一个地理区域中的计算机网络</p>
<p>属性</p>
<ul>
<li>范围限制</li>
<li>传输技术</li>
<li>拓扑结构</li>
</ul>
<h5 id="IEEE802参考模型-只相当于链路层和物理层"><a href="#IEEE802参考模型-只相当于链路层和物理层" class="headerlink" title="IEEE802参考模型-只相当于链路层和物理层"></a>IEEE802参考模型-只相当于链路层和物理层</h5><p><img src="https://s2.loli.net/2021/12/11/WNJSFu2D7a9b5Y3.png" alt="image-20211211194132210"></p>
<p>LLC保证传输正确性</p>
<p>MAC解决共享信道访问</p>
<h4 id="5-4-2链路层寻址与ARP协议"><a href="#5-4-2链路层寻址与ARP协议" class="headerlink" title="5.4.2链路层寻址与ARP协议"></a>5.4.2链路层寻址与ARP协议</h4><p>MAC地址&#x2F;LAN地址&#x2F;物理地址</p>
<ul>
<li>将数据报从一个接口传送到物理上相互连接的另一个接口</li>
<li>网络层及以上用IP地址,链路层及以下用硬件地址</li>
</ul>
<h5 id="ARP-地址解析协议"><a href="#ARP-地址解析协议" class="headerlink" title="ARP:地址解析协议"></a>ARP:地址解析协议</h5><p>每个主机上设有ARP高速缓存,里面有所在局域网上各主机和路由器的IP地址到硬件地址的<code>&lt;u&gt;</code>映射表<code>&lt;/u&gt;</code></p>
<p>A想向B发数据,先查看ARP中有无B的IP,如果有,就查出它的硬件地址,再将其发送</p>
<p>没有,则运行ARP来找到B的硬件地址</p>
<p>即主机A向所有主机广播请求,目的主机对主机A直接回应,同时将主机A的地址映射到自己的高速缓存中</p>
<p><img src="https://s2.loli.net/2021/12/11/OkLXE5xsCpnF7KN.png" alt="image-20211211194645026"></p>
<p>ARP四种情况</p>
<blockquote>
<p>主机-&gt;本网络上另一个主机         ARP找到目的硬件地址</p>
<p>主机-&gt;另一个网络上的主机        ARP找到本网络一个路由器地址</p>
<p>路由器-&gt;本网络主机					ARP找到目的主机的硬件地址</p>
<p>路由器-&gt; 另一个网络主机            ARP找到本网络上另一个路由器硬件地址</p>
</blockquote>
<h4 id="5-4-3以太网与IEEE802-3"><a href="#5-4-3以太网与IEEE802-3" class="headerlink" title="5.4.3以太网与IEEE802.3"></a>5.4.3以太网与IEEE802.3</h4><p>星型拓扑结构</p>
<ul>
<li>中心是交换机</li>
<li>节点间不冲突</li>
</ul>
<h5 id="以太网帧结构"><a href="#以太网帧结构" class="headerlink" title="以太网帧结构"></a>以太网帧结构</h5><p><img src="https://s2.loli.net/2021/12/11/7JqZxaLi4CO51MA.png" alt="image-20211211200110878"></p>
<p>目的地址:</p>
<blockquote>
<p>第一位0: 单节点接收</p>
<p>1:被一组节点接收</p>
<p>全1:广播</p>
</blockquote>
<p>校验字段</p>
<p>32位CRC校验(范围:目的地址,源地址,类型,数据)</p>
<p>数据字段:最小长度为46B,小于46则填充,但这些填充不计入长度字段值中<br>最大长度为1500B</p>
<p>因此Ethernet帧最小长度64B,最大1518B</p>
<h5 id="以太网特点"><a href="#以太网特点" class="headerlink" title="以太网特点"></a>以太网特点</h5><p>不可信(接收方不发送ACK之类的)</p>
<p>无连接(无握手)</p>
<p>MAC控制:</p>
<h5 id="以太网的CSMA-x2F-CD"><a href="#以太网的CSMA-x2F-CD" class="headerlink" title="以太网的CSMA&#x2F;CD"></a>以太网的CSMA&#x2F;CD</h5><p>将之前的强化冲突方式,设置为使用<code>&lt;u&gt;</code>二进制指数退避<code>&lt;/u&gt;</code></p>
<ul>
<li>在第m号冲突后 NIC选择{0,1,2,…$2^{m-1}$中的随机一个数K</li>
<li>然后等待K*512 bit时间</li>
</ul>
<h4 id="5-4-4无线局域网与IEEE802-11-不考"><a href="#5-4-4无线局域网与IEEE802-11-不考" class="headerlink" title="5.4.4无线局域网与IEEE802.11[不考]"></a>5.4.4无线局域网与IEEE802.11[不考]</h4><p>无线网的介质访问控制</p>
<p>特点: 无法获得冲突信息</p>
<p>目的:避免冲突</p>
<p>方式</p>
<blockquote>
<p>物理层执行信道载波侦听</p>
<p>信道空闲–源节点等待DIFS后,仍然空闲,则发送一帧,然后等待ACK帧</p>
<p>目的节点在收到正确的数据帧的SIFS时间后,向源节点发送ACK帧</p>
</blockquote>
<h6 id="CSMA-x2F-CA-1"><a href="#CSMA-x2F-CA-1" class="headerlink" title="CSMA&#x2F;CA"></a>CSMA&#x2F;CA</h6><p>允许发送端预订信道</p>
<ul>
<li>发送端发送请求帧到AP</li>
<li>AP广播允许发送(CTS)的回复</li>
<li>所有结点收到CTS,发送端发送</li>
</ul>
<h3 id="5-5数据链路层设备"><a href="#5-5数据链路层设备" class="headerlink" title="5.5数据链路层设备"></a>5.5数据链路层设备</h3><h5 id="局域网交换机"><a href="#局域网交换机" class="headerlink" title="局域网交换机"></a>局域网交换机</h5><p>存储并转发以太网帧</p>
<p>特征: 对主机透明(即ip地址什么的和它无关)</p>
<p>自学习-</p>
<blockquote>
<p>收到对应接口分组后记录对应接口MAC地址在自己对应接口上</p>
<p>如果发现目的接口没有,会洪泛(将分组分发到所有接口上,等待回复)</p>
</blockquote>
<h6 id="冲突域VS广播域"><a href="#冲突域VS广播域" class="headerlink" title="冲突域VS广播域"></a>冲突域VS广播域</h6><p>冲突域;网络的一部分,在其中会发生帧冲突(当两个设备同时发送数据报)</p>
<p><img src="https://s2.loli.net/2021/12/09/PYFwpzouJ9VhBre.png" alt="image-20211209105458295"></p>
<p>广播域:包含了通过链路层广播能直接相互了解的所有设备</p>
<p><img src="https://s2.loli.net/2021/12/09/l7OfskCEuRYMqb6.png" alt="image-20211209105941059"></p>
<h5 id="虚拟局域网–为了防止过多的广播信息引起不便"><a href="#虚拟局域网–为了防止过多的广播信息引起不便" class="headerlink" title="虚拟局域网–为了防止过多的广播信息引起不便"></a>虚拟局域网–为了防止过多的广播信息引起不便</h5><p>虚拟局域网VLAN是由一些局域网网段构成的与物理位置无关的逻辑组</p>
<p>每一个 VLAN 的帧都有一个明确的标识符，指明发送这个帧的工作站是属于哪一个 VLAN。(在以太网帧中插入一个4字节的标识符,称为VLAN标记)</p>
<p><img src="https://s2.loli.net/2021/12/09/ier7sUByQbkouxL.png" alt="image-20211209110309425"></p>
<h2 id="6-物理层"><a href="#6-物理层" class="headerlink" title="6. 物理层"></a>6. 物理层</h2><h3 id="6-1通信基础"><a href="#6-1通信基础" class="headerlink" title="6.1通信基础"></a>6.1通信基础</h3><h4 id="6-1-1数据通信系统的基本概念"><a href="#6-1-1数据通信系统的基本概念" class="headerlink" title="6.1.1数据通信系统的基本概念"></a>6.1.1数据通信系统的基本概念</h4><p>物理层目标:在通信信道上传输原始比特</p>
<p>确定与传输介质的接口的一些特性</p>
<ul>
<li>机械特性</li>
<li>电气特性</li>
<li>功能特性</li>
<li>过程特性</li>
</ul>
<h4 id="6-1-2编码与调制"><a href="#6-1-2编码与调制" class="headerlink" title="6.1.2编码与调制"></a>6.1.2编码与调制</h4><h4 id="6-1-3奈奎斯特定理和香农定理"><a href="#6-1-3奈奎斯特定理和香农定理" class="headerlink" title="6.1.3奈奎斯特定理和香农定理"></a>6.1.3奈奎斯特定理和香农定理</h4><h3 id="6-2物理层设备"><a href="#6-2物理层设备" class="headerlink" title="6.2物理层设备"></a>6.2物理层设备</h3><h3 id="集线器"><a href="#集线器" class="headerlink" title="集线器"></a>集线器</h3><h2 id="7-综合"><a href="#7-综合" class="headerlink" title="7. 综合"></a>7. 综合</h2><h3 id="7-1各层设备的广播域、冲突域及总结"><a href="#7-1各层设备的广播域、冲突域及总结" class="headerlink" title="7.1各层设备的广播域、冲突域及总结"></a>7.1各层设备的广播域、冲突域及总结</h3><h3 id="7-2Web访问全过程"><a href="#7-2Web访问全过程" class="headerlink" title="7.2Web访问全过程"></a>7.2Web访问全过程</h3>]]></content>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>MC服务器设置</title>
    <url>/2021-12-19-MC%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AE%BE%E7%BD%AE.html</url>
    <content><![CDATA[<h1 id="MC服务器设置"><a href="#MC服务器设置" class="headerlink" title="MC服务器设置"></a>MC服务器设置</h1><p>[toc]</p>
<p>今天心血来潮搞了个mc服务器,下面记录一下过程</p>
<h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><p>服务器系统:Debian(我也不知道是什么版本,反正是vultur上买的)</p>
<p>java版本:openjdk8 具体下载过程在后面有说</p>
<p>之后参考教程<a href="https://minecraft.fandom.com/zh/wiki/%E6%95%99%E7%A8%8B/%E6%9E%B6%E8%AE%BE%E6%9C%8D%E5%8A%A1%E5%99%A8#Debian.E3.80.81Ubuntu.E5.92.8CRaspbian">教程&#x2F;架设服务器 - Minecraft Wiki，最详细的我的世界百科 (fandom.com)</a></p>
<h2 id="java下载"><a href="#java下载" class="headerlink" title="java下载"></a>java下载</h2><p>参考: <a href="https://www.myfreax.com/install-java-on-debian-10/">如何在Debian 10 Linux上安装Java (myfreax.com)</a></p>
<p>执行以下代码即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line"></span><br><span class="line">sudo apt install apt-transport-https ca-certificates wget dirmngr gnupg software-properties-com</span><br><span class="line"></span><br><span class="line">wget -qO - https://adoptopenjdk.jfrog.io/adoptopenjdk/api/gpg/key/public | sudo apt-key add -</span><br><span class="line"></span><br><span class="line">sudo add-apt-repository --<span class="built_in">yes</span> https://adoptopenjdk.jfrog.io/adoptopenjdk/deb/</span><br><span class="line"></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install adoptopenjdk-8-hotspot</span><br></pre></td></tr></table></figure>

<p>最后看看是否真的安装了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>

<p>预计输出如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openjdk version <span class="string">&quot;1.8.0_212&quot;</span></span><br><span class="line">OpenJDK Runtime Environment (AdoptOpenJDK)(build 1.8.0_212-b04)</span><br><span class="line">OpenJDK 64-Bit Server VM (AdoptOpenJDK)(build 25.212-b04, mixed mode)</span><br></pre></td></tr></table></figure>

<h2 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h2><p>基础代码仓我直接用了已有的github仓库(不想自己搞了)</p>
<p>直接在Linux命令行下输入这些就行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://github.com/silvertriclops/MCSLI/archive/master.zip</span><br><span class="line">unzip master.zip</span><br><span class="line"><span class="built_in">cd</span> MCSLI-master </span><br><span class="line">sudo <span class="built_in">chmod</span> +x install.sh</span><br><span class="line">sudo <span class="built_in">chmod</span> +x start.sh</span><br><span class="line">./install.sh <span class="comment"># tells the computer where Java is so it knows how to start Minecraft</span></span><br><span class="line">./start.sh <span class="comment"># starts the Minecraft server. You may want to run this command inside screen.</span></span><br></pre></td></tr></table></figure>

<p>理论上来说,这样就已经可以用了</p>
<p>输入 stop退出</p>
<h3 id="开放tcp端口"><a href="#开放tcp端口" class="headerlink" title="开放tcp端口"></a>开放tcp端口</h3><p>因为是服务器,需要和客户端交互,一个tcp端口是必不可少的</p>
<p>一般来说,根据上面创建的服务器,默认使用的是25565(启动的时候中间有一行会提示的)</p>
<p>就像下面这样</p>
<p><img src="https://s2.loli.net/2021/12/19/m8LxWjMp3DFeXkA.png" alt="image-20211219204134588"></p>
<p>然后输入下面代码就能开放对应端口(不过我也不知道开了到底会有什么坏影响,服务器做好备份?)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo iptables -A INPUT -p tcp --dport 25565 --jump ACCEPT</span><br><span class="line">iptables-save</span><br></pre></td></tr></table></figure>



<h2 id="换成我想要的版本-1-12"><a href="#换成我想要的版本-1-12" class="headerlink" title="换成我想要的版本(1.12)"></a>换成我想要的版本(1.12)</h2><p>不过这个仓库七年前就停止更新了,里面的服务器版本为1.8版本</p>
<p>想更新成自己的版本需要去MC官网下,就几十mb很小,下载好对应版本后</p>
<p>回到之前的文件夹(MCSLI-master)</p>
<p>把对应版本的文件放进来</p>
<p>如果不知道怎么把文件传给服务器,看下面</p>
<blockquote>
<p>我用的Xshell连接服务器,这时候可以下载xftp,用于文件传输,图形化界面,用了都说好</p>
</blockquote>
<p>之后更改配置(MCSLI-master&#x2F;start.sh)</p>
<p>里面能看到写了一行启动代码,把它里面对应服务器jar包的那部分换成你的jar包(相对位置绝对位置都可以)</p>
<p>看看能不能用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./start.sh</span><br></pre></td></tr></table></figure>

<p>只要不报错就算成功</p>
<h2 id="加装mod"><a href="#加装mod" class="headerlink" title="加装mod"></a>加装mod</h2><p>mod是mc的灵魂,不打mod我不认可(实际就是我菜)</p>
<p>这时候需要下载forge</p>
<p>打开forge的官网</p>
<p><a href="https://files.minecraftforge.net/net/minecraftforge/forge/index_1.12.html">Downloads for Minecraft Forge for Minecraft 1.12</a></p>
<p>下载对应的版本,我是1.12就下载了1.12</p>
<p>放到和刚才文件同一级目录下</p>
<p>执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar forge-1.12-14.21.1.2443-installer.jar --install</span><br></pre></td></tr></table></figure>

<p>这时候你使用 ls 看看文件夹下,可以看到有类似</p>
<p><img src="https://s2.loli.net/2021/12/19/4iMHgdhOJsvQR9V.png" alt="image-20211219203443648"></p>
<p>这种东西出现</p>
<p>那么你的forge安装已经成功了一半了</p>
<p>之后打开你该死的本地MC(加装了对应版本forge的那种)</p>
<p>把.minecraft下的resources文件夹,整个给复制到服务器里头去(还是刚才那个文件目录)</p>
<p>之后执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./start.sh</span><br></pre></td></tr></table></figure>

<p>最后能看到这些信息就算成功</p>
<p><img src="https://s2.loli.net/2021/12/19/1QMTqoABd5gaxeF.png" alt="image-20211219203701426"></p>
<h2 id="享受服务器"><a href="#享受服务器" class="headerlink" title="享受服务器"></a>享受服务器</h2><p>打开你的本地MC,输入服务器ip,连接后进入就行</p>
<h2 id="啸贴士"><a href="#啸贴士" class="headerlink" title="啸贴士"></a>啸贴士</h2><p>如果你一不小心做错了,或许可以评论,我期末摸鱼的时候可能会来评论一下</p>
]]></content>
      <tags>
        <tag>MC</tag>
      </tags>
  </entry>
  <entry>
    <title>白盒测试</title>
    <url>/2022-03-09-%E7%99%BD%E7%9B%92%E6%B5%8B%E8%AF%95.html</url>
    <content><![CDATA[<h1 id="白盒测试"><a href="#白盒测试" class="headerlink" title="白盒测试"></a>白盒测试</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>知道内部工作过程，可通过测试内部动作来测试</p>
<h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>通过测试来检测软件产品内部动作是否按照规格说明书的规定正常执行</p>
<h3 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h3><p>看软件内部各条通路是否按照规定工作</p>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>黑盒可能存在负负得正的情况，而白盒不会</p>
<p>白盒能发现一些隐患：如内存泄漏，误差累积等</p>
<h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><h3 id="主要想对程序模块进行如下的检查"><a href="#主要想对程序模块进行如下的检查" class="headerlink" title="主要想对程序模块进行如下的检查"></a>主要想对程序模块进行如下的检查</h3><blockquote>
<p>对所有独立测试路径至少测试一次</p>
<p>对所有的逻辑判定，取真&#x2F;假的两种至少测试一次</p>
<p>在循环的边界和运行界限内执行循环体 </p>
<p>测试内部数据结构的有效性</p>
</blockquote>
<h3 id="局限"><a href="#局限" class="headerlink" title="局限"></a>局限</h3><p>一个具有多重选择和循环嵌套的程序，不同的路径数目可能是天文数字。</p>
<h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20220311162005086.png" alt="image-20220311162005086" style="zoom: 50%;" />





<h2 id="如何安排白盒测试"><a href="#如何安排白盒测试" class="headerlink" title="如何安排白盒测试"></a>如何安排白盒测试</h2><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><h3 id="集成测试"><a href="#集成测试" class="headerlink" title="集成测试"></a>集成测试</h3><blockquote>
<ul>
<li><p>集成阶段，依据概要设计说明书 </p>
</li>
<li><p>静态结构分析 </p>
</li>
<li><p>代码质量度量 </p>
</li>
<li><p>功能确认与接口分析 </p>
</li>
<li><p>覆盖率分析 </p>
</li>
<li><p>性能分析 </p>
</li>
<li><p>内存分析</p>
</li>
</ul>
</blockquote>
<h3 id="系统测试"><a href="#系统测试" class="headerlink" title="系统测试"></a>系统测试</h3><p>到这步已经很少做白盒测试了</p>
<h3 id="验收测试"><a href="#验收测试" class="headerlink" title="验收测试"></a>验收测试</h3><h3 id="白盒测试综合策略"><a href="#白盒测试综合策略" class="headerlink" title="白盒测试综合策略"></a>白盒测试综合策略</h3><blockquote>
<ol>
<li><p>在测试中，应尽量先用工具进行静态结构分析。 </p>
</li>
<li><p>测试中可采取先静态后动态的组合方式：先进行静态结构分析、代码检查和静态质量度量，再进行覆盖率测试。 </p>
</li>
<li><p>利用静态分析的结果作为引导，通过代码检查和动态测试的方式对静态结构分析结果进行进一步的确认，使测试工作更为有效</p>
</li>
<li><p>覆盖率测试是白盒测试的重点，一般可使用基本路径测试 法达到语句覆盖标准；对于软件的重点模块，应使用多种覆盖标准衡量代码的覆盖率。</p>
</li>
<li><p>在不同的测试阶段，测试的侧重点不同：在单元测试阶段 ，以代码检查、逻辑覆盖为主；在集成测试阶段，需要增加静态结构分析、静态质量度量；在系统测试阶段，应根据黑盒测试的结果，采取相应的白盒测试</p>
</li>
</ol>
</blockquote>
<h2 id="白盒测试用例设计技术"><a href="#白盒测试用例设计技术" class="headerlink" title="白盒测试用例设计技术"></a>白盒测试用例设计技术</h2><h3 id="静态"><a href="#静态" class="headerlink" title="静态"></a>静态</h3><blockquote>
<ul>
<li><p>代码检查（人工＋工具） </p>
</li>
<li><p>静态结构分析（主要由软件工具自动进行） </p>
</li>
<li><p>软件质量度量（主要由软件工具自动进行</p>
</li>
</ul>
</blockquote>
<h3 id="动态"><a href="#动态" class="headerlink" title="动态"></a>动态</h3>]]></content>
      <tags>
        <tag>软件质量与评测技术</tag>
      </tags>
  </entry>
  <entry>
    <title>黑盒测试</title>
    <url>/2022-03-11-%E9%BB%91%E7%9B%92%E6%B5%8B%E8%AF%95.html</url>
    <content><![CDATA[<p>测试用例选择</p>
<ol>
<li>为每一个等价类规定一个唯一编号； </li>
<li>设计一个新的测试用例，使其尽可能多地覆盖 尚未被覆盖的有效等价类，重复这一步，直到 所有的有效等价类都被覆盖为止； </li>
<li>设计一个新的测试用例，使其仅覆盖一个尚未 被覆盖的无效等价类，重复这一步，直到所有 的无效等价类都被覆盖为止</li>
</ol>
<blockquote>
<p><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20220309134921110.png" alt="image-20220309134921110"></p>
<h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><h4 id="是否是三角形的三条边"><a href="#是否是三角形的三条边" class="headerlink" title="是否是三角形的三条边"></a>是否是三角形的三条边</h4><h6 id="等价类"><a href="#等价类" class="headerlink" title="等价类"></a>等价类</h6><p>A&gt;0</p>
<p>B&gt;0</p>
<p>c&gt;0</p>
<p>A+B&gt;C</p>
<p>B+C&gt;A</p>
<p>A+C&gt;B</p>
<h5 id="非等价类"><a href="#非等价类" class="headerlink" title="非等价类"></a>非等价类</h5><p>A&lt;&#x3D;0</p>
<p>B&lt;&#x3D;0</p>
<p>C&lt;&#x3D;0</p>
<p>A+B&lt;&#x3D;C</p>
<p>…</p>
<h4 id="是否等腰"><a href="#是否等腰" class="headerlink" title="是否等腰"></a>是否等腰</h4><h5 id="等价类-1"><a href="#等价类-1" class="headerlink" title="等价类"></a>等价类</h5><p>A&#x3D;B</p>
<p>B&#x3D;C</p>
<p>C&#x3D;A</p>
<h5 id="非等价类-1"><a href="#非等价类-1" class="headerlink" title="非等价类"></a>非等价类</h5><p>A!&#x3D;B！&#x3D;C</p>
<h5 id="是否等边"><a href="#是否等边" class="headerlink" title="是否等边"></a>是否等边</h5><h5 id="等价类-2"><a href="#等价类-2" class="headerlink" title="等价类"></a>等价类</h5><p>A&#x3D;B&#x3D;C</p>
<h5 id="非等价类-2"><a href="#非等价类-2" class="headerlink" title="非等价类"></a>非等价类</h5><p>A!&#x3D;B</p>
<p>B!&#x3D;C</p>
<p>C!&#x3D;A</p>
</blockquote>
<h3 id="边界值分析法（单缺陷假设）"><a href="#边界值分析法（单缺陷假设）" class="headerlink" title="边界值分析法（单缺陷假设）"></a>边界值分析法（单缺陷假设）</h3><p>比最大值稍微小一点，比最小值稍微大一点</p>
<p><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20220309140314690.png" alt="image-20220309140314690"></p>
<p><strong>健壮性测试：（再多两个点）</strong></p>
<p>比最大值稍微大一点，比最小值稍微小一点</p>
<p><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20220309140305899.png" alt="image-20220309140305899"></p>
<p><strong>最坏情况测试：</strong></p>
<p>多变量取极值的情况</p>
<p><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20220309140255646.png" alt="image-20220309140255646"></p>
<p><strong>健壮最坏情况测试</strong></p>
<p>最坏情况取超边界情况</p>
<p><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20220309140405550.png" alt="image-20220309140405550"></p>
<h3 id="错误推测法"><a href="#错误推测法" class="headerlink" title="错误推测法"></a>错误推测法</h3><p>根据经验推测</p>
<p>简单有效，但系统性差，是其他的补充</p>
<h3 id="判定表法"><a href="#判定表法" class="headerlink" title="判定表法"></a>判定表法</h3><blockquote>
<p>判定表是一种用来表示和分析复杂逻辑关系的工具，最适 合描述在多个逻辑条件取值的组合所构成的复杂情况下， 分别要执行哪些不同的动作。</p>
</blockquote>
<blockquote>
<p>条件桩（Condition Stub）：列出了问题的所有条件。通常认为列出的条件的次序无关紧要。 </p>
<p>动作桩（Action Stub）：列出了问题规定可能采取的操作。这些操作的排列顺序没有约束。</p>
<p>条件项（Condition Entry）：列出针对它所列条件的取值，在所有可能情况下的真假值。</p>
<p>动作项（Action Entry）：列出在条件项的各种取值情况下应该采取的动作</p>
</blockquote>
<p>例子</p>
<blockquote>
<p>“……对于功率大于50马力的机器，并且维修记录不全或已运行 10年以上的机器，应给予优先的维修处理……</p>
<p>（1）列出所有的条件桩和动作桩 </p>
<p>– 条件桩 C1：功率大于50马力吗？ C2：维修记录不全吗？ C3：运行超过10年吗？ </p>
<p>– 动作桩 A1：进行优先处理 A2：做其他处理</p>
<p>（2）确定规则个数 </p>
<p>– 输入条件个数：3 </p>
<p>– 每个条件的取值：“是”或“否” </p>
<p>– 规则个数：2<em>2</em>2 &#x3D;8</p>
<p><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20220309143736908.png" alt="image-20220309143736908"></p>
<p><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20220309143751694.png" alt="image-20220309143751694"></p>
</blockquote>
<blockquote>
<p>因果图法</p>
<blockquote>
<p>从用自然语言书写的程序规格说明 的描述中找出因（输入条件）和果（输出或程序状态的改 变），通过因果图转换为判定表</p>
</blockquote>
<p>基本步骤</p>
<blockquote>
<ol>
<li><p>分析软件规格说明描述中，哪些是原因（即输入条件或输入 条件的等价类），哪些是结果（即输出条件），并给每个原因和 结果赋予一个标识符。</p>
</li>
<li><p>分析软件规格说明描述中的语义，找出原因与结果之间，原 因与原因之间对应的关系，根据这些关系，画出因果图</p>
</li>
<li><p>由于语法或环境限制，有些原因与原因之间，结果与结果之 间的组合情况不可能出现。为表明这些特殊情况，在因果图上用 一些记号标明约束或限制条件</p>
</li>
<li><p>把因果图转换成判定表。</p>
</li>
<li><p>把判定表的每一列拿出来作为依据，设计测试用例</p>
</li>
</ol>
<p>图形符号</p>
<p><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20220311152714975.png" alt="image-20220311152714975"></p>
<p><img src="https://s2.loli.net/2022/03/11/2Izxij3sJbMwBCX.png" alt="image-20220311152824009"></p>
</blockquote>
</blockquote>
]]></content>
      <tags>
        <tag>软件质量与评测技术</tag>
      </tags>
  </entry>
  <entry>
    <title>React学习20220312 生命周期</title>
    <url>/2022-03-12-React%E5%AD%A6%E4%B9%A020220312.html</url>
    <content><![CDATA[<h1 id="React学习20220312"><a href="#React学习20220312" class="headerlink" title="React学习20220312"></a>React学习20220312</h1><h2 id="CreateElement函数拆解"><a href="#CreateElement函数拆解" class="headerlink" title="CreateElement函数拆解"></a>CreateElement函数拆解</h2><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20220312150556893.png" alt="image-20220312150556893" style="zoom:50%;" />



<img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20220312150653145.png" alt="image-20220312150653145" style="zoom:50%;" />



<img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20220312150814067.png" alt="image-20220312150814067" style="zoom:50%;" />

<img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20220312150922420.png" alt="image-20220312150922420" style="zoom:50%;" />

<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20220312151139289.png" alt="image-20220312151139289"></p>
<p>React16</p>
<p><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20220312152345970.png" alt="image-20220312152345970"></p>
<blockquote>
<p>挂载过程</p>
<img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20220312152839851.png" alt="image-20220312152839851" style="zoom:50%;" />

<p>getDerivedFromProps的功能：使用props来派生&#x2F;更新state</p>
<ul>
<li>是针对某个属性的定向更新</li>
</ul>
<p>更新过程</p>
<img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20220312153339553.png" alt="image-20220312153339553" style="zoom:50%;" />

<p>getSnapshotBeforeUpdate:</p>
<img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20220312154540844.png" alt="image-20220312154540844" style="zoom:50%;" />

<img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20220312154512940.png" alt="image-20220312154512940" style="zoom:50%;" />
</blockquote>
<p>React16引入的Fiber架构</p>
<p>之前组件更新：树状递归更新，同步更新，占用主线程，易卡死</p>
<p>Fiber会把大任务转为小任务，使得渲染线程可打断</p>
<p>重要特征</p>
<blockquote>
<p>可以被<u>打断</u>的异步渲染模式</p>
</blockquote>
<p>react将渲染过程分为render和commit两个过程</p>
<p>render可被打断</p>
<p>commit同步执行</p>
<p>因为commit会改视图，因此不可打断</p>
<h2 id="数据的流动"><a href="#数据的流动" class="headerlink" title="数据的流动"></a>数据的流动</h2><p>基于props的单向数据流：</p>
<blockquote>
<p>当前组件的state以props的形式流动时，只能流向组件树中比自己层级更低的组件</p>
</blockquote>
<p>父子组件通信</p>
<blockquote>
<p>父组件把this.props传入子组件</p>
</blockquote>
<p>子父组件通信</p>
<blockquote>
<p>父组件向子组件传递一个绑定了自身上下文的函数</p>
<p>子组件在调用该函数时，</p>
<p>就可以把想要交给父组件的数据以函数入参的形式传入</p>
<blockquote>
<img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20220312163654393.png" alt="image-20220312163654393" style="zoom:50%;" />

<img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20220312163734257.png" alt="image-20220312163734257" style="zoom:50%;" />

<img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20220312163752751.png" alt="image-20220312163752751" style="zoom:50%;" />

</blockquote>
</blockquote>
]]></content>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>React学习20220313 Hook</title>
    <url>/2022-03-13-React%E5%AD%A6%E4%B9%A020220313%20Hook.html</url>
    <content><![CDATA[<h1 id="React学习20220313-Hook"><a href="#React学习20220313-Hook" class="headerlink" title="React学习20220313 Hook"></a>React学习20220313 Hook</h1><h2 id="理解Hook"><a href="#理解Hook" class="headerlink" title="理解Hook"></a>理解Hook</h2><p>按我的理解，Hook是对繁琐，学习曲线长，难以更改中间步骤的类的拆分，使得函数可以拥有一些类能够使用的功能：如state和生命周期等，而且Hook所辅助的函数式编程比较符合React所推崇的组件化编程。</p>
<h2 id="对useState的理解"><a href="#对useState的理解" class="headerlink" title="对useState的理解"></a>对useState的理解</h2><p>充当函数中的state，但一次只有一个，不像类中一次指定多个</p>
<blockquote>
<p>[text,setText] &#x3D;useState(‘初始文字’)</p>
</blockquote>
<p>useState返回一个数组，数组第一个是想要的state变量，第二个是修改变量的Api</p>
<h2 id="对useEffect的理解"><a href="#对useEffect的理解" class="headerlink" title="对useEffect的理解"></a>对useEffect的理解</h2><p>弥补生命周期</p>
<p>接收两个参数：回调函数和依赖数组</p>
<p>useEffect(callBack,[])</p>
<p>调用规则：</p>
<blockquote>
<p>每次渲染后：传入回调函数，不传依赖数组： </p>
<ul>
<li>useEffect(callBack)</li>
</ul>
<p>挂载阶段执行一次后不再执行：传入回调函数，且此函数的返回值不是函数，同时传入空数组。</p>
<ul>
<li>useEffect(()&#x3D;&gt;{&#x2F;*业务逻辑*&#x2F;},[])</li>
</ul>
<p>仅在挂载和卸载阶段执行的：传入回调函数，且此函数的返回值是一个函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="comment">//业务逻辑</span></span><br><span class="line"><span class="comment">//返回一个函数记为B</span></span><br><span class="line"><span class="keyword">return</span> <span class="function">()=&gt;</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,[])</span><br></pre></td></tr></table></figure>

<p>每次渲染都触发，且卸载阶段也会被触发的：传入回调函数，且这个函数的返回值是一个函数，同时不传第二个参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//A的业务逻辑</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//返回一个函数记为B</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>上面这段代码在每次渲染都触发A逻辑，并在卸载阶段触发B逻辑</p>
<p>按我的理解，在前面一半写个函数会在渲染阶段一直触发，单纯写一段逻辑就会在挂载阶段触发，在return那写个函数就会在卸载的时候触发</p>
</blockquote>
<p><img src="G:/WorkStation/JavaScriptProject/React%E5%AD%A6%E4%B9%A0/React%E5%AD%A6%E4%B9%A020220313%20Hook/assets/image-20220313160121838.png" alt="image-20220313160121838"></p>
<h2 id="不要在循环，条件或嵌套函数中调用Hook"><a href="#不要在循环，条件或嵌套函数中调用Hook" class="headerlink" title="不要在循环，条件或嵌套函数中调用Hook"></a>不要在循环，条件或嵌套函数中调用Hook</h2><h3 id="首次渲染过程"><a href="#首次渲染过程" class="headerlink" title="首次渲染过程"></a>首次渲染过程</h3><p><img src="G:/WorkStation/JavaScriptProject/React%E5%AD%A6%E4%B9%A0/React%E5%AD%A6%E4%B9%A020220313%20Hook/assets/image-20220314135945234.png" alt="image-20220314135945234"></p>
<p>hook相关的所有信息收敛在一个hook对象粒，而hook对象之间以单向链表的形式相互串联，</p>
<h3 id="更新过程"><a href="#更新过程" class="headerlink" title="更新过程"></a>更新过程</h3><p><img src="G:/WorkStation/JavaScriptProject/React%E5%AD%A6%E4%B9%A0/React%E5%AD%A6%E4%B9%A020220313%20Hook/assets/image-20220314140737526.png" alt="image-20220314140737526"></p>
<p>因此，hooks的渲染是通过“依次遍历”（也就是说，它只会管这回需要前进几个next，而不会对对应位置的真实性进行判断）来定位每个hooks的内容的，如果前后两次读到的链表顺序出现差异，那么渲染的结果自然是不可控的。</p>
]]></content>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>React学习20220314 虚拟DOM</title>
    <url>/2022-03-14-React%E5%AD%A6%E4%B9%A020220314%20%E8%99%9A%E6%8B%9FDOM.html</url>
    <content><![CDATA[<h1 id="React学习20220314-虚拟DOM"><a href="#React学习20220314-虚拟DOM" class="headerlink" title="React学习20220314 虚拟DOM"></a>React学习20220314 虚拟DOM</h1><h2 id="虚拟DOM是什么"><a href="#虚拟DOM是什么" class="headerlink" title="虚拟DOM是什么"></a>虚拟DOM是什么</h2><p>是JS和DOM之间的一个映射缓存，在形态上表现为一个能够描述DOM结构及其属性信息的JS对象。</p>
<p>在REACT中，表现为</p>
<p><img src="G:/WorkStation/JavaScriptProject/React%E5%AD%A6%E4%B9%A0/React%E5%AD%A6%E4%B9%A020220314%20%E8%99%9A%E6%8B%9FDOM/assets/image-20220314142105501.png" alt="image-20220314142105501"></p>
<p>是JS对象，是对真实DOM的描述</p>
<h2 id="如何工作"><a href="#如何工作" class="headerlink" title="如何工作"></a>如何工作</h2><blockquote>
<ul>
<li>挂载阶段：结合JSX的描述，构建出虚拟DOM树，然后通过ReactDOM.render实现虚拟DOM到真实DOM的映射</li>
<li>更新阶段，页面的变化在作用于真实DOM之前，先作用于虚拟DOM，虚拟DOM在JS层借助算法先对比出那些真实DOM需要被改变，然后将改变作用于真实DOM</li>
</ul>
</blockquote>
<p>这一段历史讲得好有趣，摘下来</p>
<p><img src="G:/WorkStation/JavaScriptProject/React%E5%AD%A6%E4%B9%A0/React%E5%AD%A6%E4%B9%A020220314%20%E8%99%9A%E6%8B%9FDOM/assets/image-20220314142856250.png" alt="image-20220314142856250"></p>
<p><img src="G:/WorkStation/JavaScriptProject/React%E5%AD%A6%E4%B9%A0/React%E5%AD%A6%E4%B9%A020220314%20%E8%99%9A%E6%8B%9FDOM/assets/image-20220314145559439.png" alt="image-20220314145559439"></p>
<p><img src="G:/WorkStation/JavaScriptProject/React%E5%AD%A6%E4%B9%A0/React%E5%AD%A6%E4%B9%A020220314%20%E8%99%9A%E6%8B%9FDOM/assets/image-20220314145616729.png" alt="image-20220314145616729"></p>
<p data-nodeid="6717">可以看出，模板语法其实就是把 JS 和 HTML 结合在一起的一种规则，而模板引擎做的事情也非常容易理解。</p>
<p data-nodeid="6718">把 staff 这个数据源读进去，塞到预置好的 HTML 模板里，然后把两者融合在一起，吐出一段目标字符串给你。这段字符串的内容，其实就是一份标准的、可用于渲染的 HTML 代码，它将对应一个 DOM 元素。最后，将这个 DOM 元素挂载到页面中去，整个模板的渲染流程也就走完了。</p>
<p data-nodeid="6719">这个过程可以用伪代码来表示，如下所示：</p>
<pre class="lang-js" data-nodeid="6720"><code data-language="js"><span class="hljs-comment">// 数据和模板融合出 HTML 代码</span>
<span class="hljs-keyword">var</span> targetDOM = template(&#123;<span class="hljs-attr">data</span>: students&#125;)
<span class="hljs-comment">// 添加到页面中去</span>
<span class="hljs-built_in">document</span>.body.appendChild(targetDOM)
</code></pre>
<p data-nodeid="6721">当然，实际的过程会比我们描述的要复杂一些。这里我补充一下模板引擎的实现思路，供感兴趣的同学参考。模板引擎一般需要做下面几件事情：</p>
<ol data-nodeid="6722">
<li data-nodeid="6723">
<p data-nodeid="6724">读取 HTML 模板并解析它，分离出其中的 JS 信息；</p>
</li>
<li data-nodeid="6725">
<p data-nodeid="6726">将解析出的内容拼接成字符串，动态生成 JS 代码；</p>
</li>
<li data-nodeid="6727">
<p data-nodeid="6728">运行动态生成的 JS 代码，吐出“目标 HTML”；</p>
</li>
<li data-nodeid="6729">
<p data-nodeid="6730">将“目标 HTML”赋值给 innerHTML，触发渲染流水线，完成真实 DOM 的渲染。</p>
</li>
</ol>
<p data-nodeid="6731">使用模板引擎方案来渲染数据是非常爽的：每次数据发生变化时，我们都不用关心到底是哪里的数据变了，也不用手动去点对点完成 DOM 的修改。只<strong data-nodeid="6882">需要关注的仅仅是数据和数据变化本身</strong>，DOM 层面的改变模板引擎会帮我们做掉。</p>
<p data-nodeid="6732">如此看来，模板引擎像极了一个只需要接收命令，就能够把活干得漂漂亮亮的“扫地机器人”！可惜的是，模板引擎出现的契机虽然是为了使用户界面与业务数据相分离，但实际的应用场景基本局限在“实现高效的字符串拼接”这一个点上，因此不能指望它去做太复杂的事情。尤其令人无法接受的是，<strong data-nodeid="6888">它在性能上的表现并不尽如人意</strong>：由于不够“智能”，它更新 DOM 的方式是将已经渲染出 DOM 整体注销后再整体重渲染，并且不存在更新缓冲这一说。在 DOM 操作频繁的场景下，模板引擎可能会直接导致页面卡死。</p>
<blockquote data-nodeid="6733">
<p data-nodeid="6734">注：请注意小标题中“早期”这个限定词——本课时所讨论的“模板引擎”概念，指的是虚拟 DOM 思想推而广之以前，相对原始的一类模板引擎，这类模板引擎曾经主导了一个时代。但时下来看，越来越多的模板引擎正在引入虚拟 DOM，模板引擎最终也将走向现代化。</p>
</blockquote>
<p data-nodeid="6735">虽然指望模板引擎实现生产力解放有些天方夜谭，但模板引擎在思想上无疑具备高度的先进性：允许程序员只关心数据而不必关心 DOM 细节的这一操作，和 React 的“数据驱动视图”思想如出一辙，实在是高！</p>
<h3 data-nodeid="6736">那该怎么办呢？</h3>
<p data-nodeid="6737">jQuery 救不了加班写 DOM 操作的前端，模板引擎也救不了，那该怎么办呢？</p>
<p data-nodeid="6738">这时候有一批仁人志士，兴许是从模板引擎的设计思想上得到了启发，他们明确了要走“数据驱动视图”这条基本道路，于是便沿着这个思路往下摸索：模板引擎的数据驱动视图方案，核心问题在于对真实 DOM 的修改过于“大刀阔斧”，导致了 DOM 操作的范围过大、频率过高，进而可能会导致糟糕的性能。然后这帮人就想啊：既然操作真实 DOM 对性能损耗这么大，那我操作假的 DOM 不就行了？</p>
<p data-nodeid="6739">沿着这个思路再往下走，就有了我们都爱的虚拟 DOM。</p>
<blockquote data-nodeid="6740">
<p data-nodeid="6741">注：出于严谨，还是要解释下。真实历史中的虚拟 DOM 创作过程，到底有没有向模板引擎去学习，这个暂时无从考证。但是按照前端发展的过程来看，模板引擎和虚拟 DOM 确实在思想上存在递进关系，很多场景下，面试官也可能会问及两者的关系。因此在此处，我采取了这样一种表述方式，希望能够帮助你更好地把握住问题的关键所在。</p>
</blockquote>

<p>虚拟DOM使得之前的全局刷新，改成了有更新的部分更新，在真实DOM前加了一层</p>
<p><img src="G:/WorkStation/JavaScriptProject/React%E5%AD%A6%E4%B9%A0/React%E5%AD%A6%E4%B9%A020220314%20%E8%99%9A%E6%8B%9FDOM/assets/image-20220314151706530.png" alt="image-20220314151706530"></p>
<p>虚拟DOM解决的问题重心不是性能</p>
<p><img src="G:/WorkStation/JavaScriptProject/React%E5%AD%A6%E4%B9%A0/React%E5%AD%A6%E4%B9%A020220314%20%E8%99%9A%E6%8B%9FDOM/assets/image-20220314151854443.png" alt="image-20220314151854443"></p>
<h1 id="Reconciliation过程与Diff算法"><a href="#Reconciliation过程与Diff算法" class="headerlink" title="Reconciliation过程与Diff算法"></a>Reconciliation过程与Diff算法</h1><h2 id="Diff算法"><a href="#Diff算法" class="headerlink" title="Diff算法"></a>Diff算法</h2><p>找两个树结构之间的不同</p>
<h3 id="两个规律"><a href="#两个规律" class="headerlink" title="两个规律"></a>两个规律</h3><p><img src="G:/WorkStation/JavaScriptProject/React%E5%AD%A6%E4%B9%A0/React%E5%AD%A6%E4%B9%A020220314%20%E8%99%9A%E6%8B%9FDOM/assets/image-20220314152249841.png" alt="image-20220314152249841"></p>
<p><img src="G:/WorkStation/JavaScriptProject/React%E5%AD%A6%E4%B9%A0/React%E5%AD%A6%E4%B9%A020220314%20%E8%99%9A%E6%8B%9FDOM/assets/image-20220314153544145.png" alt="image-20220314153544145"></p>
<p>对于Key，下图可以比较好地展示使用了Key后的更新策略</p>
<p><img src="G:/WorkStation/JavaScriptProject/React%E5%AD%A6%E4%B9%A0/React%E5%AD%A6%E4%B9%A020220314%20%E8%99%9A%E6%8B%9FDOM/assets/image-20220314153745501.png" alt="image-20220314153745501"></p>
<p>如果不使用key，则仅有AB可保留，其他均被重建</p>
]]></content>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>React学习20220314 SetState</title>
    <url>/2022-03-14-React%E5%AD%A6%E4%B9%A020220314%20SetState.html</url>
    <content><![CDATA[<h1 id="React学习20220314-SetState"><a href="#React学习20220314-SetState" class="headerlink" title="React学习20220314 SetState"></a>React学习20220314 SetState</h1><h2 id="初始认知"><a href="#初始认知" class="headerlink" title="初始认知"></a>初始认知</h2><p>setState之后立马访问对应state，会发现它并没有改变，而是会在之后某个时间发生变化</p>
<h2 id="异步的动机和原理"><a href="#异步的动机和原理" class="headerlink" title="异步的动机和原理"></a>异步的动机和原理</h2><img src="https://s0.lgstatic.com/i/image/M00/6D/8A/Ciqc1F-uMeSAYK6FAABN0Vwnq5M814.png" alt="图片3.png" data-nodeid="13893">



<h2 id="异步避免重复reRender"><a href="#异步避免重复reRender" class="headerlink" title="异步避免重复reRender"></a>异步避免重复reRender</h2><p><img src="G:/WorkStation/JavaScriptProject/React%E5%AD%A6%E4%B9%A0/typoimg/image-20220314185248371.png" alt="image-20220314185248371"></p>
<h2 id="从源码角度看异步setState"><a href="#从源码角度看异步setState" class="headerlink" title="从源码角度看异步setState"></a>从源码角度看异步setState</h2><p><img src="G:/WorkStation/JavaScriptProject/React%E5%AD%A6%E4%B9%A0/typoimg/image-20220314185446537.png" alt="image-20220314185446537"></p>
<h2 id="再查看batchingStrategy"><a href="#再查看batchingStrategy" class="headerlink" title="再查看batchingStrategy"></a>再查看batchingStrategy</h2><p><img src="G:/WorkStation/JavaScriptProject/React%E5%AD%A6%E4%B9%A0/typoimg/image-20220314185810854.png" alt="image-20220314185810854"></p>
<h2 id="理解Transaction（事务）机制"><a href="#理解Transaction（事务）机制" class="headerlink" title="理解Transaction（事务）机制"></a>理解Transaction（事务）机制</h2><p><img src="G:/WorkStation/JavaScriptProject/React%E5%AD%A6%E4%B9%A0/typoimg/image-20220314185913490.png" alt="image-20220314185913490"></p>
<h2 id="同步现象的本质"><a href="#同步现象的本质" class="headerlink" title="同步现象的本质"></a>同步现象的本质</h2><p><img src="G:/WorkStation/JavaScriptProject/React%E5%AD%A6%E4%B9%A0/typoimg/image-20220314190033221.png" alt="image-20220314190033221"></p>
]]></content>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>字节二面记录</title>
    <url>/2022-04-02-%E5%AD%97%E8%8A%82%E4%BA%8C%E9%9D%A2%E8%AE%B0%E5%BD%95.html</url>
    <content><![CDATA[<h1 id="2022-x2F-4-x2F-2-字节二面记录"><a href="#2022-x2F-4-x2F-2-字节二面记录" class="headerlink" title="2022&#x2F;4&#x2F;2 字节二面记录"></a>2022&#x2F;4&#x2F;2 字节二面记录</h1><blockquote>
<p>啸问题:开头以为只有暑假可以实习,直接被面试官拒了,然后被同学提醒才发现开学也能实习,紧急联系回来了</p>
<p>面试官还挺好的,居然还能继续面</p>
</blockquote>
<h2 id="问了些啥"><a href="#问了些啥" class="headerlink" title="问了些啥"></a>问了些啥</h2><p>最开始还是最难顶的自我介绍,感觉像是一个垃圾桶被要求介绍自己(x),我下次应该记住重复一下北理是个985,不然听起来像个野鸡大学(</p>
<p>和一面不同的是,这回自我介绍完了就开始做题,还问了python里头元组和字典的关系(答不出来,寄)</p>
<p>计网方面问了http请求一个页面的过程(上学期刚上完这学期就忘得差不多了属于是)</p>
<p>这回没问数据库,不知道是为啥</p>
<p>问了对软件项目管理的理解(?),我就当问我管理上的看法,感觉有点答非所问</p>
<h2 id="哪里不行"><a href="#哪里不行" class="headerlink" title="哪里不行"></a>哪里不行</h2><p>对语言的理解比较烂,属于是只知道用不知道学</p>
<p>计网还是得看看http请求的全过程</p>
<p>其实数据库查询语句还有点欠缺,不过能用</p>
]]></content>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>微型数据库开发记录</title>
    <url>/2022-09-04-%E5%BE%AE%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>近三周应小学期老师要求，和4位队友合作开发了一个微型数据库系统。由于耗费了许多的精力，我想将开发过程记录在这个博客上。</p>
<h2 id="功能性需求："><a href="#功能性需求：" class="headerlink" title="功能性需求："></a>功能性需求：</h2><ol>
<li>创建数据库和表，能够以文件形式保存在磁盘上（操作系统的文 件、进程管理，数据结构 的 B树）</li>
<li>支持表的增删改查（数据库 中SQL形式，编译的词法语法检查）</li>
<li>SQL中支持通配符（数据结构的查找）、多表连接（操作系统 的 文件管理）</li>
<li>支持整数、实数、字符（串）、日期等数据类型</li>
<li>支持索引（数据库、数据结构 ）</li>
</ol>
<h2 id="性能性需求"><a href="#性能性需求" class="headerlink" title="性能性需求"></a>性能性需求</h2><ol>
<li>单表记录最大行数不少于10万行，不少于10 列</li>
<li>单表响应时间不多于 1秒（普通笔记本）</li>
<li>主表不少于5000行，子表不少于20000行时，连接操作响应时 间不多于 2 秒</li>
</ol>
<h1 id="痛苦的开端"><a href="#痛苦的开端" class="headerlink" title="痛苦的开端"></a>痛苦的开端</h1><h2 id="最初的迷茫"><a href="#最初的迷茫" class="headerlink" title="最初的迷茫"></a>最初的迷茫</h2><p>开始的时候确实是啥也不知道，一堆人在教室里商量了半天也没想明白该干些什么，就留了两天各自查资料。等大家查完，在教室里一讨论，就发现任务极其重大。由于要实现5000*20000级别的表连接，还有100 000级别的数据插入，因此我们需要考虑底层的文件存储，但由于开发经验的不足和工期较短，我们在讨论中断定，凭空实现完全的页面管理对我们来说是不可能的，因此决定退而求其次，找一份有页面管理的借鉴一下。</p>
<p>因此，我们翻看了sqlite的源码，还通篇学习了一门斯坦福的课程（代码仓库叫redbase）,在途中，还重新确定了我们要实现的关键字等需求。</p>
<h2 id="借鉴都借鉴不明白"><a href="#借鉴都借鉴不明白" class="headerlink" title="借鉴都借鉴不明白"></a>借鉴都借鉴不明白</h2><p>然后就出现了问题，我们找到了一份很好的页面管理代码，但光页面管理（包括缓冲区管理）的代码量就直接超过了8000行，为了实现它我们需要做的工作过于繁复（虽然我们确实尝试了一天）。</p>
<p>同时，Linux开发也对我们组造成了较大的麻烦，因为有开发经验的仅有一人，其他人光环境配置就花了很长时间。后来采用先富带后富的方式，总算是搞定了整组的环境。</p>
<h2 id="借鉴不了，想一个自己的框架吧！"><a href="#借鉴不了，想一个自己的框架吧！" class="headerlink" title="借鉴不了，想一个自己的框架吧！"></a>借鉴不了，想一个自己的框架吧！</h2><p>最后，我们发现，我们的这种特种需求，只有我们自己琢磨一个框架来才能够满足3周内开发完成，且能够实现一定的文件管理和查询优化。</p>
<p>这里用文字形容一下我们初步商量的框架</p>
<blockquote>
<p>顶层：词法分析-&gt;语法分析，产出一棵抽象语法树</p>
<p>中层：语义分析，并实现一系列数据库操作函数</p>
<p>底层：B+树代码和物理存储管理代码，存储二进制数据。</p>
</blockquote>
<p>中层咱暂时实在想不明白，就先大致写了一点儿，之后先把顶层和底层开发出来，到时候再看中层该怎么搞。</p>
<h1 id="辛苦又充满成长的开发过程"><a href="#辛苦又充满成长的开发过程" class="headerlink" title="辛苦又充满成长的开发过程"></a>辛苦又充满成长的开发过程</h1><p>经历了鸡飞狗跳，还有一堆学校其他杂事（搬家，做华为云实验）的一周之后，我们正式开始开发。</p>
<h2 id="顶层"><a href="#顶层" class="headerlink" title="顶层"></a>顶层</h2><p>顶层被我们归类为最困难的工作，我们想了些取巧的办法让它稍微简单一点儿。这块儿是组里大佬写的，我也只是有所了解。</p>
<p>参考redbase的顶层（就算是斯坦福的课，顶层代码也是预先写好，不用学生写的），我们按照自己的需求写了一份语法文件，并用yacc（应该）生成分析代码。</p>
<h2 id="底层"><a href="#底层" class="headerlink" title="底层"></a>底层</h2><p>第二周折腾了老半天，把一份B+树代码折腾出来了，它还满足我们的要求（改泛型改了一个周末）：能够存储int，float和string类型的数据（本来还有个要求是，一级索引将和纯数据文件放在一起，方便存取，但泛型这东西实在不是一个初学c++的同志能整的这么明白的，就没实现）</p>
<h3 id="数据文件（初版）"><a href="#数据文件（初版）" class="headerlink" title="数据文件（初版）"></a>数据文件（初版）</h3><p>这里给出示例文件框架</p>
<blockquote>
<p>save</p>
<p>-table1 示例表名</p>
<p>–table1.data存放二进制数据文件</p>
<p>—-table1.meta存放表说明文件</p>
<p>—-IND&#x2F;&#x2F;存放索引</p>
<p>——-table1&#x2F;&#x2F;自增主键索引</p>
<p>—其他索引</p>
</blockquote>
]]></content>
      <tags>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>计组复习</title>
    <url>/2022-09-11-%E8%AE%A1%E7%BB%84%E5%A4%8D%E4%B9%A0.html</url>
    <content><![CDATA[<h1 id="指令系统"><a href="#指令系统" class="headerlink" title="指令系统"></a>指令系统</h1><p>基本格式： 操作码| 地址码   	（字节的整数倍）</p>
<h3 id="地址码结构"><a href="#地址码结构" class="headerlink" title="地址码结构"></a>地址码结构</h3><blockquote>
<p>四地址指令： A1 OP A2 -&gt; A3 4次访存</p>
<p>三地址： 四地址-A3 （通过PC+1获得下一条指令位置） 4次访存</p>
<p>二地址： 三地址-A3 （ 结果存放在A1位置）4次访存</p>
<p>一地址： A_cc OP A1-&gt;Acc (Acc在累加寄存器中) 2次访存</p>
<p>零地址： 都在堆栈中</p>
</blockquote>
<h3 id="操作码"><a href="#操作码" class="headerlink" title="操作码"></a>操作码</h3><p>定长： 简化架构，但利用率低</p>
<p>变长：设计复杂，但同字节长度下可支持较多指令</p>
<h3 id="编址方式"><a href="#编址方式" class="headerlink" title="编址方式"></a>编址方式</h3><p>目的： 指出操作数的来源和去向</p>
<p>需要编址的：通用寄存器，主存，输入输出设备</p>
<h4 id="编址单位"><a href="#编址单位" class="headerlink" title="编址单位"></a>编址单位</h4><blockquote>
<ol>
<li>字编址<br>编址单位&#x3D;访问单位，每个编址单位所包含的信息量与读写寄存器所得的信息量相同</li>
<li>字节编址<br>编址单位&lt;访问单位<br>编址单位和信息的基本单位（一个字节）相一致</li>
<li>位编址<br>先不谈</li>
</ol>
</blockquote>
<h4 id="地址码的位数"><a href="#地址码的位数" class="headerlink" title="地址码的位数"></a>地址码的位数</h4><p>与主存容量成正比，和最小寻址单位成反比</p>
<h3 id="数据寻址"><a href="#数据寻址" class="headerlink" title="数据寻址"></a>数据寻址</h3><p>目的：找到所需的操作数</p>
<blockquote>
<ol>
<li>立即寻址<br>直接取出操作数</li>
<li>寄存器寻址<br>给出寄存器编号，再访问寄存器取出操作数</li>
<li>直接寻址<br>取出操作数再主存中的地址</li>
<li>间接寻址<br>从主存中取出存放操作数地址的地址</li>
<li>寄存器间接寻址<br>获取寄存器编号，寄存器中该编号存放操作数在主存的地址</li>
<li>变址寻址<br>读取形式地址A加上变址寄存器Rx的值，获取真实地址</li>
<li>基址寻址<br>读取位移量D，与基址寄存器中的值相加获得真是地址</li>
<li>相对寻址<br>相对于基址寻址，由程序寄存器提供基准地址</li>
<li>页面寻址<br>将整个主存空间分成若干个大小相同的页，每页有自己的编号，称为页面地址，业内的主存单元也有自己的编号，称为页内地址，操作数的有效地址就被分为：页面地址和页内地址两部分<br>有三种页面寻址方式<ol>
<li>基页寻址<br>有效地址为 0&#x2F;&#x2F;A （&#x2F;&#x2F;为简单拼接)</li>
<li>当前页寻址<br>页面地址为程序计数器PC的高位部分，有效地址为(PC)h &#x2F;&#x2F; A</li>
<li>页寄存器寻址<br>页面地址取自页寄存器，与形式地址拼接形成操作数有效地址<br>EA&#x3D;(页寄存器)&#x2F;&#x2F;A</li>
</ol>
</li>
</ol>
</blockquote>
<h3 id="指令寻址"><a href="#指令寻址" class="headerlink" title="指令寻址"></a>指令寻址</h3><p>目的：寻找下一条要执行的指令地址</p>
<h4 id="顺序寻址："><a href="#顺序寻址：" class="headerlink" title="顺序寻址："></a>顺序寻址：</h4><p>PC+1(程序计数器加1)</p>
<h4 id="跳跃寻址："><a href="#跳跃寻址：" class="headerlink" title="跳跃寻址："></a>跳跃寻址：</h4><p>通过程序转移类指令实现</p>
<p>直接、相对、间接寻址（详见数据寻址）</p>
<h2 id="堆栈与堆栈操作"><a href="#堆栈与堆栈操作" class="headerlink" title="堆栈与堆栈操作"></a>堆栈与堆栈操作</h2><h3 id="堆栈结构"><a href="#堆栈结构" class="headerlink" title="堆栈结构"></a>堆栈结构</h3><blockquote>
<ol>
<li>寄存器堆栈<br>一组专门的寄存器构成，栈顶固定，且组中寄存器互相连接，可将一个寄存器中的内容推移到另一个寄存器中去</li>
<li>存储器堆栈<br>从主存中划出一块区域来当堆栈，大小可变，栈底固定，栈顶浮动，需要一个硬件寄存器作为堆栈栈顶指针SP<br>PS: 栈底指针地址大于栈顶地址，因此进栈时，栈顶指针先减一，然后将数据压入指针指向的堆栈位置</li>
</ol>
</blockquote>
<h3 id="堆栈操作（用途）"><a href="#堆栈操作（用途）" class="headerlink" title="堆栈操作（用途）"></a>堆栈操作（用途）</h3><p>【一般计算机】</p>
<ol>
<li>暂存中断断点</li>
<li>子程序调用时的返回地址</li>
<li>状态标志</li>
<li>现场信息</li>
<li>子程序调用时参数的传递</li>
</ol>
<p>因此访问堆栈的指令只有进栈和出栈两种。</p>
<h2 id="指令类型"><a href="#指令类型" class="headerlink" title="指令类型"></a>指令类型</h2><h3 id="数据传送类指令"><a href="#数据传送类指令" class="headerlink" title="数据传送类指令"></a>数据传送类指令</h3><p>用于寄存器与寄存器，寄存器与主存 ，主存与主存之间的数据传送</p>
<ol>
<li>一般传送指令：将源地址的数据复制到目的地址</li>
<li>堆栈操作指令：因为堆栈（主存中开辟的）是一个特殊区域，因此对堆栈的操作也就是对存储器的操作</li>
<li>数据交换指令：将源操作数和目的地操作数相互交换位置</li>
</ol>
<h3 id="运算类指令"><a href="#运算类指令" class="headerlink" title="运算类指令"></a>运算类指令</h3><ol>
<li>算术运算指令</li>
<li>逻辑运算指令</li>
<li>移位指令（算数移位【保持操作数符号不变，左移数值*2，右移数值&#x2F;2】，逻辑移位【不管符号】，循环移位）</li>
</ol>
<h3 id="程序控制类指令"><a href="#程序控制类指令" class="headerlink" title="程序控制类指令"></a>程序控制类指令</h3><p>用于控制程序的执行方向，并使程序具有测试、分析与判断的能力</p>
<ol>
<li>转移指令<br>无条件（JMP）： 直接吧程序转向新的位置执行<br>条件转移：条件满足才转移</li>
<li>子程序调用指令<br>子程序是一组可以公用的指令序列，只要知道地址就能调用<br>主程序转向子程序称为子程序调用指令（CALL）<br>子程序转向主程序成为转移指令（RET）<br>一般使用堆栈保持返回地址</li>
<li>返回指令（RET）</li>
</ol>
<h3 id="输入输出类指令"><a href="#输入输出类指令" class="headerlink" title="输入输出类指令"></a>输入输出类指令</h3><p>实现主机与外部设备之间的信息交换</p>
<h4 id="独立编址的IO"><a href="#独立编址的IO" class="headerlink" title="独立编址的IO"></a>独立编址的IO</h4><p>独立编址：外设端口和主存单元独立编址，指令系统有专门的IN&#x2F;OUT指令，信息从外设到主机称为输入</p>
<p>指令中给出外设端口地址，这些地址是另一个独立的地址空间</p>
<h4 id="统一编址的IO"><a href="#统一编址的IO" class="headerlink" title="统一编址的IO"></a>统一编址的IO</h4><p>指令系统没有专门的IO指令，用一般的数据传送类指令来实现</p>
<h2 id="数值的机器运算"><a href="#数值的机器运算" class="headerlink" title="数值的机器运算"></a>数值的机器运算</h2><h2 id="基本算数运算的实现"><a href="#基本算数运算的实现" class="headerlink" title="基本算数运算的实现"></a>基本算数运算的实现</h2><p>并行可以加快过程，但并行会使计算式过长，因此采用并串联合使用的方式取得性能和逻辑的平衡</p>
<ol>
<li>单级先行进位方式<br>组内并行，组间串行</li>
<li>多级先行进位方式<br>组内并行，组间也并行</li>
</ol>
<h2 id="定点加减运算"><a href="#定点加减运算" class="headerlink" title="定点加减运算"></a>定点加减运算</h2><p>补码加法：[X+Y]补&#x3D;[X]补+[Y]补</p>
<p>减法也只是加补码求反后的结果</p>
<p>后面的先不看了</p>
<h2 id="存储系统和结构"><a href="#存储系统和结构" class="headerlink" title="存储系统和结构"></a>存储系统和结构</h2><h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><h3 id="按作用分类"><a href="#按作用分类" class="headerlink" title="按作用分类"></a>按作用分类</h3><ol>
<li>高速缓冲存储器</li>
</ol>
<p>位于主存和CPU之间</p>
<ol start="2">
<li>主存储器</li>
</ol>
<p>CPU 可直接访问</p>
<ol start="3">
<li>辅助存储器</li>
</ol>
<p>CPU不能直接访问</p>
<h3 id="存取方式分类"><a href="#存取方式分类" class="headerlink" title="存取方式分类"></a>存取方式分类</h3><ol>
<li>RAM 随机存取<br>存取时间相同，随机读写访问</li>
<li>ROM 只读<br>特殊的RAM，只能读不能写</li>
<li>SAM 顺序存取<br>只能按某种顺序存取，存取时间与存储体上的物理位置有关</li>
<li>DAM 直接存取存储器<br>读取步骤： 第一步直接指向存储器中的某个小区域，第二部在小区域内顺序检索</li>
</ol>
<h3 id="存取层次结构"><a href="#存取层次结构" class="headerlink" title="存取层次结构"></a>存取层次结构</h3><p>cache 主存 辅存 分为两个层次</p>
<h4 id="Cache-主存-存储层次"><a href="#Cache-主存-存储层次" class="headerlink" title="Cache-主存 存储层次"></a>Cache-主存 存储层次</h4><p>目的：解决主存速度不足</p>
<p>方式： 在CPU和主存之间，增加辅助硬件，让他们构成一个整体，使CPU速度接近cache，容量接近主存</p>
<h4 id="主存-辅存存储层次"><a href="#主存-辅存存储层次" class="headerlink" title="主存 - 辅存存储层次"></a>主存 - 辅存存储层次</h4><p>目的：解决主存容量不足</p>
<h2 id="主存储器的组织"><a href="#主存储器的组织" class="headerlink" title="主存储器的组织"></a>主存储器的组织</h2><h3 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h3><p>存储体</p>
<p>地址译码驱动电路</p>
<ul>
<li>译码器和驱动器，译码器将地址总线输入的地址吗转换成输出线上的有效电平，驱动器提供驱动电流去驱动相应的读写电路</li>
</ul>
<p>IO和读写电路</p>
<h3 id="存储单元"><a href="#存储单元" class="headerlink" title="存储单元"></a>存储单元</h3><p>位： 二进制数的最基本单位，也是存储器存储信息的最小单位</p>
<p>存储字：一个二进制数由若干位组成，当这个二进制数作为一个整体存入或取出时，这个数称为存储字</p>
<p>存储单元（主存单元) 存放存储字或存储字节的主存空间，由计算机的结构确定。是CPU对主存可访问擦欧总的最小存储单位。</p>
<p>存储体： 大量存储单元集合构成一个存储体</p>
<h3 id="技术指标"><a href="#技术指标" class="headerlink" title="技术指标"></a>技术指标</h3><ol>
<li>存储容量<br>指主存所能容纳的二进制信息总量，对字节编址的计算机，以字节数表示，对字编址的计算机，以字数和字长的乘积来表示</li>
<li>存取速度<br>2.1 存取时间<br>从启动一次存储器操作到完成该操作所经历的时间<br>2.2 存取周期<br>指存储器进行一次完整的读写操作所需的全部时间，连续两次访问存储器操作之间所需要的最短时间</li>
<li>主存带宽<br>每秒从主存进出信息的最大数量（字&#x2F;秒或 字节&#x2F; 秒 或 位&#x2F; 秒）</li>
</ol>
<h2 id="半导体随机存储器和只读存储器"><a href="#半导体随机存储器和只读存储器" class="headerlink" title="半导体随机存储器和只读存储器"></a>半导体随机存储器和只读存储器</h2><h3 id="动态RAM的刷新"><a href="#动态RAM的刷新" class="headerlink" title="动态RAM的刷新"></a>动态RAM的刷新</h3><h4 id="刷新方式"><a href="#刷新方式" class="headerlink" title="刷新方式"></a>刷新方式</h4><h5 id="集中式"><a href="#集中式" class="headerlink" title="集中式"></a>集中式</h5><p>集中安排若干个刷新周期，刷新时停止读写操作</p>
<p>时间&#x3D;存储体矩阵行数*刷新周期</p>
<h5 id="分散式"><a href="#分散式" class="headerlink" title="分散式"></a>分散式</h5><p>把刷新操作分散到每个存取周期内进行，此时存取周期被分成读写和刷新两个部分。</p>
<h5 id="异步式"><a href="#异步式" class="headerlink" title="异步式"></a>异步式</h5><p>把刷新操作平均分配到整个最大刷新间隔时间内进行</p>
<p>刷新间隔&#x3D;最大刷新间隔时间&#x2F; 行数</p>
<h3 id="主存容量的扩展"><a href="#主存容量的扩展" class="headerlink" title="主存容量的扩展"></a>主存容量的扩展</h3>]]></content>
      <tags>
        <tag>computer</tag>
      </tags>
  </entry>
  <entry>
    <title>21/12/6 Database exp 8</title>
    <url>/21-12-6-Database-exp-8.html</url>
    <content><![CDATA[<ol>
<li><h1 id="分析系统功能"><a href="#分析系统功能" class="headerlink" title="分析系统功能"></a>分析系统功能</h1><ol>
<li><h2 id="ER图"><a href="#ER图" class="headerlink" title="ER图"></a>ER图</h2><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120140233739.png" alt="image-20211120140233739"></li>
<li><h2 id="关系模型"><a href="#关系模型" class="headerlink" title="关系模型"></a>关系模型</h2><ol>
<li><h3 id="对象的属性描述"><a href="#对象的属性描述" class="headerlink" title="对象的属性描述"></a>对象的属性描述</h3>客户(<code>&lt;u&gt;</code>客户编号<code>&lt;/u&gt;</code>,电子邮箱,登录密码,身份证,联系方式,姓名)<br>银行卡(<code>&lt;u&gt;</code>卡号<code>&lt;/u&gt;</code>,类型,客户编号)<br>理财产品(<code>&lt;u&gt;</code>理财产品编号<code>&lt;/u&gt;</code>,理财年限,购买金额,产品名称,产品描述)<br>基金(<code>&lt;u&gt;</code>基金编号<code>&lt;/u&gt;</code>,基金名称,基金类型,风险等级,基金管理者,基金金额)<br>保险(<code>&lt;u&gt;</code>保险编号<code>&lt;/u&gt;</code>,保险名称,适用人群,保险项目,保险金额,保险年限)<br>资产(<code>&lt;u&gt;</code>客户编号<code>&lt;/u&gt;</code>,<code>&lt;u&gt;</code>资产编号<code>&lt;/u&gt;</code>,状态,购买数量,收益,购买时间)</li>
<li><h3 id="对象之间关系描述"><a href="#对象之间关系描述" class="headerlink" title="对象之间关系描述"></a>对象之间关系描述</h3>一个客户可以购买多种理财产品<br>可以办理多张银行卡<br>一个客户可以购买多种保险<br>一个客户可以购买多种基金<br><img src="https://s2.loli.net/2021/12/09/GWJFoN89vZrIOtc.png" alt="image-20211120145443968"></li>
</ol>
</li>
</ol>
</li>
<li><h2 id="物理设计与数据字典"><a href="#物理设计与数据字典" class="headerlink" title="物理设计与数据字典"></a>物理设计与数据字典</h2><ol>
<li><h3 id="表及其属性"><a href="#表及其属性" class="headerlink" title="表及其属性"></a>表及其属性</h3>client(c_id,c_name,c_mail,c_id_card,c_phone,c_password)<br>bank_card(b_id,b_type,b_c_id)<br>property(p_id,p_c_id,p_i_id,p_status,p_amount,p_get_time,p_income,p_type)<br>fund(f_name,f_id,f_type,f_amount,risk_level,f_manager)<br>insurance(i_name,i_id,i_amount,i_person,i_year,i_project)<br>f_product(fp_id,fp_name，fp_description，fp_amount，fp_year)</li>
<li><h3 id="数据字典"><a href="#数据字典" class="headerlink" title="数据字典"></a>数据字典</h3><ol>
<li><h4 id="表1-1-client表"><a href="#表1-1-client表" class="headerlink" title="表1-1 client表"></a>表1-1 client表</h4><table>
<thead>
<tr>
<th><strong>字段名称</strong></th>
<th><strong>字段类型</strong></th>
<th><strong>约束</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>c_id</td>
<td>INTEGER</td>
<td>PRIMARY KEY</td>
<td>客户编码</td>
</tr>
<tr>
<td>c_name</td>
<td>VARCHAR(100)</td>
<td>NOT NULL</td>
<td>客户名称</td>
</tr>
<tr>
<td>c_mail</td>
<td>CHAR(30)</td>
<td>UNIQUE</td>
<td>客户邮箱</td>
</tr>
<tr>
<td>c_id_card</td>
<td>CHAR(20)</td>
<td>UNIQUE NOT NULL</td>
<td>客户身份证</td>
</tr>
<tr>
<td>c_phone</td>
<td>CHAR(20)</td>
<td>UNIQUE NOT NULL</td>
<td>客户手机号</td>
</tr>
<tr>
<td>c_password</td>
<td>CHAR(20)</td>
<td>NOT NULL</td>
<td>客户登录密码</td>
</tr>
</tbody></table>
</li>
<li><h4 id="表1-2bank-card表"><a href="#表1-2bank-card表" class="headerlink" title="表1-2bank_card表"></a>表1-2bank_card表</h4><table>
<thead>
<tr>
<th><strong>字段名称</strong></th>
<th><strong>字段类型</strong></th>
<th><strong>约束</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>b_id</td>
<td>INTEGER</td>
<td>PRIMARY KEY</td>
<td>银行卡号</td>
</tr>
<tr>
<td>b_type</td>
<td>CHAR(20)</td>
<td>NOT NULL</td>
<td>银行卡类型</td>
</tr>
<tr>
<td>b_c_id</td>
<td>INTERGER</td>
<td>NOT NULL<br />FOREIGNKEY</td>
<td>客户编号</td>
</tr>
</tbody></table>
</li>
<li><h4 id="表1-3-property资产表"><a href="#表1-3-property资产表" class="headerlink" title="表1-3 property资产表"></a>表1-3 property资产表</h4><table>
<thead>
<tr>
<th><strong>字段名称</strong></th>
<th><strong>字段类型</strong></th>
<th><strong>约束</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>p_id</td>
<td>INTEGER</td>
<td>PRIMARY KEY</td>
<td>资产编号</td>
</tr>
<tr>
<td>p_c_id</td>
<td>INTEGER</td>
<td>NOT NULL<br />FOREIGN KEY</td>
<td>客户编号<br />外键,对应client中的c_id</td>
</tr>
<tr>
<td>p_i_id</td>
<td>INTEGER</td>
<td>NOT NULL<br />FOREIGN KEY</td>
<td>商品编号 ,对应三种产品的id</td>
</tr>
<tr>
<td>p_status</td>
<td>CHAR(20)</td>
<td>NOT NULL</td>
<td>状态</td>
</tr>
<tr>
<td>p_amount</td>
<td>INTERGER</td>
<td>NOT NULL</td>
<td>购买数量</td>
</tr>
<tr>
<td>p_get_time</td>
<td>DATE</td>
<td>NOT NULL</td>
<td>购买时间</td>
</tr>
<tr>
<td>p_income</td>
<td>INTERGER</td>
<td></td>
<td>收益</td>
</tr>
<tr>
<td>p_type</td>
<td>INTERGER</td>
<td>NOT NULL</td>
<td>1代表是理财产品,2代表保险,3代表基金</td>
</tr>
</tbody></table>
</li>
<li><h4 id="表1-4-f-products-理财产品表"><a href="#表1-4-f-products-理财产品表" class="headerlink" title="表1-4 f_products 理财产品表"></a>表1-4 f_products 理财产品表</h4><table>
<thead>
<tr>
<th><strong>字段名称</strong></th>
<th><strong>字段类型</strong></th>
<th><strong>约束</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>fp_id</td>
<td>INTEGER</td>
<td>PRIMARY KEY</td>
<td>理财产品编号</td>
</tr>
<tr>
<td>fp_year</td>
<td>INTEGER</td>
<td></td>
<td>理财年限</td>
</tr>
<tr>
<td>fp_amount</td>
<td>INTERGER</td>
<td></td>
<td>购买金额</td>
</tr>
<tr>
<td>fp_name</td>
<td>VARCHAR(200)</td>
<td>NOT NULL</td>
<td>产品名称</td>
</tr>
<tr>
<td>fp_description</td>
<td>VARCHAR(2000)</td>
<td>NOT NULL</td>
<td>产品描述</td>
</tr>
</tbody></table>
</li>
<li><h4 id="表1-5-insurance-保险表"><a href="#表1-5-insurance-保险表" class="headerlink" title="表1-5 insurance 保险表"></a>表1-5 insurance 保险表</h4><table>
<thead>
<tr>
<th><strong>字段名称</strong></th>
<th><strong>字段类型</strong></th>
<th><strong>约束</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>i_id</td>
<td>INTEGER</td>
<td>PRIMARY KEY</td>
<td>保险编号</td>
</tr>
<tr>
<td>i_name</td>
<td>VARCHAR(100)</td>
<td>NOT NULL</td>
<td>保险名称</td>
</tr>
<tr>
<td>i_person</td>
<td>CHAR(30)</td>
<td></td>
<td>适用人群</td>
</tr>
<tr>
<td>i_project</td>
<td>VARCHAR(200)</td>
<td></td>
<td>保险项目</td>
</tr>
<tr>
<td>i_amount</td>
<td>INTERGER</td>
<td></td>
<td>保险金额</td>
</tr>
<tr>
<td>i_year</td>
<td>CHAR(20)</td>
<td>NOT NULL</td>
<td>保险年限</td>
</tr>
</tbody></table>
</li>
<li><h4 id="表1-6-fund基金表"><a href="#表1-6-fund基金表" class="headerlink" title="表1-6 fund基金表"></a>表1-6 fund基金表</h4><table>
<thead>
<tr>
<th><strong>字段名称</strong></th>
<th><strong>字段类型</strong></th>
<th><strong>约束</strong></th>
<th><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td>f_id</td>
<td>INTEGER</td>
<td>PRIMARY KEY</td>
<td>基金编号</td>
</tr>
<tr>
<td>f_name</td>
<td>VARCHAR(100)</td>
<td>NOT NULL</td>
<td>基金名称</td>
</tr>
<tr>
<td>f_type</td>
<td>CHAR(30)</td>
<td></td>
<td>基金类型</td>
</tr>
<tr>
<td>f_risk</td>
<td>INTERGER</td>
<td></td>
<td>风险等级</td>
</tr>
<tr>
<td>f_manager</td>
<td>INTERGER</td>
<td>NOT NULL</td>
<td>基金管理者</td>
</tr>
<tr>
<td>f_amount</td>
<td>INTERGER</td>
<td>NOT NULL</td>
<td>基金金额</td>
</tr>
</tbody></table>
</li>
</ol>
</li>
</ol>
</li>
<li><p>创建数据库表</p>
<ol>
<li><p>创建finance数据库作为项目数据库，数据库编码为UTF-8。（2分）</p>
<ol>
<li>切换到omm用户<br><img src="https://s2.loli.net/2021/12/09/yJSHvBaYepFU83W.png" alt="image-20211120152854123"></li>
<li>启动数据库服务<br><img src="https://s2.loli.net/2021/12/09/kOvdCNXzeJ2Im7t.png" alt="image-20211120152924367"></li>
<li>登入postres数据库(为了在里面创建新的数据库)<br><img src="https://s2.loli.net/2021/12/09/XfdWZDU6QnklebY.png" alt="image-20211120152949937"></li>
<li>创建finance数据库,设置编码为UTF-8<br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120153159839.png" alt="image-20211120153159839"></li>
</ol>
</li>
<li><p>连接finance数据库，创建名为finance的schema，并设置finance为当前的schema。（2分）</p>
<ol>
<li>连接finance数据库<br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120153222258.png" alt="image-20211120153222258"></li>
<li>创建名为finance的schema，并设置finance为当前的schema<br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120153259340.png" alt="image-20211120153259340"></li>
</ol>
</li>
<li><p>在finance模式下完成金融管理系统中所有数据库对象（数据表）的创建，并完成数据的填充。其中客户数据不少于20条，银行卡数据不少于10条，其他数据不少于5条；（6分）</p>
<ol>
<li><p>数据表创建</p>
<ol>
<li><p>客户表创建</p>
<p><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120162145657.png" alt="image-20211120162145657"></p>
<p><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120162136314.png" alt="image-20211120162136314"></p>
</li>
<li><p>银行卡表创建<br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120161519458.png" alt="image-20211120161519458"><br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120161510470.png" alt="image-20211120161510470"></p>
</li>
<li><p>理财产品表创建<br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120161622995.png" alt="image-20211120161622995"></p>
<p><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120161716375.png" alt="image-20211120161716375"></p>
</li>
<li><p>保险信息表创建</p>
<p><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120161636166.png" alt="image-20211120161636166"><br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120161724463.png" alt="image-20211120161724463"></p>
</li>
<li><p>基金信息表创建</p>
<p><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120161645388.png" alt="image-20211120161645388"></p>
<p><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120161745238.png" alt="image-20211120161745238"></p>
</li>
<li><p>资产信息表创建</p>
<p><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120161659959.png" alt="image-20211120161659959"></p>
<p><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120161759138.png" alt="image-20211120161759138"></p>
</li>
</ol>
</li>
<li><p>添加数据</p>
<ol>
<li><p>客户信息添加<br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120163251246.png" alt="image-20211120163251246"></p>
</li>
<li><p>银行卡数据填充<br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120163727388.png" alt="image-20211120163727388"></p>
</li>
<li><p>理财产品填充</p>
<p>INSERT INTO finance.f_products</p>
<p>(fp_id  ,fp_year   ,fp_amount  ,fp_name   ,fp_description ) VALUES</p>
<p>(1    ,2      ,4000000   ,’储蓄’   ,’储蓄理财产品’ ),</p>
<p>(2    ,1      ,3000    ,’债券’   ,’债券是政府、企业、银行等债务人为筹集资金,按照法定程序发行并向债权人承诺于指定日期还本付息的有价证券’),</p>
<p>(3    ,1      ,200000   ,’股票’   ,’股份公司为筹集资金而发行给各个股东作为持股凭证并借以取得股息和红利的一种有价证券’),</p>
<p>(4    ,3      ,2000    ,’国债’   ,’国家以其信用为基础，按照债的一般原则，通过向社会筹集资金所形成的债权债务关系’),</p>
<p>(5    ,2      ,10000    ,’大宗商品’ ,’与大宗商品期货挂钩的理财产品。目前市场上主要以挂钩黄金、石油、农产品的理财产品居多’)<img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120174858479.png" alt="image-20211120174858479"></p>
</li>
<li><p>保险产品填充</p>
<p>INSERT INTO finance.insurance(i_name,i_id,i_amount,i_person,i_year,i_project) VALUES</p>
<p>(‘意外保险’,3,5000,’所有人’,20,’平安保险’),</p>
<p>(‘医疗保险’,4,2000,’所有人’,20,’平安保险’),</p>
<p>(‘健康保险’,1,2000,’老年人’,10,’平安保险’),</p>
<p>(‘人寿保险’,2,3000,’老年人’,10,’平安保险’),</p>
<p>(‘财产损失保险’,5,1500,’中年人’,3,’平安保险’);<br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120175159475.png" alt="image-20211120175159475"></p>
</li>
<li><p>基金表格填充</p>
<p>INSERT INTO finance.fund (f_id,fp_name,f_type,f_risk,f_manager,f_amount) VALUES</p>
<p>(1,’股票基金’,’股票型’,3,1,200000),</p>
<p>(2,’债券基金’,’债券型’,2,2,3000),</p>
<p>(3,’投资基金’,’债券型’,3,2,1000),</p>
<p>(4,’国债’,’货币型’,1,4,2000),</p>
<p>(5,’期货’,’期货型’,2,5,1500);</p>
<p><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120180449122.png" alt="image-20211120180449122"></p>
</li>
<li><p>资产表格填充</p>
<p>INSERT INTO finance.property</p>
<p>(p_id  , p_c_id   ,p_i_id , p_status  , p_amount  ,p_get_time   ,p_income  ,p_type ) VALUES</p>
<p>(1    ,1      ,1    ,’可用’   ,100     ,’2021-11-20’  ,2000    ,1    ),</p>
<p>(2    ,1      ,2    ,’可用’   ,100     ,’2021-11-21’  ,3020    ,1    ),</p>
<p>(3    ,1      ,1    ,’冻结’   ,100     ,’2021-11-20’  ,2000    ,2    ),</p>
<p>(4    ,1      ,4    ,’可用’   ,101     ,’2021-11-10’  ,3000    ,3    ),</p>
<p>(5    ,2      ,5    ,’可用’   ,100     ,’2021-11-20’  ,2000    ,2    )</p>
<p><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120181110730.png" alt="image-20211120181110730"></p>
</li>
</ol>
</li>
</ol>
</li>
<li><p>对表添加外键约束，在银行信息表和资产信息表中，都存在每个银行卡必须有一个持卡者、每份资产必须都有一个资产拥有者这样的对应关系。因此针对这种对应关系，创建外键约束。（4分）</p>
<p>添加外键约束</p>
<ol>
<li>信用卡的外键<br>ALTER TABLE finance.bank_card ADD CONSTRAINT fk_c_id FOREIGN KEY (b_c_id) REFERENCES finance.client(c_id) ON DELETE CASCADE;<br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120182046151.png" alt="image-20211120182046151"></li>
<li>资产的外键<br>ALTER TABLE finance.property ADD CONSTRAINT fk_pro_c_id FOREIGN KEY (p_c_id) REFERENCES finance.client(c_id) ON DELETE CASCADE;<br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120182231938.png" alt="image-20211120182231938"></li>
</ol>
</li>
<li><p>在理财产品表、保险信息表和基金信息表中，都存在金额这个属性，在现实生活中，金额不会存在负数。因此针对表中金额的属性，增加大于0的约束条件。（4分）</p>
<p>增加大于0的约束</p>
<ol>
<li><p>f_products表<br>ALTER table finance.f_products ADD CONSTRAINT c_p_mount CHECK (fp_amount &gt;&#x3D;0);<br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120182747860.png" alt="image-20211120182747860"></p>
</li>
<li><p>fund表</p>
<p>ALTER table finance.fund ADD CONSTRAINT c_f_mount CHECK (f_amount &gt;&#x3D;0);<br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120182809449.png" alt="image-20211120182809449"></p>
</li>
<li><p>insurance表<br>ALTER table finance.insurance ADD CONSTRAINT c_i_mount CHECK (i_amount &gt;&#x3D;0);<br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120182806605.png" alt="image-20211120182806605"></p>
</li>
</ol>
</li>
<li><p>输出：</p>
<ol>
<li><p>输出查询所有表的数据字典的查询语句和结果，可以截图或者复制黏贴代码。(基本都在之前有展示,这里对所有的表及schema进行了一次查询)<br>select * from pg_tables;<br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120183633861.png" alt="image-20211120183633861"></p>
</li>
<li><p>输出查询所有表的数据的查询语句和结果，可以截图或者复制黏贴代码。</p>
<ol>
<li><p>client表<br>select * from finance.client;</p>
<p><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120182955194.png" alt="image-20211120182955194"></p>
</li>
<li><p>bank_card表<br>select * from finance.bank_card;<br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120183115059.png" alt="image-20211120183115059"></p>
</li>
<li><p>fund表<br>select * from finance.fund;<br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120183213621.png" alt="image-20211120183213621"></p>
</li>
<li><p>f_products表<br>select * from finance.f_products;<br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120183232153.png" alt="image-20211120183232153"></p>
</li>
<li><p>insurance表<br>select * from finance.insurance;<br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120183242518.png" alt="image-20211120183242518"></p>
</li>
<li><p>property表<br>select * from finance.property;<br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120183254782.png" alt="image-20211120183254782"></p>
</li>
</ol>
</li>
<li><p>输出所有创建约束的语句和创建结果，可以截图或者复制黏贴代码(这在之前已经放上了)</p>
</li>
</ol>
</li>
</ol>
</li>
<li><p>对表中的数据进行查询操作</p>
<ol>
<li><p>l  至少完成1条单表查询和1条表查询。（4分）<br>单表查询–查询客户表中所有的客户id</p>
<p>select c_id from finance.client;<br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120183930730.png" alt="image-20211120183930730"></p>
<p>表查询<br>select c_name from finance.client;<br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120191355193.png" alt="image-20211120191355193"></p>
</li>
<li><p>l  至少完成两条聚合查询，例如查询用户表中有多少个用户；查询保险信息表中，保险金额的平均值等。（4分）<br><strong>查询property表的income平均值</strong><br>select avg(p_income) from finance.property<br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120191618236.png" alt="image-20211120191618236"><br><strong>查询用户表中用户总数</strong><br>select count(*) from finance.client;<br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120191822353.png" alt="image-20211120191822353"></p>
</li>
<li><p>l  至少完成3条连接查询，例如：半连接、反连接、多表查询和子查询。（6分）</p>
<ol>
<li>等值连接查询,查询每个用户及其拥有的资产<br>select finance.client.*,finance.property. *<br>from finance.client,finance.property<br>where finance.client.c_id&#x3D;finance.property.p_c_id;<br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120192143231.png" alt="image-20211120192143231"></li>
<li>自身连接,在fund表中对每一个基金项,查询manager 和自身id相同的基金<br>select first.*,second.f_manager<br>from finance.fund first,finance.fund second<br>where first.f_id &#x3D; second.f_manager<br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120192923196.png" alt="image-20211120192923196"></li>
<li>子查询,查询和p_id&#x3D;3的资产处于相同状态的资产(然后发现就它自己冻结着)<br>select * from finance.property<br>where p_status&#x3D;<br>(select p_status from finance.property where p_id&#x3D;3);<br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120193259515.png" alt="image-20211120193259515"></li>
</ol>
</li>
<li><p>至少完成1条ORDER BY查询。（2分）<br>将资产按照收益逆序输出<br>select * from finance.property order by p_income desc;<br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120193418297.png" alt="image-20211120193418297"></p>
</li>
<li><p>至少完成1条GROUP BY……HAVING查询。（4分）</p>
</li>
<li><p>查询收益在2000及以上的资产及其平均收益,将结果按p_id分组显示,且只显示平均收益大于2500的组<br>select *,avg(p_income)   from finance.property<br>where p_income&gt;&#x3D;2000</p>
<p>group by p_id<br>having avg(p_income)&gt;&#x3D;2500;<br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120194044403.png" alt="image-20211120194044403"></p>
</li>
<li><p>查询基金,将其按f_id分组,且只显示平均数量大于等于2000的组<br>select *,avg(f_amount) from finance.fund<br>group by f_id<br>having avg(f_amount)&gt;&#x3D;2000;<br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120194430725.png" alt="image-20211120194430725"></p>
</li>
</ol>
</li>
</ol>
<h3 id="4-5-创建视图和索引"><a href="#4-5-创建视图和索引" class="headerlink" title="4.5 创建视图和索引"></a>4.5 创建视图和索引</h3><ol>
<li><p>创建一个视图</p>
<p>查看client中属性,除了c_mail属性<br>create view see_client<br>as<br>select c_id,c_name,c_id_card,c_phone,c_password<br>from finance.client<br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120195705769.png" alt="image-20211120195705769"></p>
</li>
<li><p>修改视图</p>
<p>修改视图所属schema<br>alter view see_client set schema finance;<br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120202011203.png" alt="image-20211120202011203"></p>
</li>
<li><p>使用视图进行查询<br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120202005604.png" alt="image-20211120202005604"></p>
</li>
<li><p>重命名视图<br>alter view finance.see_client<br>rename to oh_my_god;<br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120202200841.png" alt="image-20211120202200841"></p>
</li>
<li><p>删除视图<br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120202227819.png" alt="image-20211120202227819"></p>
</li>
<li><p>创建索引<br>为客户电话号码创建索引<br>CREATE INDEX index_phone on finance.client(c_phone) ;<br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120202553719.png" alt="image-20211120202553719"></p>
</li>
<li><p>重建索引<br>对整个客户表重建索引<br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120202715402.png" alt="image-20211120202715402"></p>
</li>
<li><p>重命名索引<br>alter index finance.index_phone rename to ind_phone;<br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120202831047.png" alt="image-20211120202831047"></p>
</li>
<li><p>删除索引<br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120202849544.png" alt="image-20211120202849544"></p>
</li>
</ol>
<h3 id="1-4-6-数据修改和删除（5分）"><a href="#1-4-6-数据修改和删除（5分）" class="headerlink" title="1.4.6 数据修改和删除（5分）"></a>1.4.6 数据修改和删除（5分）</h3><p>任务：</p>
<p>l  修改数据：至少修改2个不同的数据。（3分）</p>
<ol>
<li><p>将client表中第1个元素的值c_name改为’年没怀念’<br>之前的表<br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120205008902.png" alt="image-20211120205008902"><br>修改语句:<br>update finance.client<br>set c_name&#x3D;’年没怀念’<br>where c_id&#x3D;1;<br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120205223012.png" alt="image-20211120205223012"></p>
<p>修改后表情况<br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120205200129.png" alt="image-20211120205200129"></p>
</li>
<li><p>将property中p_get_time小于2021-11-11 00:00:00的值修改为2021-11-19 00:00:00</p>
<p>修改前状态<br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120205546236.png" alt="image-20211120205546236"><br>修改<br>update finance.property<br>set p_get_time&#x3D;’2021-11-19’<br>where p_get_time&lt;’2021-11-11’;<br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120205628164.png" alt="image-20211120205628164"><br>修改后状态<br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120205638384.png" alt="image-20211120205638384"></p>
</li>
</ol>
<p>l  删除指定数据：至少删除2个不同数据表的数据。（2分）</p>
<ol>
<li><p>将finance.property中p_amount&#x3D;101的数据删除</p>
<p>删除前表情况</p>
<p><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120205638384.png" alt="image-20211120205638384"></p>
<p>删除<br>delete from finance.property where p_amount&#x3D;101;</p>
<p><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120210444230.png" alt="image-20211120210444230"></p>
<p> 删除后表情况<img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120210451058.png" alt="image-20211120210451058"></p>
</li>
<li><p>删掉c_id&gt;20的用户信息</p>
<p>删除前表情况</p>
<p><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120210652108.png" alt="image-20211120210652108"></p>
<p>删除操作</p>
<p>delete from finance.client where c_id&gt;20;<br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120210705838.png" alt="image-20211120210705838"></p>
<p> 删除后表情况<img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120210710547.png" alt="image-20211120210710547"></p>
</li>
</ol>
<h3 id="1-4-7-创建新用户（6分）"><a href="#1-4-7-创建新用户（6分）" class="headerlink" title="1.4.7 创建新用户（6分）"></a>1.4.7 创建新用户（6分）</h3><p>任务：</p>
<ol>
<li><p>新用户的创建和授权：创建用户dbuser，密码为Gauss#3demo；给用户dbuser授予finance数据库下银行卡信息表的查询和插入权限，并将finance模式的权限也授予dbuser用户。（3分）</p>
<p>创建用户<br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120210919044.png" alt="image-20211120210919044"></p>
<p>给用户dbuser授予finance数据库下银行卡信息表的查询和插入权限，并将finance模式的权限也授予dbuser用户<br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120210938886.png" alt="image-20211120210938886"></p>
</li>
<li><p>新用户连接数据库：使用新用户连接finance数据库；访问finance数据库的银行卡信息表。（2分）</p>
<p>新用户连接</p>
<p><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120211203343.png" alt="image-20211120211203343"><br>新用户访问finance数据库的银行卡信息表</p>
<p><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120211232019.png" alt="image-20211120211232019"></p>
</li>
<li><p>删除finance模式。（1分）<br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120211528768.png" alt="image-20211120211528768"></p>
</li>
</ol>
<h3 id="1-4-8-使用jdbc连接openGauss数据库"><a href="#1-4-8-使用jdbc连接openGauss数据库" class="headerlink" title="1.4.8 使用jdbc连接openGauss数据库"></a>1.4.8 使用jdbc连接openGauss数据库</h3><ol>
<li><p>创建测试数据库demo；<br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120211928291.png" alt="image-20211120211928291"></p>
</li>
<li><p>创建名为demo的schema，并设置demo为当前的schema<br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120211933670.png" alt="image-20211120211933670"><br>设置搜索路径为demo</p>
<p>SET search_path TO demo;</p>
</li>
<li><p>创建测试表websites（id,name,url），数据为（’1’, ‘openGauss’, ‘<a href="https://opengauss.org/zh/&#39;)%EF%BC%8C">https://opengauss.org/zh/&#39;)，</a>(‘2’, ‘华为云’, ‘<a href="https://www.huaweicloud.com/&#39;">https://www.huaweicloud.com/&#39;</a>), (‘3’, ‘openEuler’, ‘<a href="https://openeuler.org/zh/&#39;">https://openeuler.org/zh/&#39;</a>), (‘4’, ‘华为support中心’, ‘<a href="https://support.huaweicloud.com/&#39;)%E3%80%82%EF%BC%883%E5%88%86%EF%BC%89">https://support.huaweicloud.com/&#39;)。（3分）</a><br>create table websites<br>(<br>id Integer primary key,<br>name varchar(200),<br>url varchar(200)</p>
<p>);<br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120212236363.png" alt="image-20211120212236363"><br>插入数据</p>
<p>INSERT INTO websites (id,name,url) VALUES</p>
<p>(‘1’, ‘openGauss’, ‘<a href="https://opengauss.org/zh/&#39;">https://opengauss.org/zh/&#39;</a>),</p>
<p>(‘2’, ‘华为云’, ‘<a href="https://www.huaweicloud.com/&#39;">https://www.huaweicloud.com/&#39;</a>),</p>
<p>(‘3’, ‘openEuler’, ‘<a href="https://openeuler.org/zh/&#39;">https://openeuler.org/zh/&#39;</a>),</p>
<p>(‘4’, ‘华为support中心’, ‘<a href="https://support.huaweicloud.com/&#39;">https://support.huaweicloud.com/&#39;</a>)</p>
<p><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120212401022.png" alt="image-20211120212401022"></p>
</li>
<li><p>查看入站规则是否包括tcp26000端口<br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120213457003.png" alt="image-20211120213457003"></p>
</li>
<li><p>查看java版本是否为8<br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211120213634213.png" alt="image-20211120213634213"></p>
</li>
<li><p>创建项目,引入postgres.jar包<br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211206104756935.png" alt="image-20211206104756935"></p>
</li>
<li><p>写下测试程序如下<br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211206104819179.png" alt="image-20211206104819179"><br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211206104832554.png" alt="image-20211206104832554"></p>
</li>
<li><p>结果<br><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211206104851481.png" alt="image-20211206104851481"></p>
</li>
</ol>
<p>本实验完成</p>
]]></content>
      <tags>
        <tag>exp8</tag>
      </tags>
  </entry>
  <entry>
    <title>Bits Bytes and Integers</title>
    <url>/2022-09-17-csapp01.html</url>
    <content><![CDATA[<h1 id="Bits-Bytes-and-Integers"><a href="#Bits-Bytes-and-Integers" class="headerlink" title="Bits,Bytes and Integers"></a>Bits,Bytes and Integers</h1><h2 id="基础位运算"><a href="#基础位运算" class="headerlink" title="基础位运算"></a>基础位运算</h2><h3 id="分清-amp-，-amp-amp-，-，-，-，-之间的区别"><a href="#分清-amp-，-amp-amp-，-，-，-，-之间的区别" class="headerlink" title="分清&amp;，&amp;&amp;，| ，||，~，!之间的区别"></a>分清&amp;，&amp;&amp;，| ，||，~，!之间的区别</h3><p>位操作： &amp;，|，~，运算时只是单纯进行位操作</p>
<p>逻辑比较： &amp;&amp;，||，！，运算时会添加逻辑考虑，</p>
<blockquote>
<p>比如||前面的为True，则提前中止调用</p>
<p>又比如，对一个非0的数进行！两次会获得一个1，这和位操作有很大的区别</p>
</blockquote>
<h3 id="算术右移和逻辑右移"><a href="#算术右移和逻辑右移" class="headerlink" title="算术右移和逻辑右移"></a>算术右移和逻辑右移</h3><p>逻辑右移： 将整个数字向右移动，同时高位补0</p>
<p>算术右移： 将整个数字向右移动，同时高位按照<strong>符号位补充</strong></p>
<h4 id="左移的特殊情况"><a href="#左移的特殊情况" class="headerlink" title="左移的特殊情况"></a>左移的特殊情况</h4><p>如果一个八位的数字进行左移八位的操作，在部分计算机中，这个8将被模8，因此并不能得到想象中的0</p>
<h3 id="补码-T"><a href="#补码-T" class="headerlink" title="补码 T"></a>补码 T</h3><p>国内讲法： 除了符号位，全部按位取反再加1</p>
<p>这课的讲法：最高位视为负权，如[-16,8,4,2,1]</p>
<p>经典图片</p>
<p><img src="/image/2022-09-17-csapp01/1663413629124.png" alt="1663413629124"></p>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>例如：8位-&gt;16位</p>
<p>基本规则：将符号位复制k份，k为扩展位数</p>
<blockquote>
<p>解释，想象负数的情况，假设最高位权重暂时是-8，增加一位最高位，新增一位-16，但之前的最高位变为+8，刚好抵消。</p>
</blockquote>
<h2 id="加减乘除"><a href="#加减乘除" class="headerlink" title="加减乘除"></a>加减乘除</h2><p>无符号数直接不谈</p>
<p>补码加法： 可以通过补码加法简单得到减法，只要加上负的值就行</p>
<h3 id="正-x2F-负溢出"><a href="#正-x2F-负溢出" class="headerlink" title="正&#x2F;负溢出"></a>正&#x2F;负溢出</h3><p>正溢出：俩正数加起来等于一个负数</p>
<h3 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h3><p>如果乘2的倍数，只需要【算术】移位就行了，不管是不是补码表示</p>
<h3 id="除法"><a href="#除法" class="headerlink" title="除法"></a>除法</h3><p>同样是算术移位，但这回如果是负数，它就不是四舍五入，而是向负无穷舍入,例如 -3&#x2F;2&#x3D;-2。而不是-1</p>
<h3 id="获得相反数"><a href="#获得相反数" class="headerlink" title="获得相反数"></a>获得相反数</h3><p>按位取反再+1</p>
<h3 id="一个恐怖的案例"><a href="#一个恐怖的案例" class="headerlink" title="一个恐怖的案例"></a>一个恐怖的案例</h3><p><img src="/image/2022-09-17-csapp01/1663426748805.png" alt="1663426748805"></p>
<p>这里，i会被隐式转换成unsigned int(因为sizeof是 unsigned int)，于是这个for循环不会结束</p>
<h3 id="无符号数的优点"><a href="#无符号数的优点" class="headerlink" title="无符号数的优点"></a>无符号数的优点</h3><p>由于无符号数的计算采用取模的方式</p>
<p>在一些模运算时（比如大多数加密算法）</p>
<p>当位表示集合而非数字时，用无符号数最好。</p>
<h3 id="字存储"><a href="#字存储" class="headerlink" title="字存储"></a>字存储</h3><p>最低有效字节在小端序电脑中放在首位，在大端机器中放在末位</p>
]]></content>
      <tags>
        <tag>computer</tag>
      </tags>
  </entry>
  <entry>
    <title>floats</title>
    <url>/22-09-18-csapp02.html</url>
    <content><![CDATA[<h1 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h4 id="浮点通过移动二进制小数点来表示尽可能大的取值范围"><a href="#浮点通过移动二进制小数点来表示尽可能大的取值范围" class="headerlink" title="浮点通过移动二进制小数点来表示尽可能大的取值范围"></a>浮点通过移动二进制小数点来表示尽可能大的取值范围</h4><h3 id="数字公式"><a href="#数字公式" class="headerlink" title="数字公式"></a>数字公式</h3><p>$$<br>(-1)^S M 2^E<br>$$</p>
<p>符号位{S} 表示正负</p>
<p>小数{M}  一般是一个1~2之间的小数值</p>
<p> 指数位{E} 指的是乘2的E次方 </p>
<h3 id="IEEE浮点数标准"><a href="#IEEE浮点数标准" class="headerlink" title="IEEE浮点数标准"></a>IEEE浮点数标准</h3><h4 id="single-单精度"><a href="#single-单精度" class="headerlink" title="single 单精度"></a>single 单精度</h4><p>1位符号位，8位指数位，23位小数位</p>
<h4 id="Double-双精度"><a href="#Double-双精度" class="headerlink" title="Double 双精度"></a>Double 双精度</h4><p>1位符号位，11位指数位，52位小数位</p>
<h3 id="小数位的特殊表示"><a href="#小数位的特殊表示" class="headerlink" title="小数位的特殊表示"></a>小数位的特殊表示</h3><p>由于小数位永远是1.010101这样的模式</p>
<p>因此前面的1不放入存储，只记录后面的01010101这种</p>
<p>同时，在计算时，会刻意维持小数位为1.010111这样的模式，就是说维持小数位在1~2之间</p>
<h3 id="零表示法"><a href="#零表示法" class="headerlink" title="零表示法"></a>零表示法</h3><p>$$<br>(-1)^S M 2^E<br>$$</p>
<p>此时E为1-Bias，之前为0-Bias</p>
<p>由于之前无法表示0，将M设置为0.110101010这种模式，此时可以表示0</p>
<h4 id="当E全0，小数位全0的时候"><a href="#当E全0，小数位全0的时候" class="headerlink" title="当E全0，小数位全0的时候"></a>当E全0，小数位全0的时候</h4><p>表示0</p>
<p>这会导致正负0的出现</p>
<p>当E为0，小数位不为0的时候，可以表示一些很接近0的东西</p>
<h4 id="如果E为111111…-1-，frac-不为0，"><a href="#如果E为111111…-1-，frac-不为0，" class="headerlink" title="如果E为111111….1 ，frac 不为0，"></a>如果E为111111….1 ，frac 不为0，</h4><p>则代表一个极大值，不代表数字</p>
]]></content>
      <tags>
        <tag>csapp</tag>
      </tags>
  </entry>
  <entry>
    <title>未继续_android与腾讯云mysql数据库连接_windows</title>
    <url>/android%E4%B8%8E%E8%85%BE%E8%AE%AF%E4%BA%91mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5-windows.html</url>
    <content><![CDATA[<p>第一步</p>
<blockquote>
<p>购买一个腾讯云服务</p>
<p><img src="https://s2.loli.net/2021/12/07/u7yYjh39kGZfp8X.png" alt="image-20211207215535055"></p>
<p>然后初始化(请记住密码)</p>
<p><img src="https://s2.loli.net/2021/12/07/UlmbJ9cSR8NHkAe.png" alt="image-20211207221439709"></p>
<p>开启外网地址(不然怎么连</p>
<p><img src="https://s2.loli.net/2021/12/07/Tijutps6K3ZB1wg.png" alt="image-20211207222027892"></p>
</blockquote>
<p>第二步,下载androidstudio</p>
<p><img src="https://s2.loli.net/2021/12/07/aAXyWbjZR6c2uht.png" alt="image-20211207215837466"></p>
<p> 第三步,下载对应数据库版本的jdbc,我的腾讯云是mysql8</p>
<blockquote>
<p>jdbc位置是</p>
<p><a href="https://www.mysql.com/products/connector/">MySQL :: MySQL Connectors</a></p>
<p>打开之后长这样,下载JDBC</p>
<p><img src="https://s2.loli.net/2021/12/07/UnWrX4BHD5PFTpR.png" alt="image-20211207215936667"></p>
<p>这儿选platform independent,然后点第二个下载</p>
<p><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211207220401699.png" alt="image-20211207220401699"></p>
<p>解压之后能看到这个东西</p>
<p><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211207220521395.png" alt="image-20211207220521395"></p>
<ol start="4">
<li>把上面那玩意引入android</li>
</ol>
<p>首先在project底下的app文件夹的子目录找到libs文件夹,把那个jdbc的jar包拖进去</p>
<p><img src="https://s2.loli.net/2021/12/07/Qupag1AD3JFYfB6.png" alt="image-20211207221048176"></p>
<p>如果没有,把左上角的这个调成ProjectFiles 看看,还没有就自己新建一个</p>
<p><img src="https://s2.loli.net/2021/12/07/kJ6CrM37XSUsbQI.png" alt="image-20211207221113280"></p>
<p>右键它,选择add as library</p>
<p><img src="C:\Users\www13\AppData\Roaming\Typora\typora-user-images\image-20211207221300723.png" alt="image-20211207221300723"></p>
</blockquote>
]]></content>
      <categories>
        <category>大三</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>CPU虚拟化</title>
    <url>/0929CPU%E8%99%9A%E6%8B%9F%E5%8C%96.html</url>
    <content><![CDATA[<h2 id="MAIN-TASK-执行虚拟机程序指令，响应虚拟机内外部事件"><a href="#MAIN-TASK-执行虚拟机程序指令，响应虚拟机内外部事件" class="headerlink" title="MAIN TASK: 执行虚拟机程序指令，响应虚拟机内外部事件"></a>MAIN TASK: 执行虚拟机程序指令，响应虚拟机内外部事件</h2><h2 id="面临的挑战"><a href="#面临的挑战" class="headerlink" title="面临的挑战"></a>面临的挑战</h2><h3 id="1-敏感非特权指令"><a href="#1-敏感非特权指令" class="headerlink" title="1. 敏感非特权指令"></a>1. 敏感非特权指令</h3><p>挑战来源： 基于 陷入-模拟 机制的虚拟化架构只能在所有敏感指令都是特权指令的架构中被建立<br>敏感指令： 操作敏感物理资源的指令，如I&#x2F;O指令、页表基地址切换指令等<br>特权指令； 必须运行在最高特权级的指令，在非特权级中执行这些指令将会触发特权级切换。<br>解决方案： </p>
<blockquote>
<p>软件方案： 解释执行【无脑解释执行所有指令，效率较低】，二进制翻译【将敏感指令替换为其他指令，会增加指令数量】，扫描与修补【在执行前，将敏感指令替换为特权指令，代码局部性较差】，半虚拟化【在执行敏感指令的时候通过超调用主动陷入Hypervisor中，避免扫描二进制代码引入的开销，但是打破了虚拟机和Hypervisor之间的界限】<br>硬件辅助方案： Intel VT-x,AMD SVM, ARM EL2, RISC-V H-Extension<br>将所有敏感指令转化为特权指令【可能存在兼容性问题】<br>引入虚拟化模式</p>
</blockquote>
<h3 id="2-上下文切换"><a href="#2-上下文切换" class="headerlink" title="2. 上下文切换"></a>2. 上下文切换</h3><p>类似进程上下文，虚拟机发生退出时需要保持各寄存器的状态<br>发生虚拟CPU调度时，需要保存当前虚拟CPU的上下文兵加载待调度虚拟CPU上下文</p>
<h3 id="3-中断处理"><a href="#3-中断处理" class="headerlink" title="3. 中断处理"></a>3. 中断处理</h3><p>模拟方式：为每一个虚拟机维护一个虚拟中断控制器</p>
<h1 id="QEMU-x2F-KVM-CPU虚拟化实现"><a href="#QEMU-x2F-KVM-CPU虚拟化实现" class="headerlink" title="QEMU&#x2F;KVM CPU虚拟化实现"></a>QEMU&#x2F;KVM CPU虚拟化实现</h1>]]></content>
      <categories>
        <category>大四</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>计算机</tag>
      </tags>
  </entry>
  <entry>
    <title>CSAPP 存储器层次结构 笔记</title>
    <url>/1009%E5%AD%98%E5%82%A8%E5%99%A8%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84.html</url>
    <content><![CDATA[<h2 id="6-1-存储技术"><a href="#6-1-存储技术" class="headerlink" title="6.1 存储技术"></a>6.1 存储技术</h2><ul>
<li><h3 id="随机访问存储器-RAM"><a href="#随机访问存储器-RAM" class="headerlink" title="随机访问存储器 RAM"></a>随机访问存储器 RAM</h3><ul>
<li><h4 id="静态-SRAM"><a href="#静态-SRAM" class="headerlink" title="静态 SRAM"></a>静态 SRAM</h4><blockquote>
<p>位存储模式:双稳态存储器单元</p>
<p>只要有电,就能永远保持值</p>
</blockquote>
</li>
<li><h4 id="动态-DRAM"><a href="#动态-DRAM" class="headerlink" title="动态 DRAM"></a>动态 DRAM</h4><blockquote>
<p>位存储模式: 电容充电</p>
</blockquote>
</li>
<li><h4 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h4></li>
<li><table>
<thead>
<tr>
<th></th>
<th>每位晶体管数</th>
<th>相对访问时间</th>
<th>持续?</th>
<th>敏感</th>
<th>相对花费</th>
<th>应用</th>
</tr>
</thead>
<tbody><tr>
<td>SRAM</td>
<td>6</td>
<td>1</td>
<td>是</td>
<td>否</td>
<td>1000</td>
<td>高速缓冲存储器</td>
</tr>
<tr>
<td>DRAM</td>
<td>1</td>
<td>10</td>
<td>否</td>
<td>是</td>
<td>1</td>
<td>主存&#x2F;帧缓冲区</td>
</tr>
</tbody></table>
</li>
<li></li>
<li><h4 id="非易失性存储器-ROM"><a href="#非易失性存储器-ROM" class="headerlink" title="非易失性存储器 ROM"></a>非易失性存储器 ROM</h4><blockquote>
<p>关电后仍然能保持信息</p>
</blockquote>
</li>
<li><h4 id="访问主存"><a href="#访问主存" class="headerlink" title="访问主存"></a>访问主存</h4><blockquote>
<p>通过数据总线和主存信息交互</p>
</blockquote>
</li>
</ul>
</li>
<li><h3 id="磁盘存储"><a href="#磁盘存储" class="headerlink" title="磁盘存储"></a>磁盘存储</h3><ul>
<li><p>从磁盘读数据的效率是从DRAM读数据的几乎10万倍慢,不过ssd会快的多,不过只是相对于传统磁盘而言</p>
</li>
<li><p>固态磁盘SSD</p>
<ul>
<li><p>读SSD比写要快</p>
<ul>
<li>因为随机写要擦除块,这个动作是毫秒级的</li>
<li>如果试图写一个有数据的块,会先将这块的数据复制到另一个没数据的地方</li>
</ul>
</li>
<li><p>SSD多次重复写后会损坏</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="6-2局部性"><a href="#6-2局部性" class="headerlink" title="6.2局部性"></a>6.2局部性</h2><h3 id="局部性原理"><a href="#局部性原理" class="headerlink" title="局部性原理"></a>局部性原理</h3><p>计算机程序倾向于引用邻近与其他最近引用过的数据项的数据项</p>
<h3 id="简单原则"><a href="#简单原则" class="headerlink" title="简单原则"></a>简单原则</h3><ul>
<li>重复引用相同变量的程序有良好的时间局部性</li>
<li>对于步长为k的引用模式的程序,步长越小,空间局部性越好.</li>
<li>对于取指令来说,循环有好的时间和空间局部性.循环体越小,迭代次数越多,局部性越好</li>
</ul>
<h2 id="6-3-存储器层次结构"><a href="#6-3-存储器层次结构" class="headerlink" title="6.3 存储器层次结构"></a>6.3 存储器层次结构</h2><ul>
<li>L0 寄存器 –保存着从高速缓存中取出的字</li>
<li>L1 高速缓存 SRAM –缓存着从L2取出的缓存行 – 速度接近寄存器</li>
<li>L2 高速缓存 SRAM –缓存着从L3取出的缓存行 – 速度比L1慢</li>
<li>L3 高速缓存 SRAM –缓存着从主存高速缓存取出的缓存行 –速度比L2慢</li>
<li>L4 主存 DRAM – 保存着从本地磁盘取出的代码块</li>
<li>L5 本地耳机存储 本地磁盘 –保存着从远程网络服务器磁盘上读取的文件</li>
<li>L6 远程二级存储 [分布式文件系统,Web服务器]</li>
</ul>
<h2 id="6-4-高速缓存存储器"><a href="#6-4-高速缓存存储器" class="headerlink" title="6.4 高速缓存存储器"></a>6.4 高速缓存存储器</h2><h3 id="6-4-1-通用的高速缓存存储器组织结构"><a href="#6-4-1-通用的高速缓存存储器组织结构" class="headerlink" title="6.4.1 通用的高速缓存存储器组织结构"></a>6.4.1 通用的高速缓存存储器组织结构</h3><blockquote>
<p>存储器地址位数: m</p>
<p>存储器地址数: M&#x3D;2^m</p>
<p>高速缓存组数 S&#x3D; 2^s</p>
<p>高速缓存组内缓存行: E</p>
<p>缓存行内数据块 B&#x3D;2^b</p>
<p>高速缓存大小: C&#x3D;S*E*B</p>
</blockquote>
<h3 id="6-4-2-直接映射高速缓存"><a href="#6-4-2-直接映射高速缓存" class="headerlink" title="6.4.2 直接映射高速缓存"></a>6.4.2 直接映射高速缓存</h3><blockquote>
<h4 id="特征-每个组只有一行-因此字选择时简单-但容易发生抖动"><a href="#特征-每个组只有一行-因此字选择时简单-但容易发生抖动" class="headerlink" title="特征: 每个组只有一行,因此字选择时简单,但容易发生抖动"></a>特征: 每个组只有一行,因此字选择时简单,但容易发生抖动</h4></blockquote>
<blockquote>
<h4 id="流程-假设执行一条读内存字w的指令"><a href="#流程-假设执行一条读内存字w的指令" class="headerlink" title="流程: 假设执行一条读内存字w的指令"></a>流程: 假设执行一条读内存字w的指令</h4><h4 id="组选择"><a href="#组选择" class="headerlink" title="组选择:"></a>组选择:</h4><ul>
<li>从w中抽取s个组标记位,s由高速缓存组数决定</li>
<li>之后查看高速缓存中是否存在该组,如果存在就得到一个缓存命中,不存在就是缓存不命中</li>
</ul>
<h4 id="字选择"><a href="#字选择" class="headerlink" title="字选择:"></a>字选择:</h4><ul>
<li>高速缓存中的偏移位标识了字节在块中的偏移</li>
</ul>
<h4 id="行替换"><a href="#行替换" class="headerlink" title="行替换:"></a>行替换:</h4><ul>
<li>如果缓存不命中,就需要从层次结构的下一层中取出被请求的块,然后将心的块存储在组索引所示的块中</li>
</ul>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h4><ul>
<li>书P429</li>
</ul>
<h4 id="冲突不命中"><a href="#冲突不命中" class="headerlink" title="冲突不命中:"></a>冲突不命中:</h4><ul>
<li>由直接映射的设计可以看出,如果程序访问大小为2的幂的数组,很可能会发生冲突不命中.</li>
<li>相同组映射的内存块会不断的来回覆盖–抖动</li>
</ul>
</blockquote>
<h3 id="6-4-3-组相联高速缓存"><a href="#6-4-3-组相联高速缓存" class="headerlink" title="6.4.3 组相联高速缓存"></a>6.4.3 组相联高速缓存</h3><blockquote>
<p>每个组都有 1&lt;E&lt;C&#x2F;B 个高速缓存行的 的高速缓存通常称为E路组相联高速缓存</p>
<p>如果E&#x3D;C&#x2F;B 称为全相联高速缓存</p>
</blockquote>
<blockquote>
<h4 id="行匹配"><a href="#行匹配" class="headerlink" title="行匹配"></a>行匹配</h4><ul>
<li>检查多个行的标记和有效位,判断是否在缓存中</li>
</ul>
<h4 id="行替换-1"><a href="#行替换-1" class="headerlink" title="行替换"></a>行替换</h4><ul>
<li>如果组中有空行,则换到空行上去</li>
<li>如果没有,则根据替换策略替换–比如LRU</li>
</ul>
</blockquote>
<h3 id="6-4-4-写回"><a href="#6-4-4-写回" class="headerlink" title="6.4.4 写回"></a>6.4.4 写回</h3><blockquote>
<h4 id="怎么更新层次结构中-低一层的副本"><a href="#怎么更新层次结构中-低一层的副本" class="headerlink" title="怎么更新层次结构中,低一层的副本"></a>怎么更新层次结构中,低一层的副本</h4><ol>
<li>直写 – write throuth<ul>
<li>立即将w的高速缓存块写回到紧接着的第一层</li>
<li>每次写都会引起总线流量</li>
<li>能够使用独立于高速缓存的写缓冲区用来更新内存</li>
<li>读不命中开销小</li>
</ul>
</li>
<li>写回[ 延迟更新] write back<ul>
<li>只有当替换算法要驱逐这个块时,将这个块写到低一层</li>
<li>显著减少总线流量</li>
<li>增加复杂性– 需要维护一个新的位[修改位]</li>
<li>允许更多到内存的贷款用于执行DMA的I&#x2F;O.</li>
</ul>
</li>
</ol>
<h4 id="如何处理写不命中"><a href="#如何处理写不命中" class="headerlink" title="如何处理写不命中"></a>如何处理写不命中</h4><p>就是说,要写的块拿不到</p>
<ol>
<li>写分配 write-allocate<ul>
<li>加载相应的低一层的块到高速缓存中,然后更新这个高速缓存块</li>
<li>写回高速缓存通常是写分配的</li>
</ul>
</li>
<li>非写分配 not-write-<strong>allocate</strong><ul>
<li>避开高速缓存,直接把这个字写到低一层中</li>
<li>直写高速缓存通常是非写分配的</li>
</ul>
</li>
</ol>
</blockquote>
<h3 id="6-4-7-性能影响"><a href="#6-4-7-性能影响" class="headerlink" title="6.4.7 性能影响"></a>6.4.7 性能影响</h3><ol>
<li>不命中率<ul>
<li>执行期间,内存引用不命中的比率 不命中数量&#x2F;引用数量</li>
</ul>
</li>
<li>命中时间<ul>
<li>从高速缓存传送一个字到CPU所需的时间</li>
</ul>
</li>
<li>不命中处罚<ul>
<li>不命中所需的额外时间</li>
</ul>
</li>
</ol>
<h4 id="下列因素提高的影响"><a href="#下列因素提高的影响" class="headerlink" title="下列因素提高的影响"></a>下列因素提高的影响</h4><ul>
<li>高速缓存:命中率提高,命中时间提高</li>
<li>块大小:命中率提高,不命中处罚提高,损害时间局部性比空间局部性更好的程序的命中率</li>
<li>相联度:降低抖动可能,成本提高,增加不命中处罚</li>
</ul>
<h4 id="越往层次下面走-传送时间增加-减少传送的数量就更为重要"><a href="#越往层次下面走-传送时间增加-减少传送的数量就更为重要" class="headerlink" title="越往层次下面走,传送时间增加,减少传送的数量就更为重要."></a>越往层次下面走,传送时间增加,减少传送的数量就更为重要.</h4><h2 id="6-5-编写高速缓存友好的代码"><a href="#6-5-编写高速缓存友好的代码" class="headerlink" title="6.5 编写高速缓存友好的代码"></a>6.5 编写高速缓存友好的代码</h2><h3 id="两个原则"><a href="#两个原则" class="headerlink" title="两个原则"></a>两个原则</h3><ul>
<li>让最常见的情况运行的最快</li>
<li>尽量减少,每个循环内部的缓存不命中数量.</li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>csapp</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>CSAPP Optimize 笔记</title>
    <url>/1008CSAPP%20Optimize.html</url>
    <content><![CDATA[<h2 id="5-1-编译器优化能力的局限性"><a href="#5-1-编译器优化能力的局限性" class="headerlink" title="5.1 编译器优化能力的局限性"></a>5.1 编译器优化能力的局限性</h2><ul>
<li><h3 id="编译器只做安全的优化–优化后和未优化的版本有一样的行为"><a href="#编译器只做安全的优化–优化后和未优化的版本有一样的行为" class="headerlink" title="编译器只做安全的优化–优化后和未优化的版本有一样的行为"></a>编译器只做安全的优化–优化后和未优化的版本有一样的行为</h3></li>
</ul>
<h3 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h3><ul>
<li><h3 id="内存别名使用"><a href="#内存别名使用" class="headerlink" title="内存别名使用"></a>内存别名使用</h3></li>
</ul>
<blockquote>
<p>编译器并不知道指针指向哪里,因此它必须假设指针可能指向同一个位置.</p>
</blockquote>
<ul>
<li><h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3></li>
</ul>
<blockquote>
<p>大多数编译器不会去判断一个函数是否有副作用,因此它们倾向于将函数的调用保持不变</p>
<h4 id="内联"><a href="#内联" class="headerlink" title="内联"></a>内联</h4><blockquote>
<p>包含函数调用的代码可以用内联函数替换过程进行优化,就是将函数内部的执行步骤内联到一起</p>
<p>在gcc中,只尝试单文件的内联,不会尝试多文件的内联(比如一组函数在其他文件内的函数中被调用)</p>
</blockquote>
</blockquote>
<h2 id="5-2-表示程序性能"><a href="#5-2-表示程序性能" class="headerlink" title="5.2 表示程序性能"></a>5.2 表示程序性能</h2><h3 id="标准-CPE"><a href="#标准-CPE" class="headerlink" title="标准:CPE"></a>标准:CPE</h3><blockquote>
<p>每元素的周期数</p>
</blockquote>
<h2 id="5-3-消除低效循环"><a href="#5-3-消除低效循环" class="headerlink" title="5.3 消除低效循环"></a>5.3 消除低效循环</h2><blockquote>
<p>例如 :可以拿出来的拿出来</p>
</blockquote>
<h2 id="5-4减少过程调用"><a href="#5-4减少过程调用" class="headerlink" title="5.4减少过程调用"></a>5.4减少过程调用</h2><blockquote>
<p>例: 如果一个循环中不断从结构体中的列表中获取值,而同时,结构体会不断对列表中值的存在进行判断</p>
<p>则可在保证安全的情况下,直接获取结构体中的列表进行访问.</p>
</blockquote>
<h2 id="5-5消除不必要的内存引用"><a href="#5-5消除不必要的内存引用" class="headerlink" title="5.5消除不必要的内存引用"></a>5.5消除不必要的内存引用</h2><blockquote>
<p>例如</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&#123;<span class="comment">// for loop</span></span><br><span class="line">    *dest=*dest+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将dest这个不断访问内存的东西挪到寄存器里</span></span><br><span class="line">val tmp=*dest;</span><br><span class="line">&#123;</span><br><span class="line">  tmp=tmp+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">*dest=tmp</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="5-6-了解现代处理器"><a href="#5-6-了解现代处理器" class="headerlink" title="5.6 了解现代处理器"></a>5.6 了解现代处理器</h2><blockquote>
<ul>
<li><p>延迟界限</p>
<blockquote>
<p>当一系列操作必须按照严格顺序执行时会碰到</p>
<p>因为下一条指令开始前,这一条必须结束</p>
<p>代码中的数据相关限制了处理器利用指令级并行的能力时会碰到延迟界限</p>
</blockquote>
</li>
<li><p>吞吐量界限</p>
<blockquote>
<p>是处理器功能单元的原始计算能力,是程序性能的终极限制</p>
</blockquote>
</li>
</ul>
</blockquote>
<h2 id="5-7-循环展开"><a href="#5-7-循环展开" class="headerlink" title="5.7 循环展开"></a>5.7 循环展开</h2><blockquote>
<ul>
<li>比如n长的循环,2个一组展开之后,循环长度&#x2F;2,这种称之为1*2循环展开</li>
</ul>
</blockquote>
<blockquote>
<p>对一个n长的循环,进行k级别的展开,就需要将上限设置为n-k+1,这样最大循环索引会小于n</p>
</blockquote>
<h2 id="5-8-提高并行性"><a href="#5-8-提高并行性" class="headerlink" title="5.8 提高并行性"></a>5.8 提高并行性</h2><blockquote>
<h3 id="5-8-1-多个累积变量"><a href="#5-8-1-多个累积变量" class="headerlink" title="5.8.1 多个累积变量"></a>5.8.1 多个累积变量</h3><p>例: 见书P370</p>
<p>上面的例子称之为2*2循环展开</p>
<h3 id="5-8-2重新结合变换"><a href="#5-8-2重新结合变换" class="headerlink" title="5.8.2重新结合变换"></a>5.8.2重新结合变换</h3><p>该例子为2*1a循环展开</p>
<p>例</p>
<blockquote>
<p>&#x2F;&#x2F; slow version</p>
<p>acc&#x3D; (acc * data[i]) * data[i+1]</p>
<p>&#x2F;&#x2F;fast version</p>
<p>acc &#x3D; acc * ( data[i] * data[i+1])</p>
</blockquote>
<p>slow版里,每次计算都需要等之前的计算结果出来之后才能继续进行</p>
<p>fast版里,data[i]*&amp; data[i+1]不受约束,因此可以被CPU并行优化,故效率高</p>
</blockquote>
<h2 id="5-9-一些限制因素"><a href="#5-9-一些限制因素" class="headerlink" title="5.9 一些限制因素"></a>5.9 一些限制因素</h2><p>书P378</p>
<h3 id="5-9-1-寄存器溢出"><a href="#5-9-1-寄存器溢出" class="headerlink" title="5.9.1 寄存器溢出"></a>5.9.1 寄存器溢出</h3><blockquote>
<p>当用到的临时变量过多,使得寄存器不够用的时候,会调用栈来存储这些变量,这会使得程序效率变低.</p>
</blockquote>
<h3 id="5-9-2-分支预测和预测错误处罚"><a href="#5-9-2-分支预测和预测错误处罚" class="headerlink" title="5.9.2 分支预测和预测错误处罚"></a>5.9.2 分支预测和预测错误处罚</h3><blockquote>
<p>预测错误会导致较大的错误处罚,那么有什么办法来保证这个处罚对程序效率影响较小呢</p>
<ol>
<li><p>不过分关心可预测的分支</p>
<blockquote>
<p>例如,大部分结束循环的语句判断都是不结束,预测时一般都按照不结束来判断. 这时候只在最后一次会导致预测错误处罚.</p>
</blockquote>
</li>
<li><p>书写适合使用条件传送实现的代码</p>
<blockquote>
<p>最好使用条件数据传送而非条件控制转移.</p>
<p>数据传送示例:</p>
<blockquote>
<p>max&#x3D;a&gt;b?a:b;</p>
</blockquote>
<p>这种形式适合流水线并行操作.</p>
</blockquote>
</li>
</ol>
</blockquote>
<h2 id="5-10-应用-性能提高技术"><a href="#5-10-应用-性能提高技术" class="headerlink" title="5.10 应用 性能提高技术"></a>5.10 应用 性能提高技术</h2><blockquote>
<ol>
<li>高级设计: 为遇到的问题选择适当的算法和数据结构</li>
<li>基本编码原则. 避免限制优化的因素<ol>
<li>消除连续的函数调用<ul>
<li>在可能时,将计算一道循环外</li>
</ul>
</li>
<li>消除不必要的内存引用<ul>
<li>引入临时变量来保存中间结果,只有在最后的值计算出来时,才将结果存放到数组和全局变量中.</li>
</ul>
</li>
</ol>
</li>
<li>低级优化. 结构化代码以利用硬件性能<ol>
<li>展开循环,降低开销</li>
<li>使用多个累计变量和重新结合技术,找到方法提高指令级并行</li>
<li>用功能性的风格重写条件操作,使编译采用条件数据传送.</li>
</ol>
</li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>csapp</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>CSAPP Machine Level Programming</title>
    <url>/1007csapp_CPu.html</url>
    <content><![CDATA[<h2 id="C-语言-基础属性"><a href="#C-语言-基础属性" class="headerlink" title="C 语言 基础属性"></a>C 语言 基础属性</h2><p>数组的指针运算– 数组存储的是它的指针,其指针++ 会跳过存储数据量的位置(如 int a[10],a++ ,arr[a]会+4)</p>
<h2 id="struct的对齐"><a href="#struct的对齐" class="headerlink" title="struct的对齐"></a>struct的对齐</h2><p>由于会根据struct中的最大的基本结构类型[int,double,float 之类的,和列表没关系]来进行对齐[例如,struct中存在double就会按照8byte对齐,如果最大只有int,就按照4byte对齐],因此,最好将结构合理组织,</p>
<p>如</p>
<blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S4</span>&#123;</span><span class="comment">//char :1 byte, int : 4byte</span></span><br><span class="line">    <span class="type">char</span> c;<span class="comment">// 产生3个用于对齐的内存浪费</span></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">char</span> d;<span class="comment">// 产生3个用于对齐的浪费</span></span><br><span class="line">&#125;<span class="comment">// waste 3+3 byte</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S5</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    <span class="type">char</span> d;<span class="comment">//c,d一并存储,产生2个用于对齐的浪费</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</blockquote>
<h2 id="Memory-Layout"><a href="#Memory-Layout" class="headerlink" title="Memory Layout"></a>Memory Layout</h2><h3 id="IMG"><a href="#IMG" class="headerlink" title="IMG:"></a>IMG:</h3><img src="C:\Users\Ysh78\AppData\Roaming\Typora\typora-user-images\image-20221007163747876.png" alt="image-20221007163747876" style="zoom: 33%;" />



<h2 id="Buffer-OverFlow"><a href="#Buffer-OverFlow" class="headerlink" title="Buffer OverFlow"></a>Buffer OverFlow</h2><img src="C:\Users\Ysh78\AppData\Roaming\Typora\typora-user-images\image-20221007163839893.png" alt="image-20221007163839893" style="zoom:33%;" />

<blockquote>
<ul>
<li>注: 内存是按照0x7FFFFFFFFFFF 也就是2^47来作为地址的,所以各位置之间可能会有较大的差距[因为暂时,硬件条件并不会使得整块可供分配的内存id映射被用尽]</li>
</ul>
<p>stack:</p>
<ul>
<li>8MB</li>
<li>向下拓展[地址高标号低]</li>
</ul>
<p>Data:</p>
<ul>
<li>用于存放程序开始时分配的数据 <ul>
<li>存放全局变量</li>
</ul>
</li>
</ul>
<p>Heap:</p>
<ul>
<li>存放通过malloc&#x2F;相关函数申请的变量,会动态变化</li>
<li>大的数据块会出现在靠近stack的位置,并向下增长,小的数据块会出现在靠近Data的位置,并向上增长</li>
</ul>
<p>SharedLibraries:</p>
<ul>
<li>存放库函数代码[一般在磁盘上]</li>
<li>在运行时动态加载到内存中</li>
</ul>
</blockquote>
<h2 id="Unions"><a href="#Unions" class="headerlink" title="Unions"></a>Unions</h2><h2 id="BufferOverFlow"><a href="#BufferOverFlow" class="headerlink" title="BufferOverFlow"></a>BufferOverFlow</h2><h3 id="代码注入攻击详解"><a href="#代码注入攻击详解" class="headerlink" title="代码注入攻击详解"></a>代码注入攻击详解</h3><blockquote>
<p>举例: gets 会不断读取字符串,直至收到一个’\0’</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">echo</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">4</span>];<span class="comment">/* Way too small*/</span></span><br><span class="line">    gets(buf);</span><br><span class="line">    <span class="built_in">puts</span>(buf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时,若输入大于4个字符,echo还是可以接收</p>
<p>查看汇编代码可以看到,调用echo的时候给stackFrame分配了24byte的空间</p>
<p>如果输入大于23个字符,就会报出 segment fault</p>
<ul>
<li>这时候该函数的返回位置可能被溢出的字符串覆盖,使得函数不会到main这个接口,而是进入一个新的地区</li>
<li>这就是代码注入攻击</li>
</ul>
<p>小于23就没事,</p>
</blockquote>
<h3 id="How-to-Avoid"><a href="#How-to-Avoid" class="headerlink" title="How to Avoid"></a>How to Avoid</h3><blockquote>
<ol>
<li>使用安全的替代<ol>
<li>fgets-&gt; gets</li>
<li>strncopy-&gt; strcopy</li>
<li>scanf(“%ns”)-&gt; scanf(“%s”)</li>
</ol>
</li>
<li>Randomized stack offsets– 地址空间布局随机化<ol>
<li>使得每次程序运行的时候,它分配到的缓冲区长度都是变化的</li>
</ol>
</li>
<li>None executable code segments<ol>
<li>在可读&#x2F;可写等内存标识之外增加一个 “execute” 权限</li>
</ol>
</li>
<li>stack canary 栈保护机制<ol>
<li><img src="C:\Users\Ysh78\AppData\Roaming\Typora\typora-user-images\image-20221007201652095.png" alt="image-20221007201652095"></li>
<li>程序会检测到栈溢出的问题并返回</li>
</ol>
</li>
</ol>
</blockquote>
<h3 id="A-Skill-to-Avoid-Randomized-stack-offset-x2F-None-executable-code-segments"><a href="#A-Skill-to-Avoid-Randomized-stack-offset-x2F-None-executable-code-segments" class="headerlink" title="A Skill to Avoid Randomized stack offset&#x2F;None executable code segments"></a>A Skill to Avoid Randomized stack offset&#x2F;None executable code segments</h3><blockquote>
<ul>
<li>但是躲不开canary</li>
</ul>
<h4 id="Gadget"><a href="#Gadget" class="headerlink" title="Gadget"></a>Gadget</h4><p>A Example:<img src="C:\Users\Ysh78\AppData\Roaming\Typora\typora-user-images\image-20221008122557042.png" alt="image-20221008122557042" style="zoom:50%;" /></p>
<p>p后面的值恰好和mov rax rdi 相等,结尾又是一个c3,因此这一段额外的代码会在p赋值之后执行,并返回.</p>
<p>这样就实现了在代码中插入一定量的自己的小代码,返回后就可以通过获取rsp栈中的代码,来将之前的代码块拼接一起执行.</p>
</blockquote>
<h3 id="GDB-Trick"><a href="#GDB-Trick" class="headerlink" title="GDB Trick"></a>GDB Trick</h3><blockquote>
<p>disass [FUNC_NAME] </p>
<p>解析对应函数的汇编代码</p>
</blockquote>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>csapp</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>CSAPP Linking 笔记</title>
    <url>/1012%20Linking.html</url>
    <content><![CDATA[<h2 id="符号和符号表"><a href="#符号和符号表" class="headerlink" title="符号和符号表"></a>符号和符号表</h2><blockquote>
<p>static属性声明的全局变量&#x2F;函数都是模块私有的,任意不被static修饰的全局变量&#x2F;函数都是公共的,可以被其他模块访问</p>
<p>因此,在每个可重定位目标模块中存在三类符号</p>
<ul>
<li>自己定义的全局符号</li>
<li>由其他模块定义并由该模块引用的全局符号</li>
<li>自己定义的局部符号–static修饰的函数&#x2F;全局变量</li>
</ul>
</blockquote>
<h2 id="符号解析"><a href="#符号解析" class="headerlink" title="符号解析"></a>符号解析</h2><blockquote>
<p>编译器解析符号引用的办法是将每个与它输入的可重定位目标文件中的一个确定的符号定义关联起来</p>
</blockquote>
<h3 id="如何解析多重定义的全局符号"><a href="#如何解析多重定义的全局符号" class="headerlink" title="如何解析多重定义的全局符号"></a>如何解析多重定义的全局符号</h3><blockquote>
<p>区别强弱定义: (我的理解) 强定义是全局定义后有初始值,弱定义没有</p>
<ol>
<li>不允许有多个同名的强符号</li>
<li>如果有一个强符号和多个弱符号同名,则选择强符号</li>
<li>如果多个弱符号同名,则随机选择一个</li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>csapp</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Giant VM 操作过程</title>
    <url>/1001GiantVm%20%E6%93%8D%E4%BD%9C%E8%BF%87%E7%A8%8B%20-ysh.html</url>
    <content><![CDATA[<p>主机环境：Windows 11 64位 core i9 12900p</p>
<p>此次使用VMWare Workstation pro 16进行操作</p>
<h2 id="1-环境配置"><a href="#1-环境配置" class="headerlink" title="1.环境配置"></a>1.环境配置</h2><h4 id="step1-系统准备"><a href="#step1-系统准备" class="headerlink" title="step1 系统准备"></a>step1 系统准备</h4><blockquote>
<p>win+r 打开cmd</p>
<p>sysinfo</p>
<p>查看是否开启了Hyper-V，如果开启应将其关闭</p>
<p>关闭方式</p>
<ul>
<li>【启用或关闭Windows功能】-&gt; 将虚拟机平台和windows虚拟机监控程序平台关闭<br><img src="C:\Users\Ysh78\AppData\Roaming\Typora\typora-user-images\image-20220930105100032.png" alt="image-20220930105100032"></li>
<li>如果看到了Hyper-V的选项框，将其取消勾选</li>
<li>然后重启生效修改</li>
</ul>
</blockquote>
<h3 id="step2-VMware-设置"><a href="#step2-VMware-设置" class="headerlink" title="step2 VMware 设置"></a>step2 VMware 设置</h3><blockquote>
<p>VMware 中启动Ubuntu16.04<br>配置为<br>内核： Linux4.15.0-112，磁盘分配&gt;40G,在CPU设置中启用嵌套虚拟化</p>
</blockquote>
<h3 id="step3-下载必要的包"><a href="#step3-下载必要的包" class="headerlink" title="step3  下载必要的包"></a>step3  下载必要的包</h3><blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install build-essential openssl libncurses5-dev libssl-dev</span><br><span class="line"></span><br><span class="line">sudo apt-get install zlibc minizip libidn11-dev libidn11 bison flex</span><br></pre></td></tr></table></figure>


</blockquote>
<h3 id="step4-获得Linux-DSM"><a href="#step4-获得Linux-DSM" class="headerlink" title="step4 获得Linux-DSM"></a>step4 获得Linux-DSM</h3><blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/GiantVM/Linux-DSM.git</span><br></pre></td></tr></table></figure>


</blockquote>
<h3 id="step5"><a href="#step5" class="headerlink" title="step5"></a>step5</h3><blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd Linux-DSM</span><br></pre></td></tr></table></figure>


</blockquote>
<h3 id="step6-Enable-DSM-support"><a href="#step6-Enable-DSM-support" class="headerlink" title="step6 Enable DSM support"></a>step6 Enable DSM support</h3><blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make menuconfig</span><br></pre></td></tr></table></figure>

<p>   <code>Virtualization</code> –&gt; <code>KVM distributed software memory support</code> –&gt; <code>press &#39;Y&#39; to include the option</code><br>   <code>Save</code> –&gt; <code>Exit</code></p>
</blockquote>
<h3 id="step7-Compile-the-Kernel-make"><a href="#step7-Compile-the-Kernel-make" class="headerlink" title="step7 Compile the Kernel (make)"></a>step7 Compile the Kernel (make)</h3><p>   make -jN<br>   [N 是]<br>   wait for about three hour(or more)<br>   <code>   之前的失败经历：    Environment: win11 wsl2 Ubuntu16.04 LinuxKernel version 5.10    output :    makefile:976: recipe for target &#39;vmlinux&#39; failed    </code></p>
<h3 id="step-8-install-the-Kernel"><a href="#step-8-install-the-Kernel" class="headerlink" title="step 8 install the Kernel"></a>step 8 install the Kernel</h3><blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo make modules_install</span><br><span class="line">  sudo make install</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="step-9-update-the-grub"><a href="#step-9-update-the-grub" class="headerlink" title="step 9 update the grub"></a>step 9 update the grub</h3><blockquote>
<p>[在我的尝试中，这时候应当先打开grub这个文件]<br>[gedit 比较方便看，用vi也可以]</p>
</blockquote>
   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo gedit /etc/default/grub</span><br></pre></td></tr></table></figure>

<p>   [然后将GRUB_HIDDEN_TIMEOUT 这个属性置为0，不然之后重启的时候没时间换系统]<br>   这自己操作<br>   [然后是核心操作 ]</p>
   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo update-grub</span><br></pre></td></tr></table></figure>

<p>   [之后重启]</p>
   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure>

<p>   [重启后看到下面界面，按照图片选择]<br>   [之后等待，启动后，在shell里输入]</p>
   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">uname -a </span><br></pre></td></tr></table></figure>

<p>   [可以看到版本为ubuntu 4.9.76+]</p>
<h2 id="2-QEMU"><a href="#2-QEMU" class="headerlink" title="2.QEMU"></a>2.QEMU</h2><h3 id="step1-Prepartion"><a href="#step1-Prepartion" class="headerlink" title="step1 Prepartion"></a>step1 Prepartion</h3><blockquote>
<p>sudo apt-get install python pkg-config libglib2.0-dev zlib1g-dev libpixman-1-dev libfdt-dev<br>git clone <a href="https://github.com/GiantVM/QEMU.git">https://github.com/GiantVM/QEMU.git</a><br>cd QEMU</p>
</blockquote>
<h3 id="step2-Configuration"><a href="#step2-Configuration" class="headerlink" title="step2 Configuration"></a>step2 Configuration</h3><blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./configure --target-list=x86_64-softmmu --enable-kvm</span><br></pre></td></tr></table></figure>


</blockquote>
<h3 id="step3-Compilation"><a href="#step3-Compilation" class="headerlink" title="step3 Compilation"></a>step3 Compilation</h3><blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">make -jN</span><br></pre></td></tr></table></figure>


</blockquote>
<h3 id="step4-Create-hard-disk-image"><a href="#step4-Create-hard-disk-image" class="headerlink" title="step4 Create hard disk image"></a>step4 Create hard disk image</h3><blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ..</span><br><span class="line">wget http://ftp.sjtu.edu.cn/ubuntu-cd/16.04.7/ubuntu-16.04.7-server-amd64.iso</span><br></pre></td></tr></table></figure>

<p>[如果找不到，可以直接输入<a href="http://ftp.sjtu.edu.cn/ubuntu-cd/16.04.7%EF%BC%8C%E5%9C%A8%E9%87%8C%E9%9D%A2%E6%89%BE%E5%88%B0Ubuntu-16.x-server.iso">http://ftp.sjtu.edu.cn/ubuntu-cd/16.04.7，在里面找到Ubuntu-16.x-server.iso</a> ，然后wget]</p>
<p>[这里就是得用apt下一个qemu，选择不下,用底下x86-64_softmmu&#x2F; 底下的qemu-system-x86_64会卡死]</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/qemu-img create -f qcow2 ubuntu-server.img 10G</span><br><span class="line">sudo apt-get install qemu</span><br><span class="line">qemu-system-x86_64 -m 1024 ubuntu-server.img -cdrom ../ubuntu-16.04.7-server-amd64.iso -enable-kvm</span><br></pre></td></tr></table></figure>

<p>[上面会跳出系统设置，基本设置一下用户名和密码，然后会问是否要装载GRUB，选择yes，其他无所谓]</p>
</blockquote>
<h2 id="3-Run-Giant-VM-on-a-single-machine"><a href="#3-Run-Giant-VM-on-a-single-machine" class="headerlink" title="3.Run Giant VM on a single machine"></a>3.Run Giant VM on a single machine</h2><h3 id="First-we-install-vncviewer-to-monitor-the-guest"><a href="#First-we-install-vncviewer-to-monitor-the-guest" class="headerlink" title="First we install vncviewer to monitor the guest."></a>First we install vncviewer to monitor the guest.</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://www.realvnc.com/download/file/viewer.files/VNC-Viewer-6.19.325-Linux-x64.deb</span><br><span class="line">sudo dpkg -i VNC-Viewer-6.19.325-Linux-x64.deb</span><br></pre></td></tr></table></figure>

<p>如果下面报错说内存不够，把虚拟机关掉，多分配给它一点内存（&gt;8G)</p>
<blockquote>
<h3 id="terminal-1"><a href="#terminal-1" class="headerlink" title="terminal 1 :"></a>terminal 1 :</h3> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd QEMU/</span><br><span class="line"></span><br><span class="line">sudo x86_64-softmmu/qemu-system-x86_64 --nographic -hda ubuntu-server.img -cpu host -machine kernel-irqchip=off -smp 4 -m 4096  --enable-kvm -serial mon:stdio -local-cpu 2,start=0,iplist=&quot;127.0.0.1 127.0.0.1&quot; -vnc :0</span><br></pre></td></tr></table></figure>

</blockquote>
<blockquote>
<h3 id="terminal-2："><a href="#terminal-2：" class="headerlink" title="terminal 2："></a>terminal 2：</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd QEMU/</span><br><span class="line">sudo x86_64-softmmu/qemu-system-x86_64 --nographic -hda ubuntu-server.img -cpu host -machine kernel-irqchip=off -smp 4 -m 2048  --enable-kvm -serial mon:stdio -local-cpu 2,start=2,iplist=&quot;127.0.0.1 127.0.0.1&quot;</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<h3 id="terminal-3-启动-vncviewer"><a href="#terminal-3-启动-vncviewer" class="headerlink" title="terminal 3:[启动 vncviewer]"></a>terminal 3:[启动 vncviewer]</h3><p>冒号后面的0和前面 terminal1 后面-vnc 后面的数字对应</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vncviewer :0</span><br></pre></td></tr></table></figure>

<p>如果启动之后看到 nobootable device ，可能需要检查2 QEMU 最后一步的 qemu-system-x86_64 那段是不是正常</p>
</blockquote>
]]></content>
      <categories>
        <category>大四</category>
        <category>上交</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>VM</tag>
      </tags>
  </entry>
  <entry>
    <title>编码技巧 笔记</title>
    <url>/1012%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7.html</url>
    <content><![CDATA[<h2 id="1-整洁性"><a href="#1-整洁性" class="headerlink" title="1 整洁性"></a>1 整洁性</h2><ul>
<li>语义简单明确,优先考虑易于读者理解的写法</li>
<li>简洁!&#x3D;代码短 <ul>
<li>复杂的问号表达式反而不如 if else 方便理解<ul>
<li>个人疑问:问号表达式可以一定程度上提供条件数据传送,而非条件转移</li>
</ul>
</li>
</ul>
</li>
<li>提前返错<ul>
<li>提前返回错误判断可以减少主体逻辑的缩进数量,使主体代码逻辑更醒目</li>
</ul>
</li>
<li>利用析构函数做清理工作<ul>
<li>利用C++析构函数做清理工作,在复杂冗长代码中不会漏掉. 比如执行回调,关闭文件,释放内存</li>
</ul>
</li>
<li>用朴素直观的算法<ul>
<li>在非关键路径上,优先使用朴素直观,维护性好的代码.</li>
</ul>
</li>
<li>用轮询代替条件变量<ul>
<li>非关键路径上这么做,代码间接,不容易出bug</li>
<li>轮询: 一直等待信号</li>
</ul>
</li>
<li>在关键对象增加magic字段<ul>
<li>增加magic字段和断言检查,可以及时发现内存错误</li>
</ul>
</li>
</ul>
<h2 id="2-测试"><a href="#2-测试" class="headerlink" title="2 测试"></a>2 测试</h2><ul>
<li><p>边界</p>
</li>
<li><p>状态&#x2F;分支测试</p>
</li>
<li><p>重复&#x2F;幂等性测试</p>
</li>
<li><p>兼容性测试</p>
</li>
<li><p>防御性测试</p>
<ul>
<li>关注系统在最差情况下的表现,明确能力边界</li>
</ul>
</li>
<li><p>避免写出不稳定case</p>
<ul>
<li><p>例</p>
</li>
<li><blockquote>
<ul>
<li>测试不聚焦，无脑复制粘贴，等价类测试爆炸</li>
<li>异步等待，基于时间假设，sleep 并发，未能在预期的窗口期交互</li>
<li>有顺序依赖的测试，共享某个状态</li>
<li>资源溢出，数据库链接满、内存 OOM 析构随机 core</li>
<li>析构未严格保序或者未构造</li>
<li>多线程共享资源的错误用法导致概率 crash</li>
<li>有未处理完的任务就退出</li>
</ul>
</blockquote>
</li>
</ul>
</li>
</ul>
<h2 id="3-提交"><a href="#3-提交" class="headerlink" title="3 提交"></a>3 提交</h2><ol>
<li>一次提交不要超过400行代码,最好只解决一个问题</li>
<li>自我检查<ol>
<li>速度&lt;500行&#x2F;小时</li>
<li>一次review时间不超过1小时</li>
<li>接口&gt;测试&gt;实现</li>
</ol>
</li>
</ol>
<h2 id="4-高效工作方法"><a href="#4-高效工作方法" class="headerlink" title="4 高效工作方法"></a>4 高效工作方法</h2><ul>
<li><p>抽象和分而治之</p>
<ul>
<li>抽象:明确模块之间的依赖关系,确定API接口</li>
<li>分而治之:对子系统设计进行合理的注释,帮助理解</li>
<li>代码提交尽量做到原子[不可分割的特性.修复.优化],测试代码一同提交</li>
</ul>
</li>
<li><p>不要重复</p>
<ul>
<li>寻找重复逻辑和代码,并进行封装</li>
<li>寻找流程重复,使用脚本或者工具自动化</li>
<li>沉淀踩坑经验</li>
</ul>
</li>
<li><p>快速迭代</p>
<ul>
<li>不要过度设计</li>
<li>尽快让代码运行和快速验证,不断迭代来完善</li>
<li>为了快速验证,本地测试成本低</li>
<li>实现一个可运行的脚手架,再持续添加内容</li>
</ul>
</li>
<li><p>忌“太心急”，慢即是快</p>
</li>
<li><ul>
<li>需求澄清：类似 TCP 三次握手，用自己理解的方式再给对方讲一遍，确认双方理解一致，对焦，避免重复返工</li>
<li>自我提问：为什么做这件事？业务价值是什么？关键技术是什么？已有的系统和它对比有什么不同？兄弟团队是否做过类似的工作？是否有经验可供参考？业务&#x2F;技术的适用场景是什么？预计耗时和进度风险？</li>
<li>新人往往脚踏实地，忘记了仰望星空，只顾着埋头苦干，不思考背后的业务价值，这一锄头，那一铁锹，遍地都是坑，就是不开花，费时费力，成就感低。</li>
</ul>
</li>
<li><p>忌低效沟通，用数据说话</p>
</li>
<li><ul>
<li>精确地描述问题，上下文和范围，提供有效信息</li>
<li>文档是提高沟通效率的最佳方式之一，Google 有文档文化，推荐阅读《Design Docs at Google》﻿[5]</li>
<li>Bad Case：「测试 CX6 网卡时，IOPS 大幅下降」</li>
<li>Good Case：「在 100g 网络标卡 CX6 验证性能时，8 jobs 32 depth iosize 4K 场景下，极限 IOPS 从 120 万下降至 110 万，与 FIC 卡相比性能存在 8% 差异」</li>
</ul>
</li>
<li><p>忌“蠢问题”，学会提问</p>
</li>
<li><ul>
<li>鼓励新人多提问，但提问的问题一定要有质量</li>
<li>关于如何提出一个好问题推荐阅读《提问的智慧》﻿[6]</li>
<li>Bad Case：「我在编译耗时很长，我怀疑是资源不够，这种情况怎么办？」</li>
<li>Good Case：「我的开发机编译耗时 2 小时，不符合预期，OS 是 centOS 7U、128GB 内存、64Core，编译并发度是 20 核，未限制内存，编译过程使用 Top 查看确实 20 核并发，Cpu 和 Mem没有达到瓶颈，iostat 看磁盘使用率每秒 60%」</li>
</ul>
</li>
<li></li>
<li><h2 id="5-延伸阅读"><a href="#5-延伸阅读" class="headerlink" title="5 延伸阅读"></a>5 延伸阅读</h2></li>
<li><blockquote>
<p>编写可读代码的艺术</p>
<p>software Engineer at Google</p>
<p>人月神话</p>
<p>数据密集型应用系统设计</p>
</blockquote>
</li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>论文阅读笔记-Towards a Fully Disaggregated and Programmable Data Center</title>
    <url>/1002%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0-Towards%20a%20Fully%20Disaggregated%20and%20Programmable.html</url>
    <content><![CDATA[<h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>目的： 探索建立一个完全分布式的数据中心的可能性。</p>
<p>topLayer: 探索了两种抽象形式，并提出了一种原分布式的方法</p>
<p>bottomLayer: 描述了建立分布式设备与连接它们的网络基础设施所需的硬件和关键功能。</p>
<p>connection：提出了一个静态时间组价，它将不同的用户程序编译到异构的分布式设备中，通过一个disaggregation-native 的中间表示法。</p>
<p>同时提出了一个运行时的系统，他管理硬件资源，并安排编译器生成的执行单元。</p>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>现有的问题： </p>
<blockquote>
<p> 应用的颗粒化和硬件性能增长速度的限制，对分布式数据中心提出了要求。</p>
<p>而现有的分布式解决方案无法对网络和计算器进行分布。</p>
<p>同时，现有的数据中心网络的设计目的是连接服务器，但是，怎么高效地连接分布式设备呢？</p>
<p>最后，目前仍不清楚如何将应用映射到一个分布式的硬件平台。</p>
</blockquote>
<h3 id="两种设想的抽象类型"><a href="#两种设想的抽象类型" class="headerlink" title="两种设想的抽象类型"></a>两种设想的抽象类型</h3><blockquote>
<ol>
<li>向后兼容的抽象，<br>用户不知道硬件性质，他们会认为程序在虚拟机上运行，完全与服务器无关。</li>
<li>向应用程序暴露部分分布式、可编程的底层性质。<br>这种类型会有更好的 性能，因为用户可以直接控制并利用低层次的系统功能。如网络通信等。</li>
</ol>
</blockquote>
<h3 id="实现应用的分布式映射"><a href="#实现应用的分布式映射" class="headerlink" title="实现应用的分布式映射"></a>实现应用的分布式映射</h3><blockquote>
<p>不同于以往的分布式架构，这里使用Intetmediate Representation 作为中层架构。它是围绕着分解执行单元的概念进行的。</p>
<p>用MLIR将程序分解成小编码块</p>
</blockquote>
<h3 id="如何在FDP-DC中建立硬件基础设施"><a href="#如何在FDP-DC中建立硬件基础设施" class="headerlink" title="如何在FDP-DC中建立硬件基础设施"></a>如何在FDP-DC中建立硬件基础设施</h3><blockquote>
<p>提供了建立一个分布式设备的指导方针，并却行了它的三个方针，网络连接性，硬件虚拟化和多用户隔离</p>
<p>设想了一个可重配置的网络架构</p>
</blockquote>
<h3 id="runtime-management-system"><a href="#runtime-management-system" class="headerlink" title="runtime management system"></a>runtime management system</h3><blockquote>
<p>FDP-DC OS 监督整个资源池，在规划的时候会采用编译器的提示</p>
</blockquote>
<h2 id="FDP-DC-Design"><a href="#FDP-DC-Design" class="headerlink" title="FDP-DC Design"></a>FDP-DC Design</h2><p><img src="C:\Users\Ysh78\AppData\Roaming\Typora\typora-user-images\image-20221002152443741.png" alt="image-20221002152443741"></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>计算机</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>csapp 异常控制流</title>
    <url>/1013%20%E5%BC%82%E5%B8%B8%E6%8E%A7%E5%88%B6%E6%B5%81.html</url>
    <content><![CDATA[<h1 id="1013-异常控制流"><a href="#1013-异常控制流" class="headerlink" title="1013 异常控制流"></a>1013 异常控制流</h1><h3 id="Exception-Control-Flow-ECF"><a href="#Exception-Control-Flow-ECF" class="headerlink" title="Exception Control Flow ECF"></a>Exception Control Flow ECF</h3><h2 id="1-1-异常处理"><a href="#1-1-异常处理" class="headerlink" title="1.1 异常处理"></a>1.1 异常处理</h2><blockquote>
<p>启动时生成<strong>异常表</strong></p>
<p>运行时检测到异常,确定异常号,查找异常表,进入处理程序</p>
<p>执行完后,执行一条”从中断返回”指令,将控制返回给被中断的程序[如果是一个用户程序被中断]</p>
</blockquote>
<h2 id="1-2异常类别"><a href="#1-2异常类别" class="headerlink" title="1.2异常类别"></a>1.2异常类别</h2><ol>
<li><p>中断</p>
</li>
<li><p>陷阱和系统调用</p>
<blockquote>
<p>陷阱: 有意的异常,用来在用户程序和内核之间提供一个像过程一样的接口–系统调用</p>
</blockquote>
</li>
<li><p>故障</p>
<blockquote>
<p>如 除法错误,却也,一般保护故障[程序引用了一个未定义的虚拟内存区域,Linux一般会报告为一个 段故障 Segmentation fault]</p>
</blockquote>
</li>
<li><p>终止</p>
<blockquote>
<p>不可恢复的致命错误–通常硬件错误</p>
</blockquote>
</li>
</ol>
<h2 id="2-进程"><a href="#2-进程" class="headerlink" title="2 进程"></a>2 进程</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><blockquote>
<p>一个执行中程序的实例</p>
</blockquote>
<p>维护一个 该程序是系统中当前运行的唯一程序的假象</p>
<p>拥有</p>
<ul>
<li>一个独立的逻辑控制流<ul>
<li>提供独占处理器的假象</li>
</ul>
</li>
<li>一个私有的地址空间<ul>
<li>提供独占内存系统的假象</li>
</ul>
</li>
</ul>
<h3 id="进程空间"><a href="#进程空间" class="headerlink" title="进程空间"></a>进程空间</h3><p>给出通用结构</p>
<blockquote>
<p>以x86-64 Linux为例</p>
<img src="assets/image-20221013142209341.png" alt="image-20221013142209341" style="zoom:50%;" />
</blockquote>
<h3 id="上下文切换"><a href="#上下文切换" class="headerlink" title="上下文切换"></a>上下文切换</h3><p>用于实现多任务</p>
<p>上下文: 重新启动一个被抢占的进程所需的状态</p>
<h2 id="系统调用错误处理"><a href="#系统调用错误处理" class="headerlink" title="系统调用错误处理"></a>系统调用错误处理</h2><p>Unix系统级函数遇到错误时,通常会返回-1,并设置全局整数变量errno来表示什么出错了.</p>
<h2 id="进程控制"><a href="#进程控制" class="headerlink" title="进程控制"></a>进程控制</h2><p>重点是创建子进程</p>
<p>父进程调用fork函数创建一个子进程</p>
<h3 id="父子进程区别"><a href="#父子进程区别" class="headerlink" title="父子进程区别"></a>父子进程区别</h3><blockquote>
<p>相同</p>
<ul>
<li>虚拟地址空间<ul>
<li>代码</li>
<li>数据段</li>
<li>堆</li>
<li>共享库</li>
<li>用户栈</li>
</ul>
</li>
<li>打开描述符<ul>
<li>意味着父进程调用fork时,子进程可以读写父进程中打开的任何文件</li>
</ul>
</li>
</ul>
<p>区别</p>
<ul>
<li>Pid<ul>
<li>进程id不同</li>
</ul>
</li>
<li>并发执行<ul>
<li>父进程和子进程是并发运行的独立进程</li>
</ul>
</li>
<li>虚拟地址空间<ul>
<li><strong>子进程得到的副本和父进程相同,包括打开的文件描述符,但是是一份独立的副本,也就是说,之后的调用,子进程和父进程独立.</strong></li>
</ul>
</li>
</ul>
</blockquote>
<p>fork</p>
<ul>
<li>调用一次返回两次<ul>
<li>一次是在调用进程(父进程中)<ul>
<li>返回子进程PID(非零)</li>
</ul>
</li>
<li>一次在创建的进程中(子进程中)<ul>
<li>返回0</li>
</ul>
</li>
</ul>
</li>
<li>可以用来辨认子进程还是父进程</li>
</ul>
<h3 id="回收子进程"><a href="#回收子进程" class="headerlink" title="回收子进程"></a>回收子进程</h3><p>步骤: 终止-&gt;分配给init进程作为养父-&gt;父进程回收[若父进程没来得及回收,则由init进程回收]</p>
<h2 id="信号"><a href="#信号" class="headerlink" title="信号"></a>信号</h2><p>较高层</p>
<ul>
<li>是一个小消息,通知进程系统中发生了一个某种类型的事件.</li>
<li>用于通知用户进程发生了一些低层的硬件异常</li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>csapp</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>编码技巧 笔记</title>
    <url>/1013%E7%BC%96%E5%86%99%E5%8F%AF%E8%AF%BB%E4%BB%A3%E7%A0%81%E7%9A%84%E8%89%BA%E6%9C%AF%20%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0.html</url>
    <content><![CDATA[<p>1012编写可读代码的艺术 阅读笔记 </p>
<h1 id="表面改进"><a href="#表面改进" class="headerlink" title="表面改进"></a>表面改进</h1><h2 id="1-代码应当易于理解"><a href="#1-代码应当易于理解" class="headerlink" title="1.代码应当易于理解"></a>1.代码应当易于理解</h2><p><strong>可读性</strong>: 代码的写法应当使别人理解它所需的时间最小化</p>
<h2 id="2-将信息装入名字里"><a href="#2-将信息装入名字里" class="headerlink" title="2.将信息装入名字里"></a>2.将信息装入名字里</h2><ul>
<li>选择专业的词</li>
<li>避免泛泛的名字</li>
<li>用具体的名字代替抽象的名字</li>
<li>使用前缀&#x2F;后缀给名字附带更多信息</li>
<li>决定名字的长度<ul>
<li>小作用域短名字</li>
<li>首字母缩略词– 需要易于理解</li>
<li>丢掉没用的词</li>
</ul>
</li>
<li>利用名字的格式表达含义</li>
</ul>
<h2 id="3-不会误解的名字"><a href="#3-不会误解的名字" class="headerlink" title="3.不会误解的名字"></a>3.不会误解的名字</h2><h2 id="4-审美"><a href="#4-审美" class="headerlink" title="4.审美"></a>4.审美</h2><ol>
<li>使用一致的布局,让读者很快习惯这种风格</li>
<li>让相似的代码看上去相似</li>
<li>把相关的代码行分组,形成代码块</li>
</ol>
<h2 id="5-该写什么样的注释"><a href="#5-该写什么样的注释" class="headerlink" title="5.该写什么样的注释"></a>5.该写什么样的注释</h2><h3 id="不该写什么注释"><a href="#不该写什么注释" class="headerlink" title="不该写什么注释?"></a>不该写什么注释?</h3><ol>
<li>不要为那些从代码本身就能快速推断的事实写注释</li>
<li>不要为了注释而注释</li>
<li>不要给不好的名字加注释–应该把名字改好</li>
</ol>
<h3 id="该写什么"><a href="#该写什么" class="headerlink" title="该写什么?"></a>该写什么?</h3><ol>
<li><p>记录思想</p>
<p>记录写代码时有过的重要想法</p>
<ol>
<li>比如加入”导演评论”</li>
</ol>
</li>
<li><p>为代码中的瑕疵写注释</p>
</li>
<li><p>给常量加注释</p>
</li>
<li><p>公布可能的陷阱</p>
</li>
<li><p>全局观注释–类之间如何交互等</p>
</li>
</ol>
<h2 id="6-写出言简意赅的注释"><a href="#6-写出言简意赅的注释" class="headerlink" title="6.写出言简意赅的注释"></a>6.写出言简意赅的注释</h2><ol>
<li>让注释保持紧凑</li>
<li>避免不明确的代词</li>
<li>润色粗糙的句子</li>
<li>精确描述函数行为</li>
<li>用输入输出例子来说明</li>
<li>声明代码意图</li>
<li>采用信息量高的词</li>
<li></li>
</ol>
<h1 id="逻辑改进"><a href="#逻辑改进" class="headerlink" title="逻辑改进"></a>逻辑改进</h1><h2 id="7-把控制流变的易读"><a href="#7-把控制流变的易读" class="headerlink" title="7.把控制流变的易读"></a>7.把控制流变的易读</h2><ol>
<li><p>比较语句</p>
<blockquote>
<p>左侧倾向于变化值,右侧倾向于固定值</p>
</blockquote>
</li>
<li><p>最小化嵌套</p>
<blockquote>
<p>提前返回</p>
<blockquote>
<p>这是个好事</p>
</blockquote>
</blockquote>
</li>
</ol>
<h2 id="8-拆分超长表达式"><a href="#8-拆分超长表达式" class="headerlink" title="8.拆分超长表达式"></a>8.拆分超长表达式</h2><p>思想:拆成小块</p>
<h2 id="9-变量与可读性"><a href="#9-变量与可读性" class="headerlink" title="9.变量与可读性"></a>9.变量与可读性</h2><ul>
<li>减少变量<ul>
<li>去掉没有价值的临时变量</li>
<li>减少中间结果</li>
<li>减少控制流变量</li>
<li>缩小变量的作用域</li>
</ul>
</li>
</ul>
<h1 id="重新组织代码"><a href="#重新组织代码" class="headerlink" title="重新组织代码"></a>重新组织代码</h1><h2 id="10-抽取不相关的子问题"><a href="#10-抽取不相关的子问题" class="headerlink" title="10.抽取不相关的子问题"></a>10.抽取不相关的子问题</h2><p>如果一段代码并不是为了这个代码块的高层次目标直接工作,可以将其抽取处理.</p>
<h2 id="11-一次只做一件事"><a href="#11-一次只做一件事" class="headerlink" title="11.一次只做一件事"></a>11.一次只做一件事</h2><p>如题</p>
<h2 id="12-把想法变成代码"><a href="#12-把想法变成代码" class="headerlink" title="12.把想法变成代码"></a>12.把想法变成代码</h2><p>最好按自然理解的逻辑组织代码</p>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>编码</tag>
      </tags>
  </entry>
  <entry>
    <title>qemu cxl</title>
    <url>/qemu-cxl.html</url>
    <content><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">./build/aarch64-softmmu/qemu-system-aarch64 -M virt,gic-version=3,cxl=on -m 4g,maxmem=8G,slots=8 -cpu max \<br>-hda ../vm_disk/ubuntu_cxl.qcow2 \<br>-cdrom ../ubuntu-20.04.5-desktop-amd64.iso \<br>-object memory-backend-file,id=cxl-mem1,share=on,mem-path=/tmp/cxltest.raw,size=256M \<br>-object memory-backend-file,id=cxl-lsa1,share=on,mem-path=/tmp/lsa.raw,size=256M \<br>-device pxb-cxl,bus_nr=12,bus=pcie.0,id=cxl.1 \<br>-device cxl-rp,port=0,bus=cxl.1,id=root_port13,chassis=0,slot=2 \<br>-device cxl-type3,bus=root_port13,memdev=cxl-mem1,lsa=cxl-lsa1,id=cxl-pmem0 \<br>-M cxl-fmw.0.targets.0=cxl.1,cxl-fmw.0.size=4G<br></code></pre></td></tr></table></figure>

<p>-M</p>
<p>Libnvdimm</p>
<p><img src="https://gitee.com/i-dont-miss-it/pic_bed/raw/master/img/image-20221015200747925.png" alt="image-20221015200747925"></p>
<p><img src="https://gitee.com/i-dont-miss-it/pic_bed/raw/master/img/image-20221015200623751.png" alt="image-20221015200623751"></p>
<p><img src="https://gitee.com/i-dont-miss-it/pic_bed/raw/master/img/image-20221015200854839.png" alt="image-20221015200854839"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">~/qemu/build/aarch64-softmmu/qemu-system-aarch64 -M virt,gic-version=3,cxl=on -m 4g,maxmem=8G,slots=8 -cpu max \<br>-bios ~/repo/edk2/Build/ArmVirtQemu-AARCH64/DEBUG_GCC48/FV/QEMU_EFI.fd \<br>-kernel ~/linux/arch/arm64/boot/Image \<br>-initrd ./rootfs.cpio.gz \<br>-monitor telnet:127.0.0.1:4444,server,nowait \<br>-object memory-backend-file,id=cxl-mem1,share=on,mem-path=/tmp/cxltest.raw,size=256M \<br>-object memory-backend-file,id=cxl-lsa1,share=on,mem-path=/tmp/lsa.raw,size=256M \<br>-device pxb-cxl,bus_nr=12,bus=pcie.0,id=cxl.1 \<br>-device cxl-rp,port=0,bus=cxl.1,id=root_port13,chassis=0,slot=2 \<br>-device cxl-type3,bus=root_port13,memdev=cxl-mem1,lsa=cxl-lsa1,id=cxl-pmem0 \<br>-cxl-fixed-memory-window targets.0=cxl.1,size=4G \<br>-append &quot;console=ttyAMA0 root=/dev/ram rdinit=/init acpi=on&quot; \<br>-nographic \<br></code></pre></td></tr></table></figure>

<p><img src="https://gitee.com/i-dont-miss-it/pic_bed/raw/master/img/image-20221015202421449.png" alt="image-20221015202421449"></p>
<p><a href="https://github.com/trekhleb/state-of-the-art-shitcode"><img src="https://img.shields.io/static/v1?label=State-of-the-art&message=Shitcode&color=7B5804" alt="State-of-the-art Shitcode"></a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- menuconfig<br>make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- -j16<br>sudo make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- modules_install<br>sudo make ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu-  install<br>sudo update-grub<br>reboot<br><br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>大四</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>qemu</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 系统上禁止运行脚本。有关详细信息， 请参阅 https:/go.microsoft.com/fwlink/?LinkID=135170 中的 about_Execution_Policies</title>
    <url>/%E8%A7%A3%E5%86%B3-%E7%B3%BB%E7%BB%9F%E4%B8%8A%E7%A6%81%E6%AD%A2%E8%BF%90%E8%A1%8C%E8%84%9A%E6%9C%AC%E3%80%82%E6%9C%89%E5%85%B3%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF%EF%BC%8C-%E8%AF%B7%E5%8F%82%E9%98%85-https-go-microsoft-com-fwlink-LinkID-135170-%E4%B8%AD%E7%9A%84-about-Execution-Policies.html</url>
    <content><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><blockquote>
<p>Windows11 （版本22621.1413）</p>
</blockquote>
<h2 id="省流"><a href="#省流" class="headerlink" title="省流"></a>省流</h2><blockquote>
<ol>
<li><p>win + x 以管理员身份运行PowerShell</p>
</li>
<li><p>输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser<br></code></pre></td></tr></table></figure>

<p>，设置成Y即可</p>
<ol>
<li><p>想知道改成啥样了，可以输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">Get-ExecutionPolicy -List<br></code></pre></td></tr></table></figure>
</li>
<li><p>只想知道当前用户的改成啥样了，输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">Get-ExecutionPolicy<br></code></pre></td></tr></table></figure></li>
</ol>
</li>
</ol>
</blockquote>
<h2 id="其他人的解决方案"><a href="#其他人的解决方案" class="headerlink" title="其他人的解决方案"></a>其他人的解决方案</h2><p>搜到的其他人的法子</p>
<blockquote>
<ol>
<li>win + x 以管理员身份运行PowerShell</li>
<li>输入set-executionpolicy remotesigned，设置成Y即可</li>
</ol>
</blockquote>
<p>但实际上我这并没有把当前用户的executionpolicy 改成remotesigned，或者是我这文件夹不认这个LocalMachine的设置（为啥，我不道啊）</p>
<h2 id="需要知道的一些东西"><a href="#需要知道的一些东西" class="headerlink" title="需要知道的一些东西"></a>需要知道的一些东西</h2><p>毕竟这是对电脑的修改，大伙肯定是想知道这是改了什么的</p>
<blockquote>
<h3 id="用户组"><a href="#用户组" class="headerlink" title="用户组"></a>用户组</h3><h3 id="LocalMachine"><a href="#LocalMachine" class="headerlink" title="LocalMachine"></a>LocalMachine</h3><p>执行策略会影响当前计算机上的所有用户。 它存储在 <strong>HKEY_LOCAL_MACHINE</strong> 注册表子项中。</p>
<h3 id="CurrentUser"><a href="#CurrentUser" class="headerlink" title="CurrentUser"></a>CurrentUser</h3><p>执行策略仅影响当前用户。 它存储在 <strong>HKEY_CURRENT_USER</strong> 注册表子项中。</p>
<h3 id="两个用到的安全策略级别"><a href="#两个用到的安全策略级别" class="headerlink" title="两个用到的安全策略级别"></a>两个用到的安全策略级别</h3><h3 id="Restricted"><a href="#Restricted" class="headerlink" title="Restricted"></a>Restricted</h3><ul>
<li>Windows 客户端计算机的默认执行策略。</li>
<li>允许单个命令，但不允许脚本。</li>
<li>阻止运行所有脚本文件，包括格式化和配置文件 () <code>.ps1xml</code> 、模块脚本文件 (<code>.psm1</code>) ，以及 PowerShell 配置文件 () <code>.ps1</code></li>
</ul>
<h3 id="RemoteSigned"><a href="#RemoteSigned" class="headerlink" title="RemoteSigned"></a>RemoteSigned</h3><ul>
<li>Windows Server 计算机的默认执行策略。</li>
<li>脚本可以运行。</li>
<li>需要受信任的发布者对从 Internet 下载的脚本和配置文件（包括电子邮件和即时消息程序）的数字签名。</li>
<li>不需要在本地计算机上编写且未从 Internet 下载的脚本上使用数字签名。</li>
<li>如果未阻止脚本（例如使用 cmdlet），则运行从 Internet 下载且未签名的 <code>Unblock-File</code> 脚本。</li>
<li>运行来自 Internet 以外的源的未签名脚本以及可能是恶意的已签名脚本的风险。</li>
</ul>
</blockquote>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-7.3">关于执行策略 - PowerShell | Microsoft Learn</a></p>
<p><a href="https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.security/set-executionpolicy?view=powershell-7.3">Set-ExecutionPolicy (Microsoft.PowerShell.Security) - PowerShell | Microsoft Learn</a></p>
<p><a href="https://blog.csdn.net/l_x_cser/article/details/104956657">实测解决:系统上禁止运行脚本。有关详细信息， 请参阅 https:&#x2F;go.microsoft.com&#x2F;fwlink&#x2F;?LinkID&#x3D;135170 中的 about_Execution_Policies_SeanHit的博客-CSDN博客</a></p>
]]></content>
      <tags>
        <tag>Windows使用</tag>
      </tags>
  </entry>
</search>
